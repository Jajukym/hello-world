C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) 
                    -PR(.\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          
   2          /*******************************************************************************
   3          * File Name: cyfitter_cfg.c
   4          * 
   5          * PSoC Creator  4.3
   6          *
   7          * Description:
   8          * This file contains device initialization code.
   9          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
  10          * This file is automatically generated by PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright (c) 2007-2019 Cypress Semiconductor.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include <string.h>
  20          #include "cytypes.h"
  21          #include "cydevice_trm.h"
  22          #include "cyfitter.h"
  23          #include "CyLib.h"
  24          #include "cyfitter_cfg.h"
  25          
  26          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  27          
  28          
  29          #if defined(__C51__) || defined(__CX51__)
  30                  #define CYPACKED
  31                  #define CYPACKED_ATTR
  32                  #define CYALIGNED
  33                  
  34              #define CY_CFG_UNUSED
  35                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  36          
  37          
  38          
  39                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  40                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  41                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  42          #else
                      #error Unsupported toolchain
              #endif
  45          
  46          
  47          
  48          
  49          /* Clock startup error codes                                                   */
  50          #define CYCLOCKSTART_NO_ERROR    0u
  51          #define CYCLOCKSTART_XTAL_ERROR  1u
  52          #define CYCLOCKSTART_32KHZ_ERROR 2u
  53          #define CYCLOCKSTART_PLL_ERROR   3u
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 2   

  54          #define CYCLOCKSTART_FLL_ERROR   4u
  55          #define CYCLOCKSTART_WCO_ERROR   5u
  56          
  57          
  58          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  59          /*******************************************************************************
  60          * Function Name: CyClockStartupError
  61          ********************************************************************************
  62          * Summary:
  63          *  If an error is encountered during clock configuration (crystal startup error,
  64          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  65          *  the customer, this function will stop in an infinite loop.
  66          *
  67          * Parameters:
  68          *   void
  69          *
  70          * Return:
  71          *   void
  72          *
  73          *******************************************************************************/
  74          CY_CFG_UNUSED
  75          static void CyClockStartupError(uint8 errorCode);
  76          CY_CFG_UNUSED
  77          static void CyClockStartupError(uint8 errorCode)
  78          {
  79   1          /* To remove the compiler warning if errorCode not used.                */
  80   1          errorCode = errorCode;
  81   1      
  82   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  83   1          /* we will end up here to allow the customer to implement something to  */
  84   1          /* deal with the clock condition.                                       */
  85   1      
  86   1      #ifdef CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK
                  CY_CFG_Clock_Startup_ErrorCallback();
              #else
  89   1          /*  If not using CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK, place your clock startup code here. */
  90   1          /* `#START CyClockStartupError` */
  91   1      
  92   1      
  93   1      
  94   1          /* `#END` */
  95   1      
  96   1          while(1) {}
  97   1      #endif /* CY_CFG_CLOCK_STARTUP_ERROR_CALLBACK */
  98   1      }
  99          #endif
 100          
 101          
 102          /*******************************************************************************
 103          * Function Name: ClockSetup
 104          ********************************************************************************
 105          *
 106          * Summary:
 107          *  Performs the initialization of all of the clocks in the device based on the
 108          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 109          *  clocks and setting the necessary dividers to produce the desired frequency. 
 110          *
 111          * Parameters:
 112          *  void
 113          *
 114          * Return:
 115          *  void
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 3   

 116          *
 117          *******************************************************************************/
 118          static void ClockSetup(void);
 119          static void ClockSetup(void)
 120          {
 121   1              uint32 timeout;
 122   1              uint8 pllLock;
 123   1      
 124   1      
 125   1              /* Configure ILO based on settings from Clock DWR */
 126   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 127   1      
 128   1              /* Configure IMO based on settings from Clock DWR */
 129   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 130   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 131   1      
 132   1              /* Configure PLL based on settings from Clock DWR */
 133   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0818u);
 134   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 135   1              /* Wait up to 250us for the PLL to lock */
 136   1              pllLock = 0u;
 137   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 138   1              { 
 139   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 140   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 141   2              }
 142   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 143   1              if (timeout == 0u)
 144   1              {
 145   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 146   2              }
 147   1      
 148   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 149   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 150   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 151   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 152   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 153   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 154   1      
 155   1              /* Configure USB Clock based on settings from Clock DWR */
 156   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 157   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 158   1      }
 159          
 160          
 161          /* Analog API Functions */
 162          
 163          
 164          /*******************************************************************************
 165          * Function Name: AnalogSetDefault
 166          ********************************************************************************
 167          *
 168          * Summary:
 169          *  Sets up the analog portions of the chip to default values based on chip
 170          *  configuration options from the project.
 171          *
 172          * Parameters:
 173          *  void
 174          *
 175          * Return:
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 4   

 176          *  void
 177          *
 178          *******************************************************************************/
 179          static void AnalogSetDefault(void);
 180          static void AnalogSetDefault(void)
 181          {
 182   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 183   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 184   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 185   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 186   1      }
 187          
 188          
 189          /*******************************************************************************
 190          * Function Name: SetAnalogRoutingPumps
 191          ********************************************************************************
 192          *
 193          * Summary:
 194          * Enables or disables the analog pumps feeding analog routing switches.
 195          * Intended to be called at startup, based on the Vdda system configuration;
 196          * may be called during operation when the user informs us that the Vdda voltage
 197          * crossed the pump threshold.
 198          *
 199          * Parameters:
 200          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 201          *
 202          * Return:
 203          *  void
 204          *
 205          *******************************************************************************/
 206          void SetAnalogRoutingPumps(uint8 enabled)
 207          {
 208   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 209   1              if (enabled != 0u)
 210   1              {
 211   2                      regValue |= 0x00u;
 212   2              }
 213   1              else
 214   1              {
 215   2                      regValue &= (uint8)~0x00u;
 216   2              }
 217   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 218   1      }
 219          
 220          
 221          
 222          
 223          /*******************************************************************************
 224          * Function Name: cyfitter_cfg
 225          ********************************************************************************
 226          * Summary:
 227          *  This function is called by the start-up code for the selected device. It
 228          *  performs all of the necessary device configuration based on the design
 229          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 230          *  as Clocks and Pins as well as any component configuration that is necessary.
 231          *
 232          * Parameters:
 233          *   void
 234          *
 235          * Return:
 236          *   void
 237          *
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 5   

 238          *******************************************************************************/
 239          
 240          void cyfitter_cfg(void)
 241          {
 242   1              /* IOPINS0_8 Address: CYREG_PRT15_DR Size (bytes): 10 */
 243   1              static const uint8 CYCODE BS_IOPINS0_8_VAL[] = {
 244   1                      0x40u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0xC0u, 0x00u};
 245   1      
 246   1              /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 247   1              static const uint8 CYCODE BS_IOPINS0_1_VAL[] = {
 248   1                      0x00u, 0x0Fu, 0x0Bu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 249   1      
 250   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 251   1              static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 252   1                      0x00u, 0x7Fu, 0x7Fu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 253   1      
 254   1      
 255   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 256   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0x31u : 0x00u));
 257   1              /* Setup clocks based on selections from Clock DWR */
 258   1              ClockSetup();
 259   1              /* Set Flash Cycles based on newly configured 64.00MHz Bus Clock. */
 260   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 261   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 262   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 263   1      
 264   1              {
 265   2                      static const uint8 CYCODE cfg_byte_table[] = {
 266   2                              0x0Cu,
 267   2                              0x00u, 0x45u, 0x01u, /* Base address 0x004500 */
 268   2                              /* CYDEV_PICU_INTTYPE_PICU15_BASE */
 269   2                              0x7Eu, 0x02u, 
 270   2                              0x00u, 0x52u, 0x01u, /* Base address 0x005200 */
 271   2                              /* CYDEV_PRTDSI_PRT15_BASE */
 272   2                              0x7Cu, 0x40u, 
 273   2                              0x01u, 0x17u, 0x02u, /* Base address 0x011700 */
 274   2                              /* CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u */
 275   2                              0xEAu, 0x02u, 0xEEu, 0x0Au, 
 276   2                              0x01u, 0x19u, 0x02u, /* Base address 0x011900 */
 277   2                              /* CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u */
 278   2                              0xEAu, 0x02u, 0xEEu, 0x0Au, 
 279   2                              0x01u, 0x40u, 0x03u, /* Base address 0x014000 */
 280   2                              /* CYDEV_UCFG_DSI0_BASE */
 281   2                              0x33u, 0x81u, 0x36u, 0x40u, 
 282   2                              /* CYDEV_UCFG_DSI0_BASE + 0x00000080u */
 283   2                              0xCCu, 0x70u, 
 284   2                              0x01u, 0x41u, 0x03u, /* Base address 0x014100 */
 285   2                              /* CYDEV_UCFG_DSI1_BASE + 0x00000080u */
 286   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
 287   2                              0x01u, 0x42u, 0x03u, /* Base address 0x014200 */
 288   2                              /* CYDEV_UCFG_DSI2_BASE + 0x00000080u */
 289   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
 290   2                              0x01u, 0x43u, 0x03u, /* Base address 0x014300 */
 291   2                              /* CYDEV_UCFG_DSI3_BASE + 0x00000080u */
 292   2                              0x9Fu, 0x01u, 0xA6u, 0x40u, 0xA7u, 0x80u, 
 293   2                              0x01u, 0x47u, 0x04u, /* Base address 0x014700 */
 294   2                              /* CYDEV_UCFG_DSI7_BASE */
 295   2                              0x08u, 0x08u, 0x0Bu, 0x04u, 0x0Fu, 0x40u, 
 296   2                              /* CYDEV_UCFG_DSI7_BASE + 0x00000080u */
 297   2                              0xC2u, 0x0Eu, 
 298   2                              0x01u, 0x48u, 0x04u, /* Base address 0x014800 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 6   

 299   2                              /* CYDEV_UCFG_DSI8_BASE + 0x00000080u */
 300   2                              0xAEu, 0x40u, 0xAFu, 0x81u, 0xEAu, 0x40u, 0xEEu, 0x50u, 
 301   2                              0x01u, 0x4Cu, 0x02u, /* Base address 0x014C00 */
 302   2                              /* CYDEV_UCFG_DSI12_BASE + 0x00000080u */
 303   2                              0xACu, 0x08u, 0xAFu, 0x44u, 
 304   2                              0x01u, 0x51u, 0x01u, /* Base address 0x015100 */
 305   2                              /* CYREG_IDMUX_IRQ_CTL0 */
 306   2                              0x00u, 0x2Au, 
 307   2                      };
 308   2                      /* BYTES: 95 */
 309   2      
 310   2      
 311   2                      CYPACKED typedef struct {
 312   2                              void CYFAR *address;
 313   2                              uint16 size;
 314   2                      } CYPACKED_ATTR cfg_memset_t;
 315   2      
 316   2                      static const cfg_memset_t CYCODE cfg_memset_list[] = {
 317   2                              /* address, size */
 318   2                              {(void CYFAR *)(CYREG_PRT0_DR), 16u},
 319   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 320   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 321   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 322   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 323   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 324   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 325   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 326   2                      };
 327   2      
 328   2                      uint8 CYDATA i;
 329   2      
 330   2                      /* Zero out critical memory blocks before beginning configuration */
 331   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 332   2                      {
 333   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 334   3                              CYMEMZERO(ms->address, ms->size);
 335   3                      }
 336   2      
 337   2                      cfg_write_bytes_code(cfg_byte_table);
 338   2      
 339   2                      /* Enable digital routing */
 340   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 341   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 342   2              }
 343   1      
 344   1      
 345   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 346   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT15_DR), (const void CYCODE *)(BS_IOPINS0_8_VAL), 10u);
 347   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT1_DM0), (const void CYCODE *)(BS_IOPINS0_1_VAL), 8u);
 348   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
 349   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 350   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 351   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 352   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 353   1              {
 354   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 355   2              }
 356   1      
 357   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL0_UDB_TEST_3), 0x40u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 7   

 358   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_BCTL1_UDB_TEST_3), 0x40u);
 359   1      
 360   1              /* Perform basic analog initialization to defaults */
 361   1              AnalogSetDefault();
 362   1      
 363   1              /* Configure alternate active mode */
 364   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 365   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 366   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 77
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 80
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 96
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 126
0000 904300            MOV     DPTR,#04300H
0003 7406              MOV     A,#06H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0006 904200            MOV     DPTR,#04200H
0009 7452              MOV     A,#052H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
000C 7B0C              MOV     R3,#0CH
000E 7A01              MOV     R2,#01H
0010 790F              MOV     R1,#0FH
0012 120000      E     LCALL   _cyread8
0015 9046A1            MOV     DPTR,#046A1H
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
001A 7B00              MOV     R3,#00H
001C 7A42              MOV     R2,#042H
001E 7922              MOV     R1,#022H
0020 7D18              MOV     R5,#018H
0022 7C08              MOV     R4,#08H
0024 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 134
0027 7B00              MOV     R3,#00H
0029 7A42              MOV     R2,#042H
002B 7920              MOV     R1,#020H
002D 7D51              MOV     R5,#051H
002F 7C12              MOV     R4,#012H
0031 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 136
0034 900000      R     MOV     DPTR,#pllLock
0037 E4                CLR     A
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0039 7F19              MOV     R7,#019H
003B 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 9   

003D 7D00              MOV     R5,#00H
003F 7C00              MOV     R4,#00H
0041 900000      R     MOV     DPTR,#timeout
0044 120000      E     LCALL   ?C?LSTXDATA
0047         ?C0004:
0047 900000      R     MOV     DPTR,#timeout
004A 120000      E     LCALL   ?C?LLDXDATA
004D D3                SETB    C
004E EF                MOV     A,R7
004F 9400              SUBB    A,#00H
0051 EE                MOV     A,R6
0052 9400              SUBB    A,#00H
0054 404E              JC      ?C0005
0056 900000      R     MOV     DPTR,#pllLock
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 6403              XRL     A,#03H
005E 6044              JZ      ?C0005
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
0060 904225            MOV     DPTR,#04225H
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 5401              ANL     A,#01H
0068 FF                MOV     R7,A
0069 7E00              MOV     R6,#00H
006B 900000      R     MOV     DPTR,#pllLock
006E E0                MOVX    A,@DPTR
006F FE                MOV     R6,A
0070 EE                MOV     A,R6
0071 25E0              ADD     A,ACC
0073 FE                MOV     R6,A
0074 EE                MOV     A,R6
0075 4F                ORL     A,R7
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 5403              ANL     A,#03H
007A FF                MOV     R7,A
007B 900000      R     MOV     DPTR,#pllLock
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0080 7FE0              MOV     R7,#0E0H
0082 7E01              MOV     R6,#01H
0084 7D00              MOV     R5,#00H
0086 7C00              MOV     R4,#00H
0088 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 141
008B 900000      R     MOV     DPTR,#timeout
008E 120000      E     LCALL   ?C?LLDXDATA
0091 7BFF              MOV     R3,#0FFH
0093 7AFF              MOV     R2,#0FFH
0095 79FF              MOV     R1,#0FFH
0097 78FF              MOV     R0,#0FFH
0099 120000      E     LCALL   ?C?LADD
009C 900000      R     MOV     DPTR,#timeout
009F 120000      E     LCALL   ?C?LSTXDATA
00A2 80A3              SJMP    ?C0004
00A4         ?C0005:
                                           ; SOURCE LINE # 143
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 10  

00A4 900000      R     MOV     DPTR,#timeout
00A7 120000      E     LCALL   ?C?LLDXDATA
00AA EF                MOV     A,R7
00AB 4E                ORL     A,R6
00AC 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
00AE 7F03              MOV     R7,#03H
00B0 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 146
00B3         ?C0007:
                                           ; SOURCE LINE # 149
00B3 7B00              MOV     R3,#00H
00B5 7A40              MOV     R2,#040H
00B7 7904              MOV     R1,#04H
00B9 7D00              MOV     R5,#00H
00BB 7C01              MOV     R4,#01H
00BD 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 150
00C0 904004            MOV     DPTR,#04004H
00C3 7407              MOV     A,#07H
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
00C6 904006            MOV     DPTR,#04006H
00C9 E4                CLR     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
00CB 904008            MOV     DPTR,#04008H
00CE 7448              MOV     A,#048H
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
00D1 904004            MOV     DPTR,#04004H
00D4 E4                CLR     A
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
00D6 904009            MOV     DPTR,#04009H
00D9 E4                CLR     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
00DB 904001            MOV     DPTR,#04001H
00DE 7402              MOV     A,#02H
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
00E1 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 11  

0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 206
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0010
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0025 800E              SJMP    ?C0011
0027         ?C0010:
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 12  

0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0035         ?C0011:
                                           ; SOURCE LINE # 217
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 256
0000 904800            MOV     DPTR,#04800H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0005 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 260
0008 904800            MOV     DPTR,#04800H
000B 74C0              MOV     A,#0C0H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
000E 7B00              MOV     R3,#00H
0010 7A46              MOV     R2,#046H
0012 79E8              MOV     R1,#0E8H
0014 120000      E     LCALL   _cyread8
0017 EF                MOV     A,R7
0018 4405              ORL     A,#05H
001A FD                MOV     R5,A
001B 7B00              MOV     R3,#00H
001D 7A46              MOV     R2,#046H
001F 79E8              MOV     R1,#0E8H
0021 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 331
0024 750000      R     MOV     i,#00H
0027         ?C0013:
0027 E500        R     MOV     A,i
0029 C3                CLR     C
002A 9408              SUBB    A,#08H
002C 503A              JNC     ?C0014
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
002E AF00        R     MOV     R7,i
0030 EF                MOV     A,R7
0031 75F005            MOV     B,#05H
0034 A4                MUL     AB
0035 2400        R     ADD     A,#LOW cfg_memset_list
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 13  

0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH cfg_memset_list
003C F583              MOV     DPH,A
003E AF82              MOV     R7,DPL
0040 AE83              MOV     R6,DPH
0042 8E00        R     MOV     ms,R6
0044 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 334
0046 AE00        R     MOV     R6,ms
0048 AF00        R     MOV     R7,ms+01H
004A 8F82              MOV     DPL,R7
004C 8E83              MOV     DPH,R6
004E 120000      E     LCALL   ?C?PLDCODE
0051 AE00        R     MOV     R6,ms
0053 AF00        R     MOV     R7,ms+01H
0055 8F82              MOV     DPL,R7
0057 8E83              MOV     DPH,R6
0059 7403              MOV     A,#03H
005B 93                MOVC    A,@A+DPTR
005C FC                MOV     R4,A
005D 7404              MOV     A,#04H
005F 93                MOVC    A,@A+DPTR
0060 FD                MOV     R5,A
0061 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 335
0064 0500        R     INC     i
0066 80BF              SJMP    ?C0013
0068         ?C0014:
                                           ; SOURCE LINE # 337
0068 7E00        R     MOV     R6,#HIGH cfg_byte_table
006A 7F00        R     MOV     R7,#LOW cfg_byte_table
006C 120000      E     LCALL   _cfg_write_bytes_code
                                           ; SOURCE LINE # 340
006F 7B01              MOV     R3,#01H
0071 7A50              MOV     R2,#050H
0073 7903              MOV     R1,#03H
0075 120000      E     LCALL   _cyread8
0078 EF                MOV     A,R7
0079 4402              ORL     A,#02H
007B FD                MOV     R5,A
007C 7B01              MOV     R3,#01H
007E 7A50              MOV     R2,#050H
0080 7903              MOV     R1,#03H
0082 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 341
0085 7B01              MOV     R3,#01H
0087 7A50              MOV     R2,#050H
0089 7913              MOV     R1,#013H
008B 120000      E     LCALL   _cyread8
008E EF                MOV     A,R7
008F 4402              ORL     A,#02H
0091 FD                MOV     R5,A
0092 7B01              MOV     R3,#01H
0094 7A50              MOV     R2,#050H
0096 7913              MOV     R1,#013H
0098 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 346
009B 7C00        R     MOV     R4,#HIGH BS_IOPINS0_8_VAL
009D 7D00        R     MOV     R5,#LOW BS_IOPINS0_8_VAL
009F 7B00              MOV     R3,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 14  

00A1 7A51              MOV     R2,#051H
00A3 79F0              MOV     R1,#0F0H
00A5 7F0A              MOV     R7,#0AH
00A7 7E00              MOV     R6,#00H
00A9 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 347
00AC 7C00        R     MOV     R4,#HIGH BS_IOPINS0_1_VAL
00AE 7D00        R     MOV     R5,#LOW BS_IOPINS0_1_VAL
00B0 7B00              MOV     R3,#00H
00B2 7A51              MOV     R2,#051H
00B4 7912              MOV     R1,#012H
00B6 7F08              MOV     R7,#08H
00B8 7E00              MOV     R6,#00H
00BA 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 348
00BD 7C00        R     MOV     R4,#HIGH BS_IOPINS0_2_VAL
00BF 7D00        R     MOV     R5,#LOW BS_IOPINS0_2_VAL
00C1 7B00              MOV     R3,#00H
00C3 7A51              MOV     R2,#051H
00C5 7922              MOV     R1,#022H
00C7 7F08              MOV     R7,#08H
00C9 7E00              MOV     R6,#00H
00CB 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 349
00CE 9044F4            MOV     DPTR,#044F4H
00D1 7401              MOV     A,#01H
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
00D4 904322            MOV     DPTR,#04322H
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 EF                MOV     A,R7
00DA 4408              ORL     A,#08H
00DC FF                MOV     R7,A
00DD 904322            MOV     DPTR,#04322H
00E0 EF                MOV     A,R7
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
00E2 9046EC            MOV     DPTR,#046ECH
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 C3                CLR     C
00E9 9405              SUBB    A,#05H
00EB 5006              JNC     ?C0016
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
00ED 904689            MOV     DPTR,#04689H
00F0 743A              MOV     A,#03AH
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
00F3         ?C0016:
                                           ; SOURCE LINE # 357
00F3 7B01              MOV     R3,#01H
00F5 7A50              MOV     R2,#050H
00F7 7907              MOV     R1,#07H
00F9 7D40              MOV     R5,#040H
00FB 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 358
00FE 7B01              MOV     R3,#01H
0100 7A50              MOV     R2,#050H
0102 7917              MOV     R1,#017H
C51 COMPILER V9.51   CYFITTER_CFG                                                          04/02/2020 08:19:10 PAGE 15  

0104 7D40              MOV     R5,#040H
0106 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 361
0109 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 364
010C 7B00              MOV     R3,#00H
010E 7A43              MOV     R2,#043H
0110 79A0              MOV     R1,#0A0H
0112 C003              PUSH    AR3
0114 C002              PUSH    AR2
0116 C001              PUSH    AR1
0118 7B00              MOV     R3,#00H
011A 7A43              MOV     R2,#043H
011C 79B0              MOV     R1,#0B0H
011E 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0121 120000      E     LCALL   ?C?PSTXDATA
0124 D001              POP     AR1
0126 D002              POP     AR2
0128 D003              POP     AR3
012A 7F0E              MOV     R7,#0EH
012C 7E00              MOV     R6,#00H
012E 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 365
0131 9043B0            MOV     DPTR,#043B0H
0134 E0                MOVX    A,@DPTR
0135 FF                MOV     R7,A
0136 EF                MOV     A,R7
0137 54FD              ANL     A,#0FDH
0139 FF                MOV     R7,A
013A EF                MOV     A,R7
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
013C 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    679    ----
   CONSTANT SIZE    =    161    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
