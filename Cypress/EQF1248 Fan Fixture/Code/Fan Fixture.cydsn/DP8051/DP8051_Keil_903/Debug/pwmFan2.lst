C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE PWMFAN2
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\pwmFan2.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\pwmFan2.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\pwmFan2.lst) CD DB NOIP OT(2
                    -,SIZE) DF(DEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\pwmFan2.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: pwmFan2.c  
   3          * Version 2.40
   4          *
   5          * Description:
   6          *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7          *  comparitors. Each instance of this user module is capable of generating
   8          *  two PWM outputs with the same period. The pulse width is selectable between
   9          *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks. 
  10          *  The compare value output may be configured to be active when the present 
  11          *  counter is less than or less than/equal to the compare value.
  12          *  A terminal count output is also provided. It generates a pulse one clock
  13          *  width wide when the counter is equal to zero.
  14          *
  15          * Note:
  16          *
  17          *******************************************************************************
  18          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions, 
  20          * disclaimers, and limitations in the end user license agreement accompanying 
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "cytypes.h"
  25          #include "pwmFan2.h"
  26          
  27          uint8 pwmFan2_initVar = 0u;
  28          
  29          
  30          /*******************************************************************************
  31          * Function Name: pwmFan2_Start
  32          ********************************************************************************
  33          *
  34          * Summary:
  35          *  The start function initializes the pwm with the default values, the 
  36          *  enables the counter to begin counting.  It does not enable interrupts,
  37          *  the EnableInt command should be called if interrupt generation is required.
  38          *
  39          * Parameters:  
  40          *  None  
  41          *
  42          * Return: 
  43          *  None
  44          *
  45          * Global variables:
  46          *  pwmFan2_initVar: Is modified when this function is called for the 
  47          *   first time. Is used to ensure that initialization happens only once.
  48          *
  49          *******************************************************************************/
  50          void pwmFan2_Start(void) 
  51          {
  52   1          /* If not Initialized then initialize all required hardware and software */
  53   1          if(pwmFan2_initVar == 0u)
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 2   

  54   1          {
  55   2              pwmFan2_Init();
  56   2              pwmFan2_initVar = 1u;
  57   2          }
  58   1          pwmFan2_Enable();
  59   1      
  60   1      }
  61          
  62          
  63          /*******************************************************************************
  64          * Function Name: pwmFan2_Init
  65          ********************************************************************************
  66          *
  67          * Summary:
  68          *  Initialize component's parameters to the parameters set by user in the 
  69          *  customizer of the component placed onto schematic. Usually called in 
  70          *  pwmFan2_Start().
  71          *
  72          * Parameters:  
  73          *  None
  74          *
  75          * Return: 
  76          *  None
  77          *
  78          *******************************************************************************/
  79          void pwmFan2_Init(void) 
  80          {
  81   1          #if (pwmFan2_UsingFixedFunction || pwmFan2_UseControl)
  82   1              uint8 ctrl;
  83   1          #endif /* (pwmFan2_UsingFixedFunction || pwmFan2_UseControl) */
  84   1          
  85   1          #if(!pwmFan2_UsingFixedFunction) 
  86   1              #if(pwmFan2_UseStatus)
  87   1                  /* Interrupt State Backup for Critical Region*/
  88   1                  uint8 pwmFan2_interruptState;
  89   1              #endif /* (pwmFan2_UseStatus) */
  90   1          #endif /* (!pwmFan2_UsingFixedFunction) */
  91   1          
  92   1          #if (pwmFan2_UsingFixedFunction)
                      /* You are allowed to write the compare value (FF only) */
                      pwmFan2_CONTROL |= pwmFan2_CFG0_MODE;
                      #if (pwmFan2_DeadBand2_4)
                          pwmFan2_CONTROL |= pwmFan2_CFG0_DB;
                      #endif /* (pwmFan2_DeadBand2_4) */
                              
                      /* Set the default Compare Mode */
                      #if(CY_PSOC5A)
                              ctrl = pwmFan2_CONTROL2 & ((uint8)(~pwmFan2_CTRL_CMPMODE1_MASK));
                              pwmFan2_CONTROL2 = ctrl | pwmFan2_DEFAULT_COMPARE1_MODE;
                      #endif /* (CY_PSOC5A) */
                      #if(CY_PSOC3 || CY_PSOC5LP)
                              ctrl = pwmFan2_CONTROL3 & ((uint8 )(~pwmFan2_CTRL_CMPMODE1_MASK));
                              pwmFan2_CONTROL3 = ctrl | pwmFan2_DEFAULT_COMPARE1_MODE;
                      #endif /* (CY_PSOC3 || CY_PSOC5LP) */
                      
                       /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
                      pwmFan2_RT1 &= ((uint8)(~pwmFan2_RT1_MASK));
                      pwmFan2_RT1 |= pwmFan2_SYNC;     
                              
                      /*Enable DSI Sync all all inputs of the PWM*/
                      pwmFan2_RT1 &= ((uint8)(~pwmFan2_SYNCDSI_MASK));
                      pwmFan2_RT1 |= pwmFan2_SYNCDSI_EN;
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 3   

                     
                  #elif (pwmFan2_UseControl)
 118   1              /* Set the default compare mode defined in the parameter */
 119   1              ctrl = pwmFan2_CONTROL & ((uint8)(~pwmFan2_CTRL_CMPMODE2_MASK)) & ((uint8)(~pwmFan2_CTRL_CMPMODE1_
             -MASK));
 120   1              pwmFan2_CONTROL = ctrl | pwmFan2_DEFAULT_COMPARE2_MODE | 
 121   1                                         pwmFan2_DEFAULT_COMPARE1_MODE;
 122   1          #endif /* (pwmFan2_UsingFixedFunction) */
 123   1              
 124   1          #if (!pwmFan2_UsingFixedFunction)
 125   1              #if (pwmFan2_Resolution == 8)
 126   1                  /* Set FIFO 0 to 1 byte register for period*/
 127   1                  pwmFan2_AUX_CONTROLDP0 |= (pwmFan2_AUX_CTRL_FIFO0_CLR);
 128   1              #else /* (pwmFan2_Resolution == 16)*/
                          /* Set FIFO 0 to 1 byte register for period */
                          pwmFan2_AUX_CONTROLDP0 |= (pwmFan2_AUX_CTRL_FIFO0_CLR);
                          pwmFan2_AUX_CONTROLDP1 |= (pwmFan2_AUX_CTRL_FIFO0_CLR);
                      #endif /* (pwmFan2_Resolution == 8) */
 133   1      
 134   1              pwmFan2_WriteCounter(pwmFan2_INIT_PERIOD_VALUE);
 135   1          #endif /* (!pwmFan2_UsingFixedFunction) */
 136   1              
 137   1          pwmFan2_WritePeriod(pwmFan2_INIT_PERIOD_VALUE);
 138   1      
 139   1              #if (pwmFan2_UseOneCompareMode)
 140   1                  pwmFan2_WriteCompare(pwmFan2_INIT_COMPARE_VALUE1);
 141   1              #else
                          pwmFan2_WriteCompare1(pwmFan2_INIT_COMPARE_VALUE1);
                          pwmFan2_WriteCompare2(pwmFan2_INIT_COMPARE_VALUE2);
                      #endif /* (pwmFan2_UseOneCompareMode) */
 145   1              
 146   1              #if (pwmFan2_KillModeMinTime)
                          pwmFan2_WriteKillTime(pwmFan2_MinimumKillTime);
                      #endif /* (pwmFan2_KillModeMinTime) */
 149   1              
 150   1              #if (pwmFan2_DeadBandUsed)
                          pwmFan2_WriteDeadTime(pwmFan2_INIT_DEAD_TIME);
                      #endif /* (pwmFan2_DeadBandUsed) */
 153   1      
 154   1          #if (pwmFan2_UseStatus || pwmFan2_UsingFixedFunction)
 155   1              pwmFan2_SetInterruptMode(pwmFan2_INIT_INTERRUPTS_MODE);
 156   1          #endif /* (pwmFan2_UseStatus || pwmFan2_UsingFixedFunction) */
 157   1              
 158   1          #if (pwmFan2_UsingFixedFunction)
                      /* Globally Enable the Fixed Function Block chosen */
                      pwmFan2_GLOBAL_ENABLE |= pwmFan2_BLOCK_EN_MASK;
                      /* Set the Interrupt source to come from the status register */
                      pwmFan2_CONTROL2 |= pwmFan2_CTRL2_IRQ_SEL;
                  #else
 164   1              #if(pwmFan2_UseStatus)
 165   1                  
 166   1                  /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
 167   1                  /* Enter Critical Region*/
 168   1                  pwmFan2_interruptState = CyEnterCriticalSection();
 169   1                  /* Use the interrupt output of the status register for IRQ output */
 170   1                  pwmFan2_STATUS_AUX_CTRL |= pwmFan2_STATUS_ACTL_INT_EN_MASK;
 171   1                  
 172   1                   /* Exit Critical Region*/
 173   1                  CyExitCriticalSection(pwmFan2_interruptState);
 174   1                  
 175   1                  /* Clear the FIFO to enable the pwmFan2_STATUS_FIFOFULL
 176   1                         bit to be set on FIFO full. */
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 4   

 177   1                  pwmFan2_ClearFIFO();
 178   1              #endif /* (pwmFan2_UseStatus) */
 179   1          #endif /* (pwmFan2_UsingFixedFunction) */
 180   1      }
 181          
 182          
 183          /*******************************************************************************
 184          * Function Name: pwmFan2_Enable
 185          ********************************************************************************
 186          *
 187          * Summary: 
 188          *  Enables the PWM block operation
 189          *
 190          * Parameters:  
 191          *  None
 192          *
 193          * Return: 
 194          *  None
 195          *
 196          * Side Effects: 
 197          *  This works only if software enable mode is chosen
 198          *
 199          *******************************************************************************/
 200          void pwmFan2_Enable(void) 
 201          {
 202   1          /* Globally Enable the Fixed Function Block chosen */
 203   1          #if (pwmFan2_UsingFixedFunction)
                      pwmFan2_GLOBAL_ENABLE |= pwmFan2_BLOCK_EN_MASK;
                      pwmFan2_GLOBAL_STBY_ENABLE |= pwmFan2_BLOCK_STBY_EN_MASK;
                  #endif /* (pwmFan2_UsingFixedFunction) */
 207   1          
 208   1          /* Enable the PWM from the control register  */
 209   1          #if (pwmFan2_UseControl || pwmFan2_UsingFixedFunction)
 210   1              pwmFan2_CONTROL |= pwmFan2_CTRL_ENABLE;
 211   1          #endif /* (pwmFan2_UseControl || pwmFan2_UsingFixedFunction) */
 212   1      }
 213          
 214          
 215          /*******************************************************************************
 216          * Function Name: pwmFan2_Stop
 217          ********************************************************************************
 218          *
 219          * Summary:
 220          *  The stop function halts the PWM, but does not change any modes or disable
 221          *  interrupts.
 222          *
 223          * Parameters:  
 224          *  None  
 225          *
 226          * Return: 
 227          *  None
 228          *
 229          * Side Effects:
 230          *  If the Enable mode is set to Hardware only then this function
 231          *  has no effect on the operation of the PWM
 232          *
 233          *******************************************************************************/
 234          void pwmFan2_Stop(void) 
 235          {
 236   1          #if (pwmFan2_UseControl || pwmFan2_UsingFixedFunction)
 237   1              pwmFan2_CONTROL &= ((uint8)(~pwmFan2_CTRL_ENABLE));
 238   1          #endif /* (pwmFan2_UseControl || pwmFan2_UsingFixedFunction) */
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 5   

 239   1          
 240   1          /* Globally disable the Fixed Function Block chosen */
 241   1          #if (pwmFan2_UsingFixedFunction)
                      pwmFan2_GLOBAL_ENABLE &= ((uint8)(~pwmFan2_BLOCK_EN_MASK));
                      pwmFan2_GLOBAL_STBY_ENABLE &= ((uint8)(~pwmFan2_BLOCK_STBY_EN_MASK));
                  #endif /* (pwmFan2_UsingFixedFunction) */
 245   1      }
 246          
 247          
 248          #if (pwmFan2_UseOneCompareMode)
 249                  #if (pwmFan2_CompareMode1SW)
              
              
                              /*******************************************************************************
                              * Function Name: pwmFan2_SetCompareMode
                              ********************************************************************************
                              * 
                              * Summary:
                              *  This function writes the Compare Mode for the pwm output when in Dither mode,
                              *  Center Align Mode or One Output Mode.
                              *
                              * Parameters:
                              *  comparemode:  The new compare mode for the PWM output. Use the compare types
                              *                defined in the H file as input arguments.
                              *
                              * Return:
                              *  None
                              *
                              *******************************************************************************/
                              void pwmFan2_SetCompareMode(uint8 comparemode) 
                              {
                                  #if(pwmFan2_UsingFixedFunction)
                          
                              #if(0 != pwmFan2_CTRL_CMPMODE1_SHIFT)
                                  uint8 comparemodemasked = ((uint8)((uint8)comparemode << pwmFan2_CTRL_CMPMODE1_SHIFT))
             -;
                              #else
                                  uint8 comparemodemasked = comparemode;
                              #endif /* (0 != pwmFan2_CTRL_CMPMODE1_SHIFT) */
                          
                                      #if(CY_PSOC5A)
                                          pwmFan2_CONTROL2 &= ((uint8)(~pwmFan2_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
                                          pwmFan2_CONTROL2 |= comparemodemasked;  
                                      #endif /* (CY_PSOC5A) */
                                              
                                      #if(CY_PSOC3 || CY_PSOC5LP)
                                          pwmFan2_CONTROL3 &= ((uint8)(~pwmFan2_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
                                          pwmFan2_CONTROL3 |= comparemodemasked;     
                                      #endif /* (CY_PSOC3 || CY_PSOC5LP) */
                                              
                                  #elif (pwmFan2_UseControl)
                                      
                              #if(0 != pwmFan2_CTRL_CMPMODE1_SHIFT)
                                  uint8 comparemode1masked = ((uint8)((uint8)comparemode << pwmFan2_CTRL_CMPMODE1_SHIFT)
             -) & 
                                                                  pwmFan2_CTRL_CMPMODE1_MASK;
                              #else
                                  uint8 comparemode1masked = comparemode & pwmFan2_CTRL_CMPMODE1_MASK;                
                              #endif /* (0 != pwmFan2_CTRL_CMPMODE1_SHIFT) */
                              
                              #if(0 != pwmFan2_CTRL_CMPMODE2_SHIFT)                            
                                      uint8 comparemode2masked = ((uint8)((uint8)comparemode << pwmFan2_CTRL_CMPMODE2_SHIFT)) & 
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 6   

                                                                 pwmFan2_CTRL_CMPMODE2_MASK;
                              #else
                                      uint8 comparemode2masked = comparemode & pwmFan2_CTRL_CMPMODE2_MASK;                
                              #endif /* (0 != pwmFan2_CTRL_CMPMODE2_SHIFT) */
                              
                                      /*Clear existing mode */
                                      pwmFan2_CONTROL &= ((uint8)(~(pwmFan2_CTRL_CMPMODE1_MASK | pwmFan2_CTRL_CMPMODE2_MASK))); 
                                      pwmFan2_CONTROL |= (comparemode1masked | comparemode2masked);
                                      
                                  #else
                                      uint8 temp = comparemode;
                                  #endif /* (pwmFan2_UsingFixedFunction) */
                              }
                      #endif /* pwmFan2_CompareMode1SW */
 313          
 314          #else /* UseOneCompareMode */
              
                      #if (pwmFan2_CompareMode1SW)
              
              
                              /*******************************************************************************
                              * Function Name: pwmFan2_SetCompareMode1
                              ********************************************************************************
                              * 
                              * Summary:
                              *  This function writes the Compare Mode for the pwm or pwm1 output
                              *
                              * Parameters:  
                              *  comparemode:  The new compare mode for the PWM output. Use the compare types
                              *                defined in the H file as input arguments.
                              *
                              * Return: 
                              *  None
                              *
                              *******************************************************************************/
                              void pwmFan2_SetCompareMode1(uint8 comparemode) 
                              {
                                  #if(0 != pwmFan2_CTRL_CMPMODE1_SHIFT)
                              uint8 comparemodemasked = ((uint8)((uint8)comparemode << pwmFan2_CTRL_CMPMODE1_SHIFT)) & 
                                                             pwmFan2_CTRL_CMPMODE1_MASK;
                                  #else
                              uint8 comparemodemasked = comparemode & pwmFan2_CTRL_CMPMODE1_MASK;                
                          #endif /* (0 != pwmFan2_CTRL_CMPMODE1_SHIFT) */
                                 
                                  #if (pwmFan2_UseControl)
                                      pwmFan2_CONTROL &= ((uint8)(~pwmFan2_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
                                      pwmFan2_CONTROL |= comparemodemasked;
                                  #endif /* (pwmFan2_UseControl) */
                              }
                      #endif /* pwmFan2_CompareMode1SW */
              
              #if (pwmFan2_CompareMode2SW)
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_SetCompareMode2
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This function writes the Compare Mode for the pwm or pwm2 output
                  *
                  * Parameters:  
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 7   

                  *  comparemode:  The new compare mode for the PWM output. Use the compare types
                  *                defined in the H file as input arguments.
                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/
                  void pwmFan2_SetCompareMode2(uint8 comparemode) 
                  {
              
                      #if(0 != pwmFan2_CTRL_CMPMODE2_SHIFT)
                          uint8 comparemodemasked = ((uint8)((uint8)comparemode << pwmFan2_CTRL_CMPMODE2_SHIFT)) & 
                                                               pwmFan2_CTRL_CMPMODE2_MASK;
                      #else
                          uint8 comparemodemasked = comparemode & pwmFan2_CTRL_CMPMODE2_MASK;            
                      #endif /* (0 != pwmFan2_CTRL_CMPMODE2_SHIFT) */
                      
                      #if (pwmFan2_UseControl)
                          pwmFan2_CONTROL &= ((uint8)(~pwmFan2_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
                          pwmFan2_CONTROL |= comparemodemasked;
                      #endif /* (pwmFan2_UseControl) */
                  }
                  #endif /*pwmFan2_CompareMode2SW */
              
              #endif /* UseOneCompareMode */
 386          
 387          
 388          #if (!pwmFan2_UsingFixedFunction)
 389          
 390          
 391              /*******************************************************************************
 392              * Function Name: pwmFan2_WriteCounter
 393              ********************************************************************************
 394              * 
 395              * Summary:
 396              *  This function is used to change the counter value.
 397              *
 398              * Parameters:  
 399              *  counter:  This value may be between 1 and (2^Resolution)-1.   
 400              *
 401              * Return: 
 402              *  None
 403              *
 404              *******************************************************************************/
 405              void pwmFan2_WriteCounter(uint8 counter) \
 406                                                 
 407              {
 408   1              CY_SET_REG8(pwmFan2_COUNTER_LSB_PTR, counter);
 409   1          }
 410          
 411          
 412              /*******************************************************************************
 413              * Function Name: pwmFan2_ReadCounter
 414              ********************************************************************************
 415              * 
 416              * Summary:
 417              *  This function returns the current value of the counter.  It doesn't matter
 418              *  if the counter is enabled or running.
 419              *
 420              * Parameters:  
 421              *  None  
 422              *
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 8   

 423              * Return: 
 424              *  The current value of the counter.
 425              *
 426              *******************************************************************************/
 427              uint8 pwmFan2_ReadCounter(void) 
 428              {
 429   1              /* Force capture by reading Accumulator */
 430   1              /* Must first do a software capture to be able to read the counter */
 431   1              /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 432   1              (void)pwmFan2_COUNTERCAP_LSB;
 433   1              
 434   1              /* Read the data from the FIFO (or capture register for Fixed Function)*/
 435   1              return (CY_GET_REG8(pwmFan2_CAPTURE_LSB_PTR));
 436   1          }
 437          
 438                  #if (pwmFan2_UseStatus)
 439          
 440          
 441                      /*******************************************************************************
 442                      * Function Name: pwmFan2_ClearFIFO
 443                      ********************************************************************************
 444                      * 
 445                      * Summary:
 446                      *  This function clears all capture data from the capture FIFO
 447                      *
 448                      * Parameters:  
 449                      *  None
 450                      *
 451                      * Return: 
 452                      *  None
 453                      *
 454                      *******************************************************************************/
 455                      void pwmFan2_ClearFIFO(void) 
 456                      {
 457   1                      while(0u != (pwmFan2_ReadStatusRegister() & pwmFan2_STATUS_FIFONEMPTY))
 458   1                      {
 459   2                          (void)pwmFan2_ReadCapture();
 460   2                      }
 461   1                  }
 462          
 463                  #endif /* pwmFan2_UseStatus */
 464          
 465          #endif /* !pwmFan2_UsingFixedFunction */
 466          
 467          
 468          /*******************************************************************************
 469          * Function Name: pwmFan2_WritePeriod
 470          ********************************************************************************
 471          * 
 472          * Summary:
 473          *  This function is used to change the period of the counter.  The new period 
 474          *  will be loaded the next time terminal count is detected.
 475          *
 476          * Parameters:  
 477          *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0 
 478          *           will result in the counter remaining at zero.
 479          *
 480          * Return: 
 481          *  None
 482          *
 483          *******************************************************************************/
 484          void pwmFan2_WritePeriod(uint8 period) 
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 9   

 485          {
 486   1          #if(pwmFan2_UsingFixedFunction)
                      CY_SET_REG16(pwmFan2_PERIOD_LSB_PTR, (uint16)period);
                  #else
 489   1              CY_SET_REG8(pwmFan2_PERIOD_LSB_PTR, period);
 490   1          #endif /* (pwmFan2_UsingFixedFunction) */
 491   1      }
 492          
 493          #if (pwmFan2_UseOneCompareMode)
 494          
 495          
 496              /*******************************************************************************
 497              * Function Name: pwmFan2_WriteCompare
 498              ********************************************************************************
 499              * 
 500              * Summary:
 501              *  This funtion is used to change the compare1 value when the PWM is in Dither
 502              *  mode. The compare output will reflect the new value on the next UDB clock. 
 503              *  The compare output will be driven high when the present counter value is 
 504              *  compared to the compare value based on the compare mode defined in 
 505              *  Dither Mode.
 506              *
 507              * Parameters:  
 508              *  compare:  New compare value.  
 509              *
 510              * Return: 
 511              *  None
 512              *
 513              * Side Effects:
 514              *  This function is only available if the PWM mode parameter is set to
 515              *  Dither Mode, Center Aligned Mode or One Output Mode
 516              *
 517              *******************************************************************************/
 518              void pwmFan2_WriteCompare(uint8 compare) \
 519                                                 
 520              {   
 521   1                      #if(pwmFan2_UsingFixedFunction)
                                      CY_SET_REG16(pwmFan2_COMPARE1_LSB_PTR, (uint16)compare);
                              #else
 524   1                      CY_SET_REG8(pwmFan2_COMPARE1_LSB_PTR, compare); 
 525   1                      #endif /* (pwmFan2_UsingFixedFunction) */
 526   1              
 527   1              #if (pwmFan2_PWMMode == pwmFan2__B_PWM__DITHER)
                          #if(pwmFan2_UsingFixedFunction)
                                      CY_SET_REG16(pwmFan2_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
                              #else
                              CY_SET_REG8(pwmFan2_COMPARE2_LSB_PTR, (compare + 1u));  
                              #endif /* (pwmFan2_UsingFixedFunction) */
                      #endif /* (pwmFan2_PWMMode == pwmFan2__B_PWM__DITHER) */
 534   1          }
 535          
 536          
 537          #else
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_WriteCompare1
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This funtion is used to change the compare1 value.  The compare output will 
                  *  reflect the new value on the next UDB clock.  The compare output will be 
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 10  

                  *  driven high when the present counter value is less than or less than or 
                  *  equal to the compare register, depending on the mode.
                  *
                  * Parameters:  
                  *  compare:  New compare value.  
                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/
                  void pwmFan2_WriteCompare1(uint8 compare) \
                                                      
                  {
                      #if(pwmFan2_UsingFixedFunction)
                          CY_SET_REG16(pwmFan2_COMPARE1_LSB_PTR, (uint16)compare);
                      #else
                          CY_SET_REG8(pwmFan2_COMPARE1_LSB_PTR, compare);
                      #endif /* (pwmFan2_UsingFixedFunction) */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_WriteCompare2
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This funtion is used to change the compare value, for compare1 output.  
                  *  The compare output will reflect the new value on the next UDB clock.  
                  *  The compare output will be driven high when the present counter value is 
                  *  less than or less than or equal to the compare register, depending on the 
                  *  mode.
                  *
                  * Parameters:  
                  *  compare:  New compare value.  
                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/
                  void pwmFan2_WriteCompare2(uint8 compare) \
                                                      
                  {
                      #if(pwmFan2_UsingFixedFunction)
                          CY_SET_REG16(pwmFan2_COMPARE2_LSB_PTR, compare);
                      #else
                          CY_SET_REG8(pwmFan2_COMPARE2_LSB_PTR, compare);
                      #endif /* (pwmFan2_UsingFixedFunction) */
                  }
              #endif /* UseOneCompareMode */
 596          
 597          #if (pwmFan2_DeadBandUsed)
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_WriteDeadTime
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This function writes the dead-band counts to the corresponding register
                  *
                  * Parameters:  
                  *  deadtime:  Number of counts for dead time 
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 11  

                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/
                  void pwmFan2_WriteDeadTime(uint8 deadtime) 
                  {
                      /* If using the Dead Band 1-255 mode then just write the register */
                      #if(!pwmFan2_DeadBand2_4)
                          CY_SET_REG8(pwmFan2_DEADBAND_COUNT_PTR, deadtime);
                      #else
                          /* Otherwise the data has to be masked and offset */        
                          /* Clear existing data */
                          pwmFan2_DEADBAND_COUNT &= ((uint8)(~pwmFan2_DEADBAND_COUNT_MASK));
                          
                          /* Set new dead time */
                          #if(pwmFan2_DEADBAND_COUNT_SHIFT)        
                              pwmFan2_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << pwmFan2_DEADBAND_COUNT_SHIFT)) & 
                                                                  pwmFan2_DEADBAND_COUNT_MASK;
                          #else
                              pwmFan2_DEADBAND_COUNT |= deadtime & pwmFan2_DEADBAND_COUNT_MASK;        
                          #endif /* (pwmFan2_DEADBAND_COUNT_SHIFT) */
                      
                      #endif /* (!pwmFan2_DeadBand2_4) */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_ReadDeadTime
                  ********************************************************************************
                  * 
                  * Summary:
                  *  This function reads the dead-band counts from the corresponding register
                  *
                  * Parameters:  
                  *  None
                  *
                  * Return: 
                  *  Dead Band Counts
                  *
                  *******************************************************************************/
                  uint8 pwmFan2_ReadDeadTime(void) 
                  {
                      /* If using the Dead Band 1-255 mode then just read the register */
                      #if(!pwmFan2_DeadBand2_4)
                          return (CY_GET_REG8(pwmFan2_DEADBAND_COUNT_PTR));
                      #else
                      
                          /* Otherwise the data has to be masked and offset */
                          #if(pwmFan2_DEADBAND_COUNT_SHIFT)      
                              return ((uint8)(((uint8)(pwmFan2_DEADBAND_COUNT & pwmFan2_DEADBAND_COUNT_MASK)) >> 
                                                                                         pwmFan2_DEADBAND_COUNT_SHIFT));
                          #else
                              return (pwmFan2_DEADBAND_COUNT & pwmFan2_DEADBAND_COUNT_MASK);
                          #endif /* (pwmFan2_DEADBAND_COUNT_SHIFT) */
                      #endif /* (!pwmFan2_DeadBand2_4) */
                  }
              #endif /* DeadBandUsed */
 667          
 668          #if (pwmFan2_UseStatus || pwmFan2_UsingFixedFunction)
 669          
 670          
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 12  

 671              /*******************************************************************************
 672              * Function Name: pwmFan2_SetInterruptMode
 673              ********************************************************************************
 674              * 
 675              * Summary:
 676              *  This function configures the interrupts mask control of theinterrupt 
 677              *  source status register.
 678              *
 679              * Parameters:  
 680              *  uint8 interruptMode: Bit field containing the interrupt sources enabled 
 681              *
 682              * Return: 
 683              *  None
 684              *
 685              *******************************************************************************/
 686              void pwmFan2_SetInterruptMode(uint8 interruptMode)  
 687              {
 688   1              CY_SET_REG8(pwmFan2_STATUS_MASK_PTR, interruptMode);
 689   1          }
 690          
 691          
 692              /*******************************************************************************
 693              * Function Name: pwmFan2_ReadStatusRegister
 694              ********************************************************************************
 695              * 
 696              * Summary:
 697              *  This function returns the current state of the status register. 
 698              *
 699              * Parameters:  
 700              *  None
 701              *
 702              * Return: 
 703              *  uint8 : Current status register value. The status register bits are:
 704              *  [7:6] : Unused(0)
 705              *  [5]   : Kill event output
 706              *  [4]   : FIFO not empty
 707              *  [3]   : FIFO full
 708              *  [2]   : Terminal count
 709              *  [1]   : Compare output 2
 710              *  [0]   : Compare output 1
 711              *
 712              *******************************************************************************/
 713              uint8 pwmFan2_ReadStatusRegister(void)   
 714              {
 715   1              uint8 result;
 716   1              
 717   1              result = CY_GET_REG8(pwmFan2_STATUS_PTR);
 718   1              return (result);
 719   1          }
 720          
 721          #endif /* (pwmFan2_UseStatus || pwmFan2_UsingFixedFunction) */
 722          
 723          
 724          #if (pwmFan2_UseControl)
 725          
 726          
 727              /*******************************************************************************
 728              * Function Name: pwmFan2_ReadControlRegister
 729              ********************************************************************************
 730              * 
 731              * Summary:
 732              *  Returns the current state of the control register. This API is available 
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 13  

 733              *  only if the control register is not removed.
 734              *
 735              * Parameters:  
 736              *  None 
 737              *
 738              * Return: 
 739              *  uint8 : Current control register value
 740              *
 741              *******************************************************************************/    
 742              uint8 pwmFan2_ReadControlRegister(void) 
 743              {
 744   1              uint8 result;
 745   1              
 746   1              result = CY_GET_REG8(pwmFan2_CONTROL_PTR);
 747   1              return (result);
 748   1          }
 749          
 750          
 751              /*******************************************************************************
 752              * Function Name: pwmFan2_WriteControlRegister
 753              ********************************************************************************
 754              * 
 755              * Summary:
 756              *  Sets the bit field of the control register. This API is available only if 
 757              *  the control register is not removed.
 758              *
 759              * Parameters:  
 760              *  uint8 control: Control register bit field, The status register bits are:
 761              *  [7]   : PWM Enable
 762              *  [6]   : Reset
 763              *  [5:3] : Compare Mode2
 764              *  [2:0] : Compare Mode2
 765              *
 766              * Return: 
 767              *  None
 768              *
 769              *******************************************************************************/  
 770              void pwmFan2_WriteControlRegister(uint8 control) 
 771              {
 772   1              CY_SET_REG8(pwmFan2_CONTROL_PTR, control);
 773   1          }
 774                  
 775          #endif /* (pwmFan2_UseControl) */
 776          
 777          
 778          #if (!pwmFan2_UsingFixedFunction)
 779          
 780          
 781              /*******************************************************************************
 782              * Function Name: pwmFan2_ReadCapture
 783              ********************************************************************************
 784              * 
 785              * Summary:
 786              *  Reads the capture value from the capture FIFO.
 787              *
 788              * Parameters:  
 789              *  None
 790              *
 791              * Return: 
 792              *  uint8/uint16: The current capture value
 793              *
 794              *******************************************************************************/  
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 14  

 795              uint8 pwmFan2_ReadCapture(void)  
 796              {
 797   1              return (CY_GET_REG8(pwmFan2_CAPTURE_LSB_PTR));
 798   1          }
 799                  
 800          #endif /* (!pwmFan2_UsingFixedFunction) */
 801          
 802          
 803          #if (pwmFan2_UseOneCompareMode)
 804          
 805          
 806              /*******************************************************************************
 807              * Function Name: pwmFan2_ReadCompare
 808              ********************************************************************************
 809              * 
 810              * Summary:
 811              *  Reads the compare value for the compare output when the PWM Mode parameter is 
 812              *  set to Dither mode, Center Aligned mode, or One Output mode.
 813              *
 814              * Parameters:  
 815              *  None
 816              *
 817              * Return: 
 818              *  uint8/uint16: Current compare value
 819              *
 820              *******************************************************************************/  
 821              uint8 pwmFan2_ReadCompare(void)  
 822              {
 823   1                      #if(pwmFan2_UsingFixedFunction)
                          return ((uint8)CY_GET_REG16(pwmFan2_COMPARE1_LSB_PTR));
                      #else
 826   1                  return (CY_GET_REG8(pwmFan2_COMPARE1_LSB_PTR));
 827   1              #endif /* (pwmFan2_UsingFixedFunction) */
 828   1          }
 829          
 830          #else
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_ReadCompare1
                  ********************************************************************************
                  * 
                  * Summary:
                  *  Reads the compare value for the compare1 output.
                  *
                  * Parameters:  
                  *  None
                  *
                  * Return: 
                  *  uint8/uint16: Current compare value.
                  *
                  *******************************************************************************/  
                  uint8 pwmFan2_ReadCompare1(void) 
                  {
                              return (CY_GET_REG8(pwmFan2_COMPARE1_LSB_PTR));
                  }
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_ReadCompare2
                  ********************************************************************************
                  * 
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 15  

                  * Summary:
                  *  Reads the compare value for the compare2 output.
                  *
                  * Parameters:  
                  *  None
                  *
                  * Return: 
                  *  uint8/uint16: Current compare value.
                  *
                  *******************************************************************************/  
                  uint8 pwmFan2_ReadCompare2(void)  
                  {
                              return (CY_GET_REG8(pwmFan2_COMPARE2_LSB_PTR));
                  }
              
              #endif /* (pwmFan2_UseOneCompareMode) */
 873          
 874          
 875          /*******************************************************************************
 876          * Function Name: pwmFan2_ReadPeriod
 877          ********************************************************************************
 878          * 
 879          * Summary:
 880          *  Reads the period value used by the PWM hardware.
 881          *
 882          * Parameters:  
 883          *  None
 884          *
 885          * Return: 
 886          *  uint8/16: Period value
 887          *
 888          *******************************************************************************/ 
 889          uint8 pwmFan2_ReadPeriod(void) 
 890          {
 891   1              #if(pwmFan2_UsingFixedFunction)
                      return ((uint8)CY_GET_REG16(pwmFan2_PERIOD_LSB_PTR));
                  #else
 894   1              return (CY_GET_REG8(pwmFan2_PERIOD_LSB_PTR));
 895   1          #endif /* (pwmFan2_UsingFixedFunction) */
 896   1      }
 897          
 898          #if ( pwmFan2_KillModeMinTime)
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_WriteKillTime
                  ********************************************************************************
                  * 
                  * Summary:
                  *  Writes the kill time value used by the hardware when the Kill Mode 
                  *  is set to Minimum Time.
                  *
                  * Parameters:  
                  *  uint8: Minimum Time kill counts
                  *
                  * Return: 
                  *  None
                  *
                  *******************************************************************************/ 
                  void pwmFan2_WriteKillTime(uint8 killtime) 
                  {
                      CY_SET_REG8(pwmFan2_KILLMODEMINTIME_PTR, killtime);
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 16  

                  }
              
              
                  /*******************************************************************************
                  * Function Name: pwmFan2_ReadKillTime
                  ********************************************************************************
                  * 
                  * Summary:
                  *  Reads the kill time value used by the hardware when the Kill Mode is set 
                  *  to Minimum Time.
                  *
                  * Parameters:  
                  *  None
                  *
                  * Return: 
                  *  uint8: The current Minimum Time kill counts
                  *
                  *******************************************************************************/ 
                  uint8 pwmFan2_ReadKillTime(void) 
                  {
                      return (CY_GET_REG8(pwmFan2_KILLMODEMINTIME_PTR));
                  }
              
              #endif /* ( pwmFan2_KillModeMinTime) */
 943          
 944          /* [] END OF FILE */
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 17  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION pwmFan2_Start (BEGIN)
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0000 900000      R     MOV     DPTR,#pwmFan2_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0008 120000      R     LCALL   pwmFan2_Init
                                           ; SOURCE LINE # 56
000B 900000      R     MOV     DPTR,#pwmFan2_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0011         ?C0001:
                                           ; SOURCE LINE # 58
0011 120000      R     LCALL   pwmFan2_Enable
                                           ; SOURCE LINE # 60
0014 22                RET     
             ; FUNCTION pwmFan2_Start (END)

             ; FUNCTION pwmFan2_Init (BEGIN)
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 119
0000 906579            MOV     DPTR,#06579H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54C0              ANL     A,#0C0H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#ctrl
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
000E 900000      R     MOV     DPTR,#ctrl
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 4409              ORL     A,#09H
0016 FF                MOV     R7,A
0017 906579            MOV     DPTR,#06579H
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
001C 906499            MOV     DPTR,#06499H
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4401              ORL     A,#01H
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0027 7F64              MOV     R7,#064H
0029 120000      R     LCALL   _pwmFan2_WriteCounter
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 18  

                                           ; SOURCE LINE # 137
002C 7F64              MOV     R7,#064H
002E 120000      R     LCALL   _pwmFan2_WritePeriod
                                           ; SOURCE LINE # 140
0031 7F00              MOV     R7,#00H
0033 120000      R     LCALL   _pwmFan2_WriteCompare
                                           ; SOURCE LINE # 155
0036 7F00              MOV     R7,#00H
0038 120000      R     LCALL   _pwmFan2_SetInterruptMode
                                           ; SOURCE LINE # 168
003B 120000      E     LCALL   CyEnterCriticalSection
003E 900000      R     MOV     DPTR,#pwmFan2_interruptState
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
0043 906499            MOV     DPTR,#06499H
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 4410              ORL     A,#010H
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
004E 900000      R     MOV     DPTR,#pwmFan2_interruptState
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 177
0056 120000      R     LCALL   pwmFan2_ClearFIFO
                                           ; SOURCE LINE # 180
0059 22                RET     
             ; FUNCTION pwmFan2_Init (END)

             ; FUNCTION pwmFan2_Enable (BEGIN)
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 210
0000 906579            MOV     DPTR,#06579H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4480              ORL     A,#080H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
000B 22                RET     
             ; FUNCTION pwmFan2_Enable (END)

             ; FUNCTION pwmFan2_Stop (BEGIN)
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 237
0000 906579            MOV     DPTR,#06579H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 19  

                                           ; SOURCE LINE # 245
000B 22                RET     
             ; FUNCTION pwmFan2_Stop (END)

             ; FUNCTION _pwmFan2_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 405
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
0005 900000      R     MOV     DPTR,#counter
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906409            MOV     DPTR,#06409H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
000F 22                RET     
             ; FUNCTION _pwmFan2_WriteCounter (END)

             ; FUNCTION pwmFan2_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 432
0000 906419            MOV     DPTR,#06419H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 435
0005 906459            MOV     DPTR,#06459H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 436
000A         ?C0007:
000A 22                RET     
             ; FUNCTION pwmFan2_ReadCounter (END)

             ; FUNCTION pwmFan2_ClearFIFO (BEGIN)
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
0000         ?C0008:
                                           ; SOURCE LINE # 457
0000 120000      R     LCALL   pwmFan2_ReadStatusRegister
0003 EF                MOV     A,R7
0004 30E405            JNB     ACC.4,?C0010
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
0007 120000      R     LCALL   pwmFan2_ReadCapture
                                           ; SOURCE LINE # 460
000A 80F4              SJMP    ?C0008
                                           ; SOURCE LINE # 461
000C         ?C0010:
000C 22                RET     
             ; FUNCTION pwmFan2_ClearFIFO (END)

             ; FUNCTION _pwmFan2_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 484
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 489
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 20  

0005 900000      R     MOV     DPTR,#period
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906449            MOV     DPTR,#06449H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
000F 22                RET     
             ; FUNCTION _pwmFan2_WritePeriod (END)

             ; FUNCTION _pwmFan2_WriteCompare (BEGIN)
                                           ; SOURCE LINE # 518
0000 900000      R     MOV     DPTR,#compare
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 524
0005 900000      R     MOV     DPTR,#compare
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906429            MOV     DPTR,#06429H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
000F 22                RET     
             ; FUNCTION _pwmFan2_WriteCompare (END)

             ; FUNCTION _pwmFan2_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 686
0000 900000      R     MOV     DPTR,#interruptMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
0005 900000      R     MOV     DPTR,#interruptMode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906489            MOV     DPTR,#06489H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
000F 22                RET     
             ; FUNCTION _pwmFan2_SetInterruptMode (END)

             ; FUNCTION pwmFan2_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 717
0000 906469            MOV     DPTR,#06469H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#result
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
000A 900000      R     MOV     DPTR,#result
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
                                           ; SOURCE LINE # 719
000F         ?C0014:
000F 22                RET     
             ; FUNCTION pwmFan2_ReadStatusRegister (END)
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 21  


             ; FUNCTION pwmFan2_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 742
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 746
0000 906579            MOV     DPTR,#06579H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#result
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 747
000A 900000      R     MOV     DPTR,#result
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
                                           ; SOURCE LINE # 748
000F         ?C0015:
000F 22                RET     
             ; FUNCTION pwmFan2_ReadControlRegister (END)

             ; FUNCTION _pwmFan2_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 770
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906579            MOV     DPTR,#06579H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
000F 22                RET     
             ; FUNCTION _pwmFan2_WriteControlRegister (END)

             ; FUNCTION pwmFan2_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
0000 906459            MOV     DPTR,#06459H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 798
0005         ?C0017:
0005 22                RET     
             ; FUNCTION pwmFan2_ReadCapture (END)

             ; FUNCTION pwmFan2_ReadCompare (BEGIN)
                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 826
0000 906429            MOV     DPTR,#06429H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 828
0005         ?C0018:
0005 22                RET     
             ; FUNCTION pwmFan2_ReadCompare (END)

             ; FUNCTION pwmFan2_ReadPeriod (BEGIN)
C51 COMPILER V9.03   PWMFAN2                                                               07/19/2013 02:54:18 PAGE 22  

                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 894
0000 906449            MOV     DPTR,#06449H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 896
0005         ?C0019:
0005 22                RET     
             ; FUNCTION pwmFan2_ReadPeriod (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    289    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
