C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE RTCCLOCK
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\rtcClock.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.2\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\rtcClock.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBUG) 
                    -WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/rtcClock.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\rtcClock.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: rtcClock.c
   3          * Version 2.0
   4          *
   5          * Description:
   6          *  This file provides the source code to the API for the RTC Component.
   7          *
   8          ********************************************************************************
   9          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions,
  11          * disclaimers, and limitations in the end user license agreement accompanying
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          #include "rtcClock.h"
  16          #include "CyLib.h"
  17          
  18          /* Function Prototypes */
  19          static void  rtcClock_SetInitValues(void)     ;
  20          static uint8 rtcClock_DayOfWeek(uint8 dayOfMonth, uint8 month, uint16 year)
  21                                                                ;
  22          #if (1u == rtcClock_DST_FUNC_ENABLE)
  23              static void  rtcClock_DSTDateConversion(void) ;
  24          #endif /* 1u == rtcClock_DST_FUNC_ENABLE */
  25          
  26          
  27          /* Variables were not initialized */
  28          uint8 rtcClock_initVar = 0u;
  29          
  30          /* Time and date variables
  31          * Initial value are: Second = 0-59, Minute = 0-59, Hour = 0-23, DayOfWeek = 1-7,
  32          * DayOfMonth = 1-31, DayOfYear = 1-366, Month = 1-12, Year = 1900-2200.
  33          */
  34          rtcClock_TIME_DATE rtcClock_currentTimeDate = {0u, 0u, 0u, 1u, 1u, 1u, 1u, 1900u};
  35          
  36          /* Alarm time and date variables
  37          * Initial value are: Second = 0-59, Minute = 0-59, Hour = 0-23, DayOfWeek = 1-7,
  38          * DayOfMonth = 1-31, DayOfYear = 1-366, Month = 1-12, Year = 1900-2200.
  39          */
  40          rtcClock_TIME_DATE rtcClock_alarmCfgTimeDate = {0u, 0u, 0u, 1u, 1u, 1u, 1u, 1900u};
  41          
  42          #if (1u == rtcClock_DST_FUNC_ENABLE) /* DST enabled */
  43          
  44              /* Define DST format: '0' - fixed, '1' - relative */
  45              volatile uint8 rtcClock_dstModeType = 0u;
  46          
  47              /* Hour 0-23, DayOfWeek 1-7, Week 1-5, DayOfMonth 1-31, Month 1-12 */
  48              rtcClock_DSTIME rtcClock_dstTimeDateStart = {0u, 1u, 1u, 1u, 1u};
  49              rtcClock_DSTIME rtcClock_dstTimeDateStop = {0u, 1u, 1u, 1u, 1u};
  50          
  51              /* Number of Hours to add/dec to time */
  52              volatile uint8 rtcClock_dstOffsetMin = 0u;
  53              volatile uint8 rtcClock_dstStartStatus = 0u;
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 2   

  54              volatile uint8 rtcClock_dstStopStatus = 0u;
  55          
  56          #endif /* 1u == rtcClock_DST_FUNC_ENABLE*/
  57          
  58          /* Mask Registers */
  59          volatile uint8 rtcClock_alarmCfgMask = 0u;
  60          volatile uint8 rtcClock_alarmCurStatus = 0u;
  61          volatile uint8 rtcClock_intervalCfgMask = 0u;
  62          
  63          /* Status & Control Variables */
  64          volatile uint8 rtcClock_statusDateTime = 0u;
  65          
  66          /* Month Day Array - number of days in the months */
  67          const uint8 CYCODE rtcClock_daysInMonths[rtcClock_MONTHS_IN_YEAR] = {
  68              rtcClock_DAYS_IN_JANUARY,
  69              rtcClock_DAYS_IN_FEBRUARY,
  70              rtcClock_DAYS_IN_MARCH,
  71              rtcClock_DAYS_IN_APRIL,
  72              rtcClock_DAYS_IN_MAY,
  73              rtcClock_DAYS_IN_JUNE,
  74              rtcClock_DAYS_IN_JULY,
  75              rtcClock_DAYS_IN_AUGUST,
  76              rtcClock_DAYS_IN_SEPTEMBER,
  77              rtcClock_DAYS_IN_OCTOBER,
  78              rtcClock_DAYS_IN_NOVEMBER,
  79              rtcClock_DAYS_IN_DECEMBER};
  80          
  81          
  82          /*******************************************************************************
  83          * Function Name:   rtcClock_Start
  84          ********************************************************************************
  85          *
  86          * Summary:
  87          *  Enables RTC component: configures counter, setup interrupts, done all
  88          *  required calculation and starts counter.
  89          *
  90          * Parameters:
  91          *  None.
  92          *
  93          * Return:
  94          *  None.
  95          *
  96          * Global variables:
  97          *  rtcClock_initVar: global variable is used to indicate initial
  98          *  configuration of this component.  The variable is initialized to zero and set
  99          *  to 1 the first time rtcClock_Start() is called. This allows for
 100          *  component initialization without re-initialization in all subsequent calls
 101          *  to the rtcClock_Start() routine.
 102          *
 103          *  rtcClock_currentTimeDate, rtcClock_dstTimeDateStart,
 104          *  rtcClock_dstTimeDateStop, rtcClock_dstTimeDateStart,
 105          *  rtcClock_alarmCfgTimeDate, rtcClock_statusDateTime,
 106          *  rtcClock_dstStartStatus, rtcClock_dstStopStatus,
 107          *  rtcClock_alarmCurStatus: global variables are modified by the
 108          *  functions called from rtcClock_Init().
 109          *
 110          * Reentrant:
 111          *  No.
 112          *
 113          * Side Effects:
 114          *  Enables for the one pulse per second (for the RTC component) and
 115          *  Central Time Wheel (for the Sleep Timer component) signals to wake up device
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 3   

 116          *  from the low power (Sleep and Alternate Active) modes and leaves them
 117          *  enabled.
 118          *
 119          *  The Power Manager API has the higher priority on resource usage: it is NOT
 120          *  guaranteed that the Sleep Timer's configuration will be the same on exit
 121          *  from the Power Manager APIs as on the entry. To prevent this use the Sleep
 122          *  Timer's Sleep() - to save configuration and stop the component and Wakeup()
 123          *  function to restore configuration and enable the component.
 124          *
 125          *  The Sleep Timer and Real Time Clock (RTC) components could be configured as
 126          *  a wake up source from the low power modes only both at once.
 127          *
 128          *******************************************************************************/
 129          void rtcClock_Start(void) 
 130          {
 131   1          /* Execute once in normal flow */
 132   1          if(0u == rtcClock_initVar)
 133   1          {
 134   2              rtcClock_Init();
 135   2              rtcClock_initVar = 1u;
 136   2          }
 137   1      
 138   1          /* Enable component's operation */
 139   1          rtcClock_Enable();
 140   1      }
 141          
 142          
 143          /*******************************************************************************
 144          * Function Name: rtcClock_Stop
 145          ********************************************************************************
 146          *
 147          * Summary:
 148          *  Stops the RTC component.
 149          *
 150          * Parameters:
 151          *  None.
 152          *
 153          * Return:
 154          *  None.
 155          *
 156          * Side Effects:
 157          *  Leaves the one pulse per second (for the RTC component) and the Central Time
 158          *  Wheel (for the Sleep Timer component) signals to wake up device from the low
 159          *  power (Sleep and Alternate Active) modes enabled after Sleep Time component
 160          *  is stopped.
 161          *
 162          *******************************************************************************/
 163          void rtcClock_Stop(void) 
 164          {
 165   1          uint8 interruptState;
 166   1      
 167   1          /* Disable the interrupt. */
 168   1          CyIntDisable(rtcClock_ISR_NUMBER);
 169   1      
 170   1          /* Enter critical section */
 171   1          interruptState = CyEnterCriticalSection();
 172   1      
 173   1          /* Stop one pulse per second counter and interrupt */
 174   1          rtcClock_OPPS_CFG_REG &= (uint8)(~(rtcClock_OPPSIE_EN_MASK | rtcClock_OPPS_EN_MASK));
 175   1      
 176   1          /* Exit critical section */
 177   1          CyExitCriticalSection(interruptState);
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 4   

 178   1      }
 179          
 180          
 181          /*******************************************************************************
 182          * Function Name:   rtcClock_EnableInt
 183          ********************************************************************************
 184          *
 185          * Summary:
 186          *  Enables interrupts of RTC Component.
 187          *
 188          * Parameters:
 189          *  None.
 190          *
 191          * Return:
 192          *  None.
 193          *
 194          *******************************************************************************/
 195          void rtcClock_EnableInt(void) 
 196          {
 197   1          /* Enable the interrupt */
 198   1          CyIntEnable(rtcClock_ISR_NUMBER);
 199   1      }
 200          
 201          
 202          /*******************************************************************************
 203          * Function Name:   rtcClock_DisableInt
 204          ********************************************************************************
 205          *
 206          * Summary:
 207          *  Disables interrupts of RTC Component, time and date stop running.
 208          *
 209          * Parameters:
 210          *  None.
 211          *
 212          * Return:
 213          *  None.
 214          *
 215          *******************************************************************************/
 216          void rtcClock_DisableInt(void) 
 217          {
 218   1          /* Disable the interrupt. */
 219   1          CyIntDisable(rtcClock_ISR_NUMBER);
 220   1      }
 221          
 222          
 223          #if (1u == rtcClock_DST_FUNC_ENABLE)
 224              /*******************************************************************************
 225              * Function Name:   rtcClock_DSTDateConversion
 226              ********************************************************************************
 227              *
 228              * Summary:
 229              * Converts relative to absolute date.
 230              *
 231              * Parameters:
 232              *  None.
 233              *
 234              * Return:
 235              *  None.
 236              *
 237              * Global variables:
 238              *  rtcClock_dstTimeDateStart.Month,
 239              *  rtcClock_dstTimeDateStart.DayOfWeek,
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 5   

 240              *  rtcClock_dstTimeDateStart.Week,
 241              *  rtcClock_dstTimeDateStop.Month,
 242              *  rtcClock_dstTimeDateStop.DayOfWeek,
 243              *  rtcClock_dstTimeDateStop.Week,
 244              *  rtcClock_currentTimeDate.Year: these global variables are
 245              *  used to correct day of week.
 246              *
 247              *  rtcClock_dstTimeDateStart.DayOfMonth,
 248              *  rtcClock_dstTimeDateStop.DayOfMonth: these global variables are
 249              *  modified after convertion.
 250              *
 251              * Reentrant:
 252              *  No.
 253              *
 254              *******************************************************************************/
 255              static void rtcClock_DSTDateConversion(void) 
 256              {
 257   1              uint8 week = 1u;
 258   1              uint8 day = 1u;
 259   1              uint8 dayOfWeek;
 260   1      
 261   1              /* Get day of week */
 262   1              dayOfWeek = rtcClock_DayOfWeek(day, rtcClock_dstTimeDateStart.Month,
 263   1                                                          rtcClock_currentTimeDate.Year) + 1u;
 264   1      
 265   1              #if (0u != rtcClock_START_OF_WEEK)
                      /* Normalize day of week if Start of week is not Sunday */
                      if(dayOfWeek > rtcClock_START_OF_WEEK)
                      {
                          #if (6u != rtcClock_START_OF_WEEK)
                              /* Start of week is not Saturday  */
                              dayOfWeek -= rtcClock_START_OF_WEEK;
                          #else /* 6u == rtcClock_START_OF_WEEK */
                              /* Start of week is Saturday  */
                              dayOfWeek = 1u; /* Set day of week to Monday */
                          #endif /* 6u != rtcClock_START_OF_WEEK */
                      }
                      else
                      {
                          #if (1u != rtcClock_START_OF_WEEK)
                              /* Start of week is not Monday  */
                              dayOfWeek = (rtcClock_DAYS_IN_WEEK - rtcClock_START_OF_WEEK) - dayOfWeek;
                          #else /* 1u == rtcClock_START_OF_WEEK */
                              /* Start of week is Monday  */
                              dayOfWeek = 5u; /* Set day of week to Friday */
                          #endif /* 1u != rtcClock_START_OF_WEEK */
                      }
                      #endif /* 0u != rtcClock_START_OF_WEEK */
 288   1      
 289   1              /* Correct if out of DST range */
 290   1              while(dayOfWeek != rtcClock_dstTimeDateStart.DayOfWeek)
 291   1              {
 292   2                  day++;
 293   2                  dayOfWeek++;
 294   2                  if(dayOfWeek > rtcClock_WEEK_ELAPSED)
 295   2                  {
 296   3                      dayOfWeek = 1u;
 297   3                      week++;
 298   3                  }
 299   2              }
 300   1      
 301   1              while(week != rtcClock_dstTimeDateStart.Week)
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 6   

 302   1              {
 303   2                  day += rtcClock_DAYS_IN_WEEK;
 304   2                  week++;
 305   2              }
 306   1              rtcClock_dstTimeDateStart.DayOfMonth = day;
 307   1      
 308   1              /* Stop of DST time */
 309   1              week = 1u;
 310   1              day = 1u;
 311   1      
 312   1              dayOfWeek = rtcClock_DayOfWeek(day, rtcClock_dstTimeDateStop.Month,
 313   1                                                          rtcClock_currentTimeDate.Year) + 1u;
 314   1              #if (0u != rtcClock_START_OF_WEEK)
                      /* Normalize day of week if Start of week is not Sunday */
                      if(dayOfWeek > rtcClock_START_OF_WEEK)
                      {
                          #if (6u != rtcClock_START_OF_WEEK)
                              /* Start of week is not Saturday  */
                              dayOfWeek -= rtcClock_START_OF_WEEK;
                          #else /* 6u == rtcClock_START_OF_WEEK */
                              /* Start of week is Saturday  */
                              dayOfWeek = 1u; /* Set day of week to Monday */
                          #endif /* 6u != rtcClock_START_OF_WEEK */
                      }
                      else
                      {
                          #if (1u != rtcClock_START_OF_WEEK)
                              /* Start of week is not Monday  */
                              dayOfWeek = (rtcClock_DAYS_IN_WEEK - rtcClock_START_OF_WEEK) - dayOfWeek;
                          #else /* 1u == rtcClock_START_OF_WEEK */
                              /* Start of week is Monday  */
                              dayOfWeek = 5u; /* Set day of week to Friday */
                          #endif /* 1u != rtcClock_START_OF_WEEK */
                      }
                      #endif /* 0u != rtcClock_START_OF_WEEK */
 337   1      
 338   1              while(dayOfWeek != rtcClock_dstTimeDateStop.DayOfWeek)
 339   1              {
 340   2                  day++;
 341   2                  dayOfWeek++;
 342   2                  if(dayOfWeek > rtcClock_WEEK_ELAPSED)
 343   2                  {
 344   3                      dayOfWeek = 1u;
 345   3                      week++;
 346   3                  }
 347   2              }
 348   1      
 349   1              while(week != rtcClock_dstTimeDateStop.Week)
 350   1              {
 351   2                  day += rtcClock_DAYS_IN_WEEK;
 352   2                  week++;
 353   2              }
 354   1      
 355   1              rtcClock_dstTimeDateStop.DayOfMonth = day;
 356   1          }
 357          #endif /* 1u == rtcClock_DST_FUNC_ENABLE */
 358          
 359          
 360          /*******************************************************************************
 361          * Function Name:   rtcClock_Init
 362          ********************************************************************************
 363          *
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 7   

 364          * Summary:
 365          *  Calculates required date and flags, sets interrupt vector and priority.
 366          *
 367          * Parameters:
 368          *  None.
 369          *
 370          * Return:
 371          *  None.
 372          *
 373          * Global variables:
 374          *  rtcClock_currentTimeDate, rtcClock_dstTimeDateStart,
 375          *  rtcClock_dstTimeDateStop, rtcClock_dstTimeDateStart,
 376          *  rtcClock_alarmCfgTimeDate, rtcClock_statusDateTime,
 377          *  rtcClock_dstStartStatus, rtcClock_dstStartStatus,
 378          *  rtcClock_dstStopStatus, rtcClock_alarmCurStatus:
 379          *  global variables are used by the rtcClock_SetInitValues().
 380          *
 381          *  rtcClock_dstTimeDateStart, rtcClock_currentTimeDate:
 382          *  rtcClock_statusDateTime, rtcClock_dstStartStatus,
 383          *  rtcClock_dstStartStatus, rtcClock_dstStopStatus,
 384          *  rtcClock_alarmCurStatus: are modified by the
 385          *  rtcClock_SetInitValues() function.
 386          *
 387          * Reentrant:
 388          *  No.
 389          *
 390          *******************************************************************************/
 391          void rtcClock_Init(void) 
 392          {
 393   1          /* Start calculation of required date and flags */
 394   1          rtcClock_SetInitValues();
 395   1      
 396   1          /* Disable Interrupt. */
 397   1          CyIntDisable(rtcClock_ISR_NUMBER);
 398   1      
 399   1          /* Set the ISR to point to the RTC_SUT_isr Interrupt. */
 400   1          (void) CyIntSetVector(rtcClock_ISR_NUMBER, & rtcClock_ISR);
 401   1      
 402   1          /* Set the priority. */
 403   1          CyIntSetPriority(rtcClock_ISR_NUMBER, rtcClock_ISR_PRIORITY);
 404   1      }
 405          
 406          
 407          /*******************************************************************************
 408          * Function Name: rtcClock_Enable
 409          ********************************************************************************
 410          *
 411          * Summary:
 412          *  Enables the interrupts, one pulse per second and interrupt generation on OPPS
 413          *  event.
 414          *
 415          * Parameters:
 416          *  None.
 417          *
 418          * Return:
 419          *  None.
 420          *
 421          * Side Effects:
 422          *  Enables for the one pulse per second and central time wheel signals to wake
 423          *  up device from the low power (Sleep and Alternate Active) modes and leaves
 424          *  them enabled.
 425          *
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 8   

 426          *******************************************************************************/
 427          void rtcClock_Enable(void) 
 428          {
 429   1          uint8 interruptState;
 430   1      
 431   1          /* Enter critical section */
 432   1          interruptState = CyEnterCriticalSection();
 433   1      
 434   1          /* Enable one pulse per second event and interrupt */
 435   1          rtcClock_OPPS_CFG_REG |= (rtcClock_OPPS_EN_MASK | rtcClock_OPPSIE_EN_MASK);
 436   1      
 437   1          /* Exit critical section */
 438   1          CyExitCriticalSection(interruptState);
 439   1      
 440   1          /* Enable interrupt */
 441   1          CyIntEnable(rtcClock_ISR_NUMBER);
 442   1      }
 443          
 444          
 445          /*******************************************************************************
 446          * Function Name:   rtcClock_ReadTime
 447          ********************************************************************************
 448          *
 449          * Summary:
 450          *  Returns a pointer to the current time and date structure.
 451          *
 452          * Parameters:
 453          *  None.
 454          *
 455          * Return:
 456          *  rtcClock_currentTimeDate: pointer to the global structure with the
 457          *  current date and time values.
 458          *
 459          * Global variables:
 460          *  rtcClock_currentTimeDate: global variable with current date and
 461          *   time is used.
 462          *
 463          * Side Effects:
 464          *  You should disable the interrupt for the RTC component before calling any
 465          *  read API to avoid an RTC Counter increment in the middle of a time or date
 466          *  read operation. Re-enable the interrupts after the data is read.
 467          *
 468          *******************************************************************************/
 469          rtcClock_TIME_DATE * rtcClock_ReadTime(void) 
 470          {
 471   1          /* Returns a pointer to the current time and date structure */
 472   1          return (&rtcClock_currentTimeDate);
 473   1      }
 474          
 475          
 476          /*******************************************************************************
 477          * Function Name:   rtcClock_WriteTime
 478          ********************************************************************************
 479          *
 480          * Summary:
 481          *  Writes time and date values as current time and date. Only
 482          *  passes Milliseconds(optionally), Seconds, Minutes, Hours, Month,
 483          *  Day Of Month and Year.
 484          *
 485          * Parameters:
 486          *  timeDate: Pointer to rtcClock_TIME_DATE global structure where new
 487          *  values of time and date are stored.
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 9   

 488          *
 489          * Return:
 490          *  None.
 491          *
 492          * Global variables:
 493          *  rtcClock_currentTimeDate: global structure is modified with the new
 494          *  values of current date and time.
 495          *
 496          * Reentrant:
 497          *  No.
 498          *
 499          *******************************************************************************/
 500          void rtcClock_WriteTime(const rtcClock_TIME_DATE * timeDate)
 501               
 502          {
 503   1          /* Disable Interrupt of RTC Component */
 504   1          rtcClock_DisableInt();
 505   1      
 506   1          /* Write current time and date */
 507   1          rtcClock_currentTimeDate.Sec = timeDate->Sec;
 508   1          rtcClock_currentTimeDate.Min = timeDate->Min;
 509   1          rtcClock_currentTimeDate.Hour = timeDate->Hour;
 510   1          rtcClock_currentTimeDate.DayOfMonth = timeDate->DayOfMonth;
 511   1          rtcClock_currentTimeDate.Month = timeDate->Month;
 512   1          rtcClock_currentTimeDate.Year = timeDate->Year;
 513   1      
 514   1          /* Enable Interrupt of RTC Component */
 515   1          rtcClock_EnableInt();
 516   1      }
 517          
 518          
 519          /*******************************************************************************
 520          * Function Name:   rtcClock_WriteSecond
 521          ********************************************************************************
 522          *
 523          * Summary:
 524          *  Writes Sec software register value.
 525          *
 526          * Parameters:
 527          *  second: Seconds value.
 528          *
 529          * Return:
 530          *  None.
 531          *
 532          * Global variables:
 533          *  rtcClock_currentTimeDate.Sec: global structure's field where current
 534          *  second's value is modified.
 535          *
 536          * Reentrant:
 537          *  No.
 538          *
 539          *******************************************************************************/
 540          void rtcClock_WriteSecond(uint8 second) 
 541          {
 542   1          /* Save seconds to the current time and date structure */
 543   1          rtcClock_currentTimeDate.Sec = second;
 544   1      }
 545          
 546          
 547          /*******************************************************************************
 548          * Function Name:   rtcClock_WriteMinute
 549          ********************************************************************************
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 10  

 550          *
 551          * Summary:
 552          *  Writes Minute value in minutes counter register.
 553          *
 554          * Parameters:
 555          *  minute: Minutes value.
 556          *
 557          * Return:
 558          *  None.
 559          *
 560          * Global variables:
 561          *  rtcClock_currentTimeDate.Min: global structure's field where
 562          *  current minute's value is modified.
 563          *
 564          * Reentrant:
 565          *  No.
 566          *
 567          *******************************************************************************/
 568          void rtcClock_WriteMinute(uint8 minute) 
 569          {
 570   1          /* Save minutes to the current time and date structure */
 571   1          rtcClock_currentTimeDate.Min = minute;
 572   1      }
 573          
 574          
 575          /*******************************************************************************
 576          * Function Name:   rtcClock_WriteHour
 577          ********************************************************************************
 578          *
 579          * Summary:
 580          *  Writes Hour software register value.
 581          *
 582          * Parameters:
 583          *  hour: Hours value.
 584          *
 585          * Return:
 586          *  None.
 587          *
 588          * Global variables:
 589          *  rtcClock_currentTimeDate.Hour: global structure's field where
 590          *  current hour's value is modified.
 591          *
 592          * Reentrant:
 593          *  No.
 594          *
 595          *******************************************************************************/
 596          void rtcClock_WriteHour(uint8 hour) 
 597          {
 598   1          /* Save hours to the current time and date structure */
 599   1          rtcClock_currentTimeDate.Hour = hour;
 600   1      }
 601          
 602          
 603          /*******************************************************************************
 604          * Function Name:   rtcClock_WriteDayOfMonth
 605          ********************************************************************************
 606          *
 607          * Summary:
 608          *  Writes DayOfMonth software register value.
 609          *
 610          * Parameters:
 611          *  dayOfMonth: Day Of Month value.
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 11  

 612          *
 613          * Return:
 614          *  None.
 615          *
 616          * Global variables:
 617          *  rtcClock_currentTimeDate.DayOfMonth: global structure's field where
 618          *  current day of month's value is modified.
 619          *
 620          * Reentrant:
 621          *  No.
 622          *
 623          *******************************************************************************/
 624          void rtcClock_WriteDayOfMonth(uint8 dayOfMonth) 
 625          {
 626   1          /* Save day of month to the current time and date structure */
 627   1          rtcClock_currentTimeDate.DayOfMonth = dayOfMonth;
 628   1      }
 629          
 630          
 631          /*******************************************************************************
 632          * Function Name:   rtcClock_WriteMonth
 633          ********************************************************************************
 634          *
 635          * Summary:
 636          *  Writes Month software register value.
 637          *
 638          * Parameters:
 639          *  month: Month value.
 640          *
 641          * Return:
 642          *  None.
 643          *
 644          * Global variables:
 645          *  rtcClock_currentTimeDate.Month: global structure's field where
 646          *  current day of month's value is modified.
 647          *
 648          * Reentrant:
 649          *  No.
 650          *
 651          *******************************************************************************/
 652          void rtcClock_WriteMonth(uint8 month) 
 653          {
 654   1          /* Save months to the current time and date structure */
 655   1          rtcClock_currentTimeDate.Month = month;
 656   1      }
 657          
 658          
 659          /*******************************************************************************
 660          * Function Name:   rtcClock_WriteYear
 661          ********************************************************************************
 662          *
 663          * Summary:
 664          *  Writes Year software register value.
 665          *
 666          * Parameters:
 667          *  year: Years value.
 668          *
 669          * Return:
 670          *  None.
 671          *
 672          * Global variables:
 673          *  rtcClock_currentTimeDate.Year: global structure's field where
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 12  

 674          *  current year's value is modified.
 675          *
 676          * Reentrant:
 677          *  No.
 678          *
 679          *******************************************************************************/
 680          void rtcClock_WriteYear(uint16 year) 
 681          {
 682   1          /* Save years to the current time and date structure */
 683   1          rtcClock_currentTimeDate.Year = year;
 684   1      }
 685          
 686          
 687          /*******************************************************************************
 688          * Function Name:   rtcClock_WriteAlarmSecond
 689          ********************************************************************************
 690          *
 691          * Summary:
 692          *  Writes Alarm Sec software register value.
 693          *
 694          * Parameters:
 695          *  second: Alarm Seconds value.
 696          *
 697          * Return:
 698          *  None.
 699          *
 700          * Global variables:
 701          *  rtcClock_currentTimeDate.Sec: this global variable is used for
 702          *  comparison while setting and clearing seconds alarm status variable.
 703          *
 704          *  rtcClock_alarmCfgTimeDate.Sec: this global variable is modified to
 705          *  store of the new seconds alarm.
 706          *
 707          *  rtcClock_alarmCurStatus: this global variable could be changed if
 708          *  second's alarm will be raised.
 709          *
 710          * Reentrant:
 711          *  No.
 712          *
 713          *******************************************************************************/
 714          void rtcClock_WriteAlarmSecond(uint8 second) 
 715          {
 716   1          rtcClock_alarmCfgTimeDate.Sec = second;
 717   1      
 718   1          /* Check second alarm */
 719   1          if(rtcClock_alarmCfgTimeDate.Sec == rtcClock_currentTimeDate.Sec)
 720   1          {
 721   2              /* Set second alarm */
 722   2              rtcClock_alarmCurStatus |= rtcClock_ALARM_SEC_MASK;
 723   2          }
 724   1          else /* no second alarm */
 725   1          {
 726   2              /* Clear second alarm */
 727   2              rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_SEC_MASK);
 728   2          }
 729   1      }
 730          
 731          
 732          /*******************************************************************************
 733          * Function Name:   rtcClock_WriteAlarmMinute
 734          ********************************************************************************
 735          *
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 13  

 736          * Summary:
 737          *  Writes Alarm Min software register value.
 738          *
 739          * Parameters:
 740          *  minute: Alarm minutes value.
 741          *
 742          * Return:
 743          *  None.
 744          *
 745          * Global variables:
 746          *  rtcClock_currentTimeDate.Min: this global variable is used for
 747          *  comparison while setting and clearing minutes alarm status variable.
 748          *
 749          *  rtcClock_alarmCfgTimeDate.Min: this global variable is modified to
 750          *  store of the new minutes alarm.
 751          *
 752          *  rtcClock_alarmCurStatus: this global variable could be changed if
 753          *  minute's alarm will be raised.
 754          *
 755          * Reentrant:
 756          *  No.
 757          *
 758          *******************************************************************************/
 759          void rtcClock_WriteAlarmMinute(uint8 minute) 
 760          {
 761   1          rtcClock_alarmCfgTimeDate.Min = minute;
 762   1      
 763   1          /* Check minute alarm */
 764   1          if(rtcClock_alarmCfgTimeDate.Min == rtcClock_currentTimeDate.Min)
 765   1          {
 766   2              /* Set minute alarm */
 767   2              rtcClock_alarmCurStatus |= rtcClock_ALARM_MIN_MASK;
 768   2          }
 769   1          else /* no minute alarm */
 770   1          {
 771   2              /* Clear minute alarm */
 772   2              rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_MIN_MASK);
 773   2          }
 774   1      }
 775          
 776          
 777          /*******************************************************************************
 778          * Function Name:   rtcClock_WriteAlarmHour
 779          ********************************************************************************
 780          *
 781          * Summary:
 782          *  Writes Alarm Hour software register value.
 783          *
 784          * Parameters:
 785          *  hour: Alarm hours value.
 786          *
 787          * Return:
 788          *  None.
 789          *
 790          * Global variables:
 791          *  rtcClock_currentTimeDate.Hour: this global variable is used for
 792          *  comparison while setting and clearing hours alarm status variable.
 793          *
 794          *  rtcClock_alarmCfgTimeDate.Hour: this global variable is modified to
 795          *  store of the new hours alarm.
 796          *
 797          *  rtcClock_alarmCurStatus: this global variable could be changed if
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 14  

 798          *  hours alarm will be raised.
 799          *
 800          * Reentrant:
 801          *  No.
 802          *
 803          *******************************************************************************/
 804          void rtcClock_WriteAlarmHour(uint8 hour) 
 805          {
 806   1          rtcClock_alarmCfgTimeDate.Hour = hour;
 807   1      
 808   1          /* Check hour alarm */
 809   1          if(rtcClock_alarmCfgTimeDate.Hour == rtcClock_currentTimeDate.Hour)
 810   1          {
 811   2              /* Set hour alarm */
 812   2              rtcClock_alarmCurStatus |= rtcClock_ALARM_HOUR_MASK;
 813   2          }
 814   1          else /* no hour alarm */
 815   1          {
 816   2              /* Clear hour alarm */
 817   2              rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_HOUR_MASK);
 818   2          }
 819   1      }
 820          
 821          
 822          /*******************************************************************************
 823          * Function Name:   rtcClock_WriteAlarmDayOfMonth
 824          ********************************************************************************
 825          *
 826          * Summary:
 827          *  Writes Alarm DayOfMonth software register value.
 828          *
 829          * Parameters:
 830          *  dayOfMonth: Alarm day of month value.
 831          *
 832          * Return:
 833          *  None.
 834          *
 835          * Global variables:
 836          *  rtcClock_currentTimeDate.DayOfMonth: this global variable is used for
 837          *  comparison while setting and clearing day of month alarm status variable.
 838          *
 839          *  rtcClock_alarmCfgTimeDate.DayOfMonth: this global variable is
 840          *  modified to store of the new day of month alarm.
 841          *
 842          *  rtcClock_alarmCurStatus: this global variable could be changed if
 843          *  day of month alarm will be raised.
 844          *
 845          * Reentrant:
 846          *  No.
 847          *
 848          *******************************************************************************/
 849          void rtcClock_WriteAlarmDayOfMonth(uint8 dayOfMonth) 
 850          {
 851   1          rtcClock_alarmCfgTimeDate.DayOfMonth = dayOfMonth;
 852   1      
 853   1          /* Check day of month alarm */
 854   1          if(rtcClock_alarmCfgTimeDate.DayOfMonth == rtcClock_currentTimeDate.DayOfMonth)
 855   1          {
 856   2              /* Set day of month alarm */
 857   2              rtcClock_alarmCurStatus |= rtcClock_ALARM_DAYOFMONTH_MASK;
 858   2          }
 859   1          else /* no day of month alarm */
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 15  

 860   1          {
 861   2              /* Clear day of month alarm */
 862   2              rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_DAYOFMONTH_MASK);
 863   2          }
 864   1      }
 865          
 866          
 867          /*******************************************************************************
 868          * Function Name:   rtcClock_WriteAlarmMonth
 869          ********************************************************************************
 870          *
 871          * Summary:
 872          *  Writes Alarm Month software register value.
 873          *
 874          * Parameters:
 875          *  month: Alarm month value.
 876          *
 877          * Return:
 878          *  None.
 879          *
 880          * Global variables:
 881          *  rtcClock_currentTimeDate.Month: this global variable is used for
 882          *  comparison while setting and clearing month alarm status variable.
 883          *
 884          *  rtcClock_alarmCfgTimeDate.Month: this global variable is modified
 885          *  to store of the new month alarm.
 886          *
 887          *  rtcClock_alarmCurStatus: this global variable could be changed if
 888          *  month alarm will be raised.
 889          *
 890          * Reentrant:
 891          *  No.
 892          *
 893          *******************************************************************************/
 894          void rtcClock_WriteAlarmMonth(uint8 month) 
 895          {
 896   1          rtcClock_alarmCfgTimeDate.Month = month;
 897   1      
 898   1          /* Check month alarm */
 899   1          if(rtcClock_alarmCfgTimeDate.Month == rtcClock_currentTimeDate.Month)
 900   1          {
 901   2              /* Set month alarm */
 902   2              rtcClock_alarmCurStatus |= rtcClock_ALARM_MONTH_MASK;
 903   2          }
 904   1          else /* no month alarm */
 905   1          {
 906   2              /* Clear month alarm */
 907   2              rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_MONTH_MASK);
 908   2          }
 909   1      }
 910          
 911          
 912          /*******************************************************************************
 913          * Function Name:   rtcClock_WriteAlarmYear
 914          ********************************************************************************
 915          *
 916          * Summary:
 917          *  Writes Alarm Year software register value.
 918          *
 919          * Parameters:
 920          *  year: Alarm year value.
 921          *
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 16  

 922          * Return:
 923          *  None.
 924          *
 925          * Global variables:
 926          *  rtcClock_currentTimeDate.Year: this global variable is used for
 927          *  comparison while setting and clearing year alarm status variable.
 928          *
 929          *  rtcClock_alarmCfgTimeDate.Year: this global variable is modified
 930          *  to store of the new year alarm.
 931          *
 932          *  rtcClock_alarmCurStatus: this global variable could be changed if
 933          *  year alarm will be raised.
 934          *
 935          * Reentrant:
 936          *  No.
 937          *
 938          *******************************************************************************/
 939          void rtcClock_WriteAlarmYear(uint16 year) 
 940          {
 941   1         rtcClock_alarmCfgTimeDate.Year = year;
 942   1      
 943   1          /* Check year alarm */
 944   1          if(rtcClock_alarmCfgTimeDate.Year == rtcClock_currentTimeDate.Year)
 945   1          {
 946   2              /* Set year alarm */
 947   2              rtcClock_alarmCurStatus |= rtcClock_ALARM_YEAR_MASK;
 948   2          }
 949   1          else /* no year alarm */
 950   1          {
 951   2              /* Set year alarm */
 952   2              rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_YEAR_MASK);
 953   2          }
 954   1      }
 955          
 956          
 957          /*******************************************************************************
 958          * Function Name:   rtcClock_WriteAlarmDayOfWeek
 959          ********************************************************************************
 960          *
 961          * Summary:
 962          *   Writes Alarm DayOfWeek software register value.
 963          *   Days values {Sun = 1, Mon = 2, Tue = 3, Wen = 4, Thu = 5, Fri = 6, Sat = 7}
 964          *
 965          * Parameters:
 966          *  dayOfWeek: Alarm day of week value.
 967          *
 968          * Return:
 969          *  None.
 970          *
 971          * Global variables:
 972          *  rtcClock_currentTimeDate.DayOfWeek: this global variable is used for
 973          *  comparison while setting and clearing day of week alarm status variable.
 974          *
 975          *  rtcClock_alarmCfgTimeDate.DayOfWeek: this global variable is modified
 976          *  to store of the new day of week alarm.
 977          *
 978          *  rtcClock_alarmCurStatus: this global variable could be changed if
 979          *  day of week alarm will be raised.
 980          *
 981          * Reentrant:
 982          *  No.
 983          *
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 17  

 984          *******************************************************************************/
 985          void rtcClock_WriteAlarmDayOfWeek(uint8 dayOfWeek) 
 986          {
 987   1          rtcClock_alarmCfgTimeDate.DayOfWeek = dayOfWeek;
 988   1      
 989   1          /* Check day of week alarm */
 990   1          if(rtcClock_alarmCfgTimeDate.DayOfWeek == rtcClock_currentTimeDate.DayOfWeek)
 991   1          {
 992   2              /* Set day of week alarm */
 993   2              rtcClock_alarmCurStatus |= rtcClock_ALARM_DAYOFWEEK_MASK;
 994   2          }
 995   1          else /* no day of week alarm */
 996   1          {
 997   2              /* Set day of week alarm */
 998   2              rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_DAYOFWEEK_MASK);
 999   2          }
1000   1      }
1001          
1002          
1003          /*******************************************************************************
1004          * Function Name:   rtcClock_WriteAlarmDayOfYear
1005          ********************************************************************************
1006          *
1007          * Summary:
1008          *  Writes Alarm DayOfYear software register value.
1009          *
1010          * Parameters:
1011          *  dayOfYear: Alarm day of year value.
1012          *
1013          * Return:
1014          *  None.
1015          *
1016          * Global variables:
1017          *  rtcClock_currentTimeDate.DayOfYear: this global variable is used for
1018          *  comparison while setting and clearing day of year alarm status variable.
1019          *
1020          *  rtcClock_alarmCfgTimeDate.DayOfYear: this global variable is modified
1021          *  to store of the new day of year alarm.
1022          *
1023          *  rtcClock_alarmCurStatus: this global variable could be changed if
1024          *  day of year alarm will be raised.
1025          *
1026          * Reentrant:
1027          *  No.
1028          *
1029          *******************************************************************************/
1030          void rtcClock_WriteAlarmDayOfYear(uint16 dayOfYear) 
1031          {
1032   1        rtcClock_alarmCfgTimeDate.DayOfYear = dayOfYear;
1033   1      
1034   1          /* Check day of year alarm */
1035   1          if(rtcClock_alarmCfgTimeDate.DayOfYear == rtcClock_currentTimeDate.DayOfYear)
1036   1          {
1037   2              /* Set day of year alarm */
1038   2              rtcClock_alarmCurStatus |= rtcClock_ALARM_DAYOFYEAR_MASK;
1039   2          }
1040   1          else /* no day of year alarm */
1041   1          {
1042   2              /* Set day of year alarm */
1043   2              rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_DAYOFYEAR_MASK);
1044   2          }
1045   1      }
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 18  

1046          
1047          
1048          /*******************************************************************************
1049          * Function Name:   rtcClock_ReadSecond
1050          ********************************************************************************
1051          *
1052          * Summary:
1053          *  Reads Sec software register value.
1054          *
1055          * Parameters:
1056          *  None.
1057          *
1058          * Return:
1059          *  Current seconds value.
1060          *
1061          * Global variables:
1062          *  rtcClock_currentTimeDate.Sec: the current second's value is used.
1063          *
1064          *******************************************************************************/
1065          uint8 rtcClock_ReadSecond(void) 
1066          {
1067   1          /* Return current second */
1068   1          return (rtcClock_currentTimeDate.Sec);
1069   1      }
1070          
1071          
1072          /*******************************************************************************
1073          * Function Name:   rtcClock_ReadMinute
1074          ********************************************************************************
1075          *
1076          * Summary:
1077          *  Reads Min software register value.
1078          *
1079          * Parameters:
1080          *  None.
1081          *
1082          * Return:
1083          *  Current field's value is returned.
1084          *
1085          * Global variables:
1086          *  rtcClock_currentTimeDate.Min: the current field's value is used.
1087          *
1088          *******************************************************************************/
1089          uint8 rtcClock_ReadMinute(void) 
1090          {
1091   1          /* Return current minute */
1092   1          return (rtcClock_currentTimeDate.Min);
1093   1      }
1094          
1095          
1096          /*******************************************************************************
1097          * Function Name:   rtcClock_ReadHour
1098          ********************************************************************************
1099          *
1100          * Summary:
1101          *  Reads Hour software register value.
1102          *
1103          * Parameters:
1104          *  None.
1105          *
1106          * Return:
1107          *  Current hour's value.
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 19  

1108          *
1109          * Global variables:
1110          *  rtcClock_currentTimeDate.Hour: the current field's value is used.
1111          *
1112          *******************************************************************************/
1113          uint8 rtcClock_ReadHour(void) 
1114          {
1115   1          /* Return current hour */
1116   1          return (rtcClock_currentTimeDate.Hour);
1117   1      }
1118          
1119          
1120          /*******************************************************************************
1121          * Function Name:   rtcClock_ReadDayOfMonth
1122          ********************************************************************************
1123          *
1124          * Summary:
1125          *  Reads DayOfMonth software register value.
1126          *
1127          * Parameters:
1128          *  None.
1129          *
1130          * Return:
1131          *  Current value of the day of month.
1132          *  returned.
1133          *
1134          * Global variables:
1135          *  rtcClock_currentTimeDate.DayOfMonth: the current day of month's
1136          *  value is used.
1137          *
1138          *******************************************************************************/
1139          uint8 rtcClock_ReadDayOfMonth(void) 
1140          {
1141   1          /* Return current day of the month */
1142   1          return (rtcClock_currentTimeDate.DayOfMonth);
1143   1      }
1144          
1145          
1146          /*******************************************************************************
1147          * Function Name:   rtcClock_ReadMonth
1148          ********************************************************************************
1149          *
1150          * Summary:
1151          *  Reads Month software register value.
1152          *
1153          * Parameters:
1154          *  None.
1155          *
1156          * Return:
1157          *  Current value of the month.
1158          *
1159          * Global variables:
1160          *  rtcClock_currentTimeDate.Month: the current month's value is used.
1161          *
1162          *******************************************************************************/
1163          uint8 rtcClock_ReadMonth(void) 
1164          {
1165   1          /* Return current month */
1166   1          return (rtcClock_currentTimeDate.Month);
1167   1      }
1168          
1169          
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 20  

1170          /*******************************************************************************
1171          * Function Name:   rtcClock_ReadYear
1172          ********************************************************************************
1173          *
1174          * Summary:
1175          *  Reads Year software register value.
1176          *
1177          * Parameters:
1178          *  None.
1179          *
1180          * Return:
1181          *  Current value of the year.
1182          *
1183          * Global variables:
1184          *  rtcClock_currentTimeDate.Year: the current year's value is used.
1185          *
1186          *******************************************************************************/
1187          uint16 rtcClock_ReadYear(void) 
1188          {
1189   1          /* Return current year */
1190   1          return (rtcClock_currentTimeDate.Year);
1191   1      }
1192          
1193          
1194          /*******************************************************************************
1195          * Function Name:   rtcClock_ReadAlarmSecond
1196          ********************************************************************************
1197          *
1198          * Summary:
1199          *  Reads Alarm Sec software register value.
1200          *
1201          * Parameters:
1202          *  None.
1203          *
1204          * Return:
1205          *  Current alarm value of the seconds.
1206          *
1207          * Global variables:
1208          *  rtcClock_alarmCfgTimeDate.Sec: the current second alarm value is
1209          *  used.
1210          *
1211          ********************************************************************************/
1212          uint8 rtcClock_ReadAlarmSecond(void) 
1213          {
1214   1          /* Return current alarm second */
1215   1          return (rtcClock_alarmCfgTimeDate.Sec);
1216   1      }
1217          
1218          
1219          /*******************************************************************************
1220          * Function Name:   rtcClock_ReadAlarmMinute
1221          ********************************************************************************
1222          *
1223          * Summary:
1224          *  Reads Alarm Min software register value.
1225          *
1226          * Parameters:
1227          *  None.
1228          *
1229          * Return:
1230          *  Current alarm value of the minutes.
1231          *
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 21  

1232          * Global variables:
1233          *  rtcClock_alarmCfgTimeDate.Min: the current minute alarm is used.
1234          *
1235          *******************************************************************************/
1236          uint8 rtcClock_ReadAlarmMinute(void) 
1237          {
1238   1          /* Return current alarm minute */
1239   1          return (rtcClock_alarmCfgTimeDate.Min);
1240   1      }
1241          
1242          
1243          /*******************************************************************************
1244          * Function Name:   rtcClock_ReadAlarmHour
1245          ********************************************************************************
1246          *
1247          * Summary:
1248          *  Reads Alarm Hour software register value.
1249          *
1250          * Parameters:
1251          *  None.
1252          *
1253          * Return:
1254          *  Current alarm value of the hours.
1255          *
1256          * Global variables:
1257          *  rtcClock_alarmCfgTimeDate.Hour: the current hour alarm value is used.
1258          *
1259          *******************************************************************************/
1260          uint8 rtcClock_ReadAlarmHour(void) 
1261          {
1262   1          /* Return current alarm hour */
1263   1          return (rtcClock_alarmCfgTimeDate.Hour);
1264   1      }
1265          
1266          
1267          /*******************************************************************************
1268          * Function Name:   rtcClock_ReadAlarmDayOfMonth
1269          ********************************************************************************
1270          *
1271          * Summary:
1272          *  Reads Alarm DayOfMonth software register value.
1273          *
1274          * Parameters:
1275          *  None.
1276          *
1277          * Return:
1278          *  Current alarm value of the day of month.
1279          *
1280          * Global variables:
1281          *  rtcClock_alarmCfgTimeDate.DayOfMonth: the current day of month alarm
1282          *  value is used.
1283          *
1284          *******************************************************************************/
1285          uint8 rtcClock_ReadAlarmDayOfMonth(void) 
1286          {
1287   1          /* Return current alarm day of month */
1288   1          return (rtcClock_alarmCfgTimeDate.DayOfMonth);
1289   1      }
1290          
1291          
1292          /*******************************************************************************
1293          * Function Name:   rtcClock_ReadAlarmMonth
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 22  

1294          ********************************************************************************
1295          *
1296          * Summary:
1297          *  Reads Alarm Month software register value.
1298          *
1299          * Parameters:
1300          *  None.
1301          *
1302          * Return:
1303          *  Current alarm value of the month.
1304          *
1305          * Global variables:
1306          *  rtcClock_alarmCfgTimeDate.Month: the current month alarm value is
1307          *  used.
1308          *
1309          *******************************************************************************/
1310          uint8 rtcClock_ReadAlarmMonth(void) 
1311          {
1312   1          /* Return current alarm month */
1313   1          return (rtcClock_alarmCfgTimeDate.Month);
1314   1      }
1315          
1316          
1317          /*******************************************************************************
1318          * Function Name:   rtcClock_ReadAlarmYear
1319          ********************************************************************************
1320          *
1321          * Summary:
1322          *  Reads Alarm Year software register value.
1323          *
1324          * Parameters:
1325          *  None.
1326          *
1327          * Return:
1328          *  Current alarm value of the years.
1329          *
1330          * Global variables:
1331          *  rtcClock_alarmCfgTimeDate.Year: the current year alarm value is used.
1332          *
1333          *******************************************************************************/
1334          uint16 rtcClock_ReadAlarmYear(void) 
1335          {
1336   1          /* Return current alarm year */
1337   1          return (rtcClock_alarmCfgTimeDate.Year);
1338   1      }
1339          
1340          
1341          /*******************************************************************************
1342          * Function Name:   rtcClock_ReadAlarmDayOfWeek
1343          ********************************************************************************
1344          *
1345          * Summary:
1346          *  Reads Alarm DayOfWeek software register value.
1347          *
1348          * Parameters:
1349          *  None.
1350          *
1351          * Return:
1352          *  Current alarm value of the day of week.
1353          *
1354          * Global variables:
1355          *  rtcClock_alarmCfgTimeDate.DayOfWeek: the current day of week alarm
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 23  

1356          *  value is used.
1357          *
1358          *******************************************************************************/
1359          uint8 rtcClock_ReadAlarmDayOfWeek(void) 
1360          {
1361   1          /* Return current alarm day of the week */
1362   1          return (rtcClock_alarmCfgTimeDate.DayOfWeek);
1363   1      }
1364          
1365          
1366          /*******************************************************************************
1367          * Function Name:   rtcClock_ReadAlarmDayOfYear
1368          ********************************************************************************
1369          *
1370          * Summary:
1371          *  Reads Alarm DayOfYear software register value.
1372          *
1373          * Parameters:
1374          *  None.
1375          *
1376          * Return:
1377          *  Current alarm value of the day of year.
1378          *
1379          * Global variables:
1380          *  rtcClock_alarmCfgTimeDate.DayOfYear: the current day of year alarm
1381          *  value is used.
1382          *
1383          *******************************************************************************/
1384          uint16 rtcClock_ReadAlarmDayOfYear(void) 
1385          {
1386   1          /* Return current alarm day of the year */
1387   1          return  (rtcClock_alarmCfgTimeDate.DayOfYear);
1388   1      }
1389          
1390          
1391          /*******************************************************************************
1392          * Function Name:   rtcClock_WriteAlarmMask
1393          ********************************************************************************
1394          *
1395          * Summary:
1396          *  Writes the Alarm Mask software register with 1 bit per time/date entry. Alarm
1397          *  true when all masked time/date values match Alarm values.
1398          *
1399          * Parameters:
1400          *  mask: Alarm Mask software register value.
1401          *
1402          * Return:
1403          *  None.
1404          *
1405          * Global variables:
1406          *  rtcClock_alarmCfgMask: global variable which stores masks for
1407          *  time/date alarm configuration is modified.
1408          *
1409          * Reentrant:
1410          *  No.
1411          *
1412          *******************************************************************************/
1413          void rtcClock_WriteAlarmMask(uint8 mask) 
1414          {
1415   1          rtcClock_alarmCfgMask = mask;
1416   1      }
1417          
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 24  

1418          
1419          /*******************************************************************************
1420          * Function Name:   rtcClock_WriteIntervalMask
1421          ********************************************************************************
1422          *
1423          * Summary:
1424          *  Writes the Interval Mask software register with 1 bit per time/date entry.
1425          *  Interrupt true when any masked time/date overflow occur.
1426          *
1427          * Parameters:
1428          *  mask: Alarm Mask software register value.
1429          *
1430          * Return:
1431          *  None.
1432          *
1433          * Global variables:
1434          *  rtcClock_intervalCfgMask: this global variable is modified - the new
1435          *  value of interval mask is stored here.
1436          *
1437          * Reentrant:
1438          *  No.
1439          *
1440          *******************************************************************************/
1441          void rtcClock_WriteIntervalMask(uint8 mask) 
1442          {
1443   1          rtcClock_intervalCfgMask = mask;
1444   1      }
1445          
1446          
1447          /*******************************************************************************
1448          * Function Name:   rtcClock_ReadStatus
1449          ********************************************************************************
1450          *
1451          * Summary:
1452          *  Reads the Status software register which has flags for DST
1453          *  (DST), Leap Year (LY) and AM/PM (AM_PM), Alarm active (AA).
1454          *
1455          * Parameters:
1456          *  None.
1457          *
1458          * Return:
1459          *  None.
1460          *
1461          * Global variables:
1462          *  rtcClock_statusDateTime: global variable is modified - active alarm
1463          *  status bit is cleared.
1464          *
1465          * Reentrant:
1466          *  No.
1467          *
1468          * Side Effects:
1469          *  Alarm active(AA) flag clear after read.
1470          *
1471          *******************************************************************************/
1472          uint8 rtcClock_ReadStatus(void) 
1473          {
1474   1          uint8 status;
1475   1      
1476   1          /* Save status */
1477   1          status = (uint8)rtcClock_statusDateTime;
1478   1      
1479   1          /* Clean AA flag after read of Status Register */
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 25  

1480   1          rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_AA);
1481   1      
1482   1          return (status);
1483   1      }
1484          
1485          
1486          /*******************************************************************************
1487          * Function Name:   rtcClock_DayOfWeek
1488          ********************************************************************************
1489          *
1490          * Summary:
1491          *  Calculates Day Of Week value use Zeller's congruence.
1492          *
1493          * Parameters:
1494          *  dayOfMonth: Day Of Month value.
1495          *  month: Month value.
1496          *  year: Year value.
1497          *
1498          * Return:
1499          *  Day Of Week value.
1500          *
1501          *******************************************************************************/
1502          static uint8 rtcClock_DayOfWeek(uint8 dayOfMonth, uint8 month, uint16 year)
1503          
1504          {
1505   1          /* Calculated sequence ((31 * month) / 12) mod 7 from the Zeller's congruence */
1506   1          static const uint8 CYCODE rtcClock_monthTemplate[rtcClock_MONTHS_IN_YEAR] =
1507   1                                                                  {0u, 3u, 2u, 5u, 0u, 3u, 5u, 1u, 4u, 6u, 2u, 4
             -u};
1508   1      
1509   1          /* It is simpler to handle the modified year, which is year - 1 during
1510   1          * January and February
1511   1          */
1512   1          if(month < rtcClock_MARCH)
1513   1          {
1514   2              year = year - 1u;
1515   2          }
1516   1      
1517   1          /* For Gregorian calendar: d = (day + y + y/4 - y/100 + y/400 + (31*m)/12) mod 7 */
1518   1          return ((uint8)(((year + (((year/4u) - (year/100u)) + (year/400u))) +
1519   1          (((uint16)rtcClock_monthTemplate[month - 1u]) + ((uint16) dayOfMonth))) % rtcClock_DAYS_IN_WEEK));
1520   1      }
1521          
1522          
1523          /*******************************************************************************
1524          * Function Name:   rtcClock_SetInitValues
1525          ********************************************************************************
1526          *
1527          * Summary:
1528          *    Does all initial calculation.
1529          *    - Set LP Year flag;
1530          *    - Set AM/PM flag;
1531          *    - DayOfWeek;
1532          *    - DayOfYear;
1533          *    - Set DST flag;
1534          *    - Convert relative to absolute date.
1535          *
1536          * Parameters:
1537          *  None.
1538          *
1539          * Return:
1540          *  None.
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 26  

1541          *
1542          * Global variables:
1543          *  rtcClock_currentTimeDate, rtcClock_dstTimeDateStart,
1544          *  rtcClock_dstTimeDateStop, rtcClock_dstTimeDateStart,
1545          *  rtcClock_alarmCfgTimeDate, rtcClock_statusDateTime,
1546          *  rtcClock_dstStartStatus, rtcClock_dstStartStatus,
1547          *  rtcClock_dstStopStatus, rtcClock_alarmCurStatus:
1548          *  global variables are used while the initial calculation.
1549          *
1550          * rtcClock_dstTimeDateStart, rtcClock_currentTimeDate,
1551          *  rtcClock_statusDateTime, rtcClock_dstStartStatus,
1552          *  rtcClock_dstStartStatus, rtcClock_dstStopStatus,
1553          *  rtcClock_alarmCurStatus: global variables are modified with the
1554          *  initial calculated data.
1555          *
1556          * Reentrant:
1557          *  No.
1558          *
1559          *******************************************************************************/
1560          static void rtcClock_SetInitValues(void) 
1561          {
1562   1          uint8 i;
1563   1          uint8 rtcClock_alarmCfgMaskTemp;
1564   1      
1565   1          /* Clears day of month counter */
1566   1          rtcClock_currentTimeDate.DayOfYear = 0u;
1567   1      
1568   1          /* Increments day of year value with day in current month */
1569   1          rtcClock_currentTimeDate.DayOfYear += rtcClock_currentTimeDate.DayOfMonth;
1570   1      
1571   1          /* Check leap year */
1572   1          if(1u == rtcClock_LEAP_YEAR(rtcClock_currentTimeDate.Year))
1573   1          {
1574   2              /* Set LP Year flag */
1575   2              rtcClock_statusDateTime |= rtcClock_STATUS_LY;
1576   2          }   /* leap year flag was set */
1577   1          else
1578   1          {
1579   2              /* Clear LP Year flag */
1580   2              rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_LY);
1581   2          }   /* leap year flag was cleared */
1582   1      
1583   1          /* Day of Year */
1584   1          for(i = 0u; i < (rtcClock_currentTimeDate.Month - 1u); i++)
1585   1          {
1586   2              /* Increment on days in passed months */
1587   2              rtcClock_currentTimeDate.DayOfYear += rtcClock_daysInMonths[i];
1588   2          }   /* day of year is calculated */
1589   1      
1590   1          /* Leap year check */
1591   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_statusDateTime, rtcClock_STATUS_LY))
1592   1          {
1593   2              /* Leap day check */
1594   2              if(rtcClock_currentTimeDate.Month > rtcClock_FEBRUARY)
1595   2              {
1596   3                  /* Add leap day */
1597   3                  rtcClock_currentTimeDate.DayOfYear++;
1598   3              }   /* Do nothing for non leap day */
1599   2          }   /* Do nothing for not leap year */
1600   1      
1601   1          /* DayOfWeek */
1602   1          rtcClock_currentTimeDate.DayOfWeek = rtcClock_DayOfWeek(
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 27  

1603   1                                                                              rtcClock_currentTimeDate.DayOfMont
             -h,
1604   1                                                                              rtcClock_currentTimeDate.Month,
1605   1                                                                              rtcClock_currentTimeDate.Year) + 1
             -u;
1606   1      
1607   1          if(rtcClock_currentTimeDate.DayOfWeek > rtcClock_START_OF_WEEK)
1608   1          {
1609   2              rtcClock_currentTimeDate.DayOfWeek -= rtcClock_START_OF_WEEK;
1610   2          }
1611   1          else
1612   1          {
1613   2              rtcClock_currentTimeDate.DayOfWeek = rtcClock_DAYS_IN_WEEK -
1614   2                                              (rtcClock_START_OF_WEEK - rtcClock_currentTimeDate.DayOfWeek);
1615   2          }
1616   1      
1617   1          #if (1u == rtcClock_DST_FUNC_ENABLE)
1618   1      
1619   1              /* If DST values is given in a relative manner, converts to the absolute values */
1620   1              if(0u != rtcClock_IS_BIT_SET(rtcClock_dstModeType, rtcClock_DST_RELDATE))
1621   1              {
1622   2                  rtcClock_DSTDateConversion();
1623   2              }
1624   1      
1625   1              /* Sets DST status respect to the DST start date and time */
1626   1              if(rtcClock_currentTimeDate.Month > rtcClock_dstTimeDateStart.Month)
1627   1              {
1628   2                  rtcClock_statusDateTime |= rtcClock_STATUS_DST;
1629   2              }
1630   1              else if(rtcClock_currentTimeDate.Month == rtcClock_dstTimeDateStart.Month)
1631   1              {
1632   2                  if(rtcClock_currentTimeDate.DayOfMonth > rtcClock_dstTimeDateStart.DayOfMonth)
1633   2                  {
1634   3                      rtcClock_statusDateTime |= rtcClock_STATUS_DST;
1635   3                  }
1636   2                  else if(rtcClock_currentTimeDate.DayOfMonth == rtcClock_dstTimeDateStart.DayOfMonth)
1637   2                  {
1638   3                      if(rtcClock_currentTimeDate.Hour > rtcClock_dstTimeDateStart.Hour)
1639   3                      {
1640   4                          rtcClock_statusDateTime |= rtcClock_STATUS_DST;
1641   4                      }
1642   3                  }
1643   2                  else
1644   2                  {
1645   3                      /* Do nothing if current day of month is less than DST stop day of month */
1646   3                  }
1647   2              }
1648   1              else
1649   1              {
1650   2                  /* Do nothing if current month is before than DST stop month */
1651   2              }
1652   1      
1653   1              /* Clears DST status respect to the DST start date and time */
1654   1              if(rtcClock_currentTimeDate.Month > rtcClock_dstTimeDateStop.Month)
1655   1              {
1656   2                  rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_DST);
1657   2              }
1658   1              else if(rtcClock_currentTimeDate.Month == rtcClock_dstTimeDateStop.Month)
1659   1              {
1660   2                  if(rtcClock_currentTimeDate.DayOfMonth > rtcClock_dstTimeDateStop.DayOfMonth)
1661   2                  {
1662   3                      rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_DST);
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 28  

1663   3                  }
1664   2                  else if(rtcClock_currentTimeDate.DayOfMonth == rtcClock_dstTimeDateStop.DayOfMonth)
1665   2                  {
1666   3                      if(rtcClock_currentTimeDate.Hour > rtcClock_dstTimeDateStop.Hour)
1667   3                      {
1668   4                          rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_DST);
1669   4                      }
1670   3                  }
1671   2                  else
1672   2                  {
1673   3                      /* Do nothing if current day of month is less than DST stop day of month */
1674   3                  }
1675   2              }
1676   1              else
1677   1              {
1678   2                  /* Do nothing if current month is before than DST stop month */
1679   2              }
1680   1      
1681   1              /* Clear DST start/stop statuses */
1682   1              rtcClock_dstStartStatus = 0u;
1683   1              rtcClock_dstStopStatus = 0u;
1684   1      
1685   1              /* Sets DST stop status month flag if DST stop month is equal to the
1686   1              * current month, otherwise clears that flag.
1687   1              */
1688   1              if(rtcClock_dstTimeDateStop.Month == rtcClock_currentTimeDate.Month)
1689   1              {
1690   2                  rtcClock_dstStopStatus |= rtcClock_DST_MONTH;
1691   2              }
1692   1              else
1693   1              {
1694   2                  rtcClock_dstStopStatus &= (uint8)(~rtcClock_DST_MONTH);
1695   2              }
1696   1      
1697   1              /* Sets DST start status month flag if DST start month is equal to the
1698   1              * current month, otherwise clears that flag.
1699   1              */
1700   1              if(rtcClock_dstTimeDateStart.Month == rtcClock_currentTimeDate.Month)
1701   1              {
1702   2                  rtcClock_dstStartStatus |= rtcClock_DST_MONTH;
1703   2              }
1704   1              else
1705   1              {
1706   2                  rtcClock_dstStartStatus &= (uint8)(~rtcClock_DST_MONTH);
1707   2              }
1708   1      
1709   1              /* Sets DST stop status day of month flag if DST stop day of month is
1710   1              * equal to the current day of month, otherwise clears that flag.
1711   1              */
1712   1              if(rtcClock_dstTimeDateStop.DayOfMonth == rtcClock_currentTimeDate.DayOfMonth)
1713   1              {
1714   2                  rtcClock_dstStopStatus |= rtcClock_DST_DAYOFMONTH;
1715   2              }
1716   1              else
1717   1              {
1718   2                  rtcClock_dstStopStatus &= (uint8)(~rtcClock_DST_DAYOFMONTH);
1719   2              }
1720   1      
1721   1              /* Sets DST start status day of month flag if DST start day of month is
1722   1              * equal to the current day of month, otherwise clears that flag.
1723   1              */
1724   1              if(rtcClock_dstTimeDateStart.DayOfMonth == rtcClock_currentTimeDate.DayOfMonth)
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 29  

1725   1              {
1726   2                  rtcClock_dstStartStatus |= rtcClock_DST_DAYOFMONTH;
1727   2              }
1728   1              else
1729   1              {
1730   2                  rtcClock_dstStartStatus &= (uint8)(~rtcClock_DST_DAYOFMONTH);
1731   2              }
1732   1      
1733   1              /* Sets DST stop status hour flag if DST stop hour is equal to the
1734   1              * current hour, otherwise clears that flag.
1735   1              */
1736   1              if(rtcClock_dstTimeDateStop.Hour == rtcClock_currentTimeDate.Hour)
1737   1              {
1738   2                  rtcClock_dstStopStatus |= rtcClock_DST_HOUR;
1739   2              }
1740   1              else
1741   1              {
1742   2                  rtcClock_dstStopStatus &= (uint8)(~rtcClock_DST_HOUR);
1743   2              }
1744   1      
1745   1              /* Sets DST start status hour flag if DST start hour is equal to the
1746   1              * current hour, otherwise clears that flag.
1747   1              */
1748   1              if(rtcClock_dstTimeDateStart.Hour == rtcClock_currentTimeDate.Hour)
1749   1              {
1750   2                  rtcClock_dstStartStatus |= rtcClock_DST_HOUR;
1751   2              }
1752   1              else
1753   1              {
1754   2                  rtcClock_dstStartStatus &= (uint8)(~rtcClock_DST_HOUR);
1755   2              }
1756   1      
1757   1              /* DST Enable ? */
1758   1              if(0u != rtcClock_IS_BIT_SET(rtcClock_dstModeType, rtcClock_DST_ENABLE))
1759   1              {
1760   2                  if(0u != rtcClock_IS_BIT_SET(rtcClock_statusDateTime, rtcClock_STATUS_DST))
1761   2                  {
1762   3                      if(0u != rtcClock_IS_BIT_SET(rtcClock_dstStartStatus,
1763   3                              (rtcClock_DST_HOUR | rtcClock_DST_DAYOFMONTH | rtcClock_DST_MONTH)))
1764   3                      {
1765   4                          /* Subtract current minutes value with minutes value, what
1766   4                          *  are out of full hour in DST offset.
1767   4                          */
1768   4                          rtcClock_currentTimeDate.Min -= rtcClock_dstOffsetMin %
1769   4                                                                  (rtcClock_HOUR_ELAPSED + 1u);
1770   4      
1771   4                          /* If current minutes value is greater than number of
1772   4                          * minutes in hour - could be only if hour's value is negative
1773   4                          */
1774   4                          if(rtcClock_currentTimeDate.Min > rtcClock_HOUR_ELAPSED)
1775   4                          {
1776   5                              /* Adjust current minutes value. Convert to the positive. */
1777   5                              rtcClock_currentTimeDate.Min = rtcClock_HOUR_ELAPSED -
1778   5                                                                     ((uint8)(~rtcClock_currentTimeDate.Min));
1779   5      
1780   5                              /* Decrement current hours value. */
1781   5                              rtcClock_currentTimeDate.Hour--;
1782   5                          }
1783   4      
1784   4                          /* Subtract current hours value with hours value, what
1785   4                          *  are full part of hours in DST offset.
1786   4                          */
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 30  

1787   4                          rtcClock_currentTimeDate.Hour -= rtcClock_dstOffsetMin /
1788   4                                                                   (rtcClock_HOUR_ELAPSED + 1u);
1789   4      
1790   4                          /* Check if current hour's value is negative */
1791   4                          if(rtcClock_currentTimeDate.Hour > rtcClock_DAY_ELAPSED)
1792   4                          {
1793   5                              /* Adjust hour */
1794   5                              rtcClock_currentTimeDate.Hour = rtcClock_DAY_ELAPSED -
1795   5                                                                      ((uint8)(~rtcClock_currentTimeDate.Hour));
1796   5      
1797   5                              /* Decrement day of month, year and week */
1798   5                              rtcClock_currentTimeDate.DayOfMonth--;
1799   5                              rtcClock_currentTimeDate.DayOfYear--;
1800   5                              rtcClock_currentTimeDate.DayOfWeek--;
1801   5      
1802   5                              if(0u == rtcClock_currentTimeDate.DayOfWeek)
1803   5                              {
1804   6                                  rtcClock_currentTimeDate.DayOfWeek = rtcClock_DAYS_IN_WEEK;
1805   6                              }
1806   5      
1807   5                              if(0u == rtcClock_currentTimeDate.DayOfMonth)
1808   5                              {
1809   6                                  /* Decrement months value */
1810   6                                  rtcClock_currentTimeDate.Month--;
1811   6      
1812   6                                  /* The current month is month before 1st one. */
1813   6                                  if(0u == rtcClock_currentTimeDate.Month)
1814   6                                  {
1815   7                                      /* December is the month before January */
1816   7                                      rtcClock_currentTimeDate.Month = rtcClock_DECEMBER;
1817   7                                      rtcClock_currentTimeDate.DayOfMonth =
1818   7                                                  rtcClock_daysInMonths[rtcClock_currentTimeDate.Month - 1u];
1819   7      
1820   7                                      /* Decrement years value */
1821   7                                      rtcClock_currentTimeDate.Year--;
1822   7                                      if(1u == rtcClock_LEAP_YEAR(rtcClock_currentTimeDate.Year))
1823   7                                      {
1824   8                                          /* Set leap year status flag */
1825   8                                          rtcClock_statusDateTime |= rtcClock_STATUS_LY;
1826   8                                          rtcClock_currentTimeDate.DayOfYear = rtcClock_DAYS_IN_LEAP_YEAR;
1827   8                                      }
1828   7                                      else
1829   7                                      {
1830   8                                          /* Clear leap year status flag */
1831   8                                          rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_LY);
1832   8                                          rtcClock_currentTimeDate.DayOfYear = rtcClock_DAYS_IN_YEAR;
1833   8                                      }
1834   7                                  }   /* 0u == rtcClock_currentTimeDate.Month */
1835   6                                  else
1836   6                                  {
1837   7                                      rtcClock_currentTimeDate.DayOfMonth =
1838   7                                                  rtcClock_daysInMonths[rtcClock_currentTimeDate.Month - 1u];
1839   7                                  }   /* 0u != End of rtcClock_currentTimeDate.Month */
1840   6                              }   /* 0u == End of rtcClock_currentTimeDate.DayOfMonth */
1841   5                          }   /* End of rtcClock_currentTimeDate.Hour > rtcClock_DAY_ELAPSED */
1842   4      
1843   4                          /* Clear DST status flag */
1844   4                          rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_DST);
1845   4                          /* Clear DST stop status */
1846   4                          rtcClock_dstStopStatus = 0u;
1847   4                      }
1848   3                  }
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 31  

1849   2                  else    /* Current time and date DO NOT match DST time and date */
1850   2                  {
1851   3                      if(0u != rtcClock_IS_BIT_SET(rtcClock_dstStartStatus, rtcClock_DST_HOUR |
1852   3                                                           rtcClock_DST_DAYOFMONTH | rtcClock_DST_MONTH))
1853   3                      {
1854   4                          /* Add Hour and Min */
1855   4                          rtcClock_currentTimeDate.Min +=
1856   4                                                      rtcClock_dstOffsetMin % (rtcClock_HOUR_ELAPSED + 1u);
1857   4      
1858   4                          if(rtcClock_currentTimeDate.Min > rtcClock_HOUR_ELAPSED)
1859   4                          {
1860   5                              /* Adjust Min */
1861   5                              rtcClock_currentTimeDate.Min -= (rtcClock_HOUR_ELAPSED + 1u);
1862   5                              rtcClock_currentTimeDate.Hour++;
1863   5                          }
1864   4      
1865   4                          rtcClock_currentTimeDate.Hour +=
1866   4                                                      rtcClock_dstOffsetMin / (rtcClock_HOUR_ELAPSED + 1u);
1867   4                          if(rtcClock_currentTimeDate.Hour > rtcClock_DAY_ELAPSED)
1868   4                          {
1869   5                              /* Adjust hour, add day */
1870   5                              rtcClock_currentTimeDate.Hour -= (rtcClock_DAY_ELAPSED + 1u);
1871   5                              rtcClock_currentTimeDate.DayOfMonth++;
1872   5                              rtcClock_currentTimeDate.DayOfYear++;
1873   5                              rtcClock_currentTimeDate.DayOfWeek++;
1874   5      
1875   5                              if(rtcClock_currentTimeDate.DayOfWeek > rtcClock_WEEK_ELAPSED)
1876   5                              {
1877   6                                  rtcClock_currentTimeDate.DayOfWeek = 1u;
1878   6                              }
1879   5      
1880   5                              if(rtcClock_currentTimeDate.DayOfMonth >
1881   5                                                  rtcClock_daysInMonths[rtcClock_currentTimeDate.Month - 1u])
1882   5                              {
1883   6                                  rtcClock_currentTimeDate.Month++;
1884   6                                  rtcClock_currentTimeDate.DayOfMonth = 1u;
1885   6      
1886   6                                  /* Has new year come? */
1887   6                                  if(rtcClock_currentTimeDate.Month > rtcClock_YEAR_ELAPSED)
1888   6                                  {
1889   7                                      /* Set first month of the year */
1890   7                                      rtcClock_currentTimeDate.Month = rtcClock_JANUARY;
1891   7      
1892   7                                      /* Increment year */
1893   7                                      rtcClock_currentTimeDate.Year++;
1894   7      
1895   7                                      /* Update leap year status */
1896   7                                      if(1u == rtcClock_LEAP_YEAR(rtcClock_currentTimeDate.Year))
1897   7                                      {
1898   8                                          /* LP - true, else - false */
1899   8                                          rtcClock_statusDateTime |= rtcClock_STATUS_LY;
1900   8                                      }
1901   7                                      else
1902   7                                      {
1903   8                                          rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_LY);
1904   8                                      }
1905   7      
1906   7                                      /* Set day of year to the first one */
1907   7                                      rtcClock_currentTimeDate.DayOfYear = 1u;
1908   7                                  }
1909   6                              }
1910   5                          }
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 32  

1911   4                          rtcClock_statusDateTime |= rtcClock_STATUS_DST;
1912   4                          rtcClock_dstStartStatus = 0u;
1913   4                      }
1914   3                  }
1915   2              }
1916   1          #endif /* 1u == rtcClock_DST_FUNC_ENABLE */
1917   1      
1918   1          /* Set AM/PM flag */
1919   1          if(rtcClock_currentTimeDate.Hour < rtcClock_HALF_OF_DAY_ELAPSED)
1920   1          {
1921   2              /* AM Hour 00:00-11:59, flag zero */
1922   2              rtcClock_statusDateTime &= (uint8)(~rtcClock_STATUS_AM_PM);
1923   2          }
1924   1          else
1925   1          {
1926   2              /* PM Hour 12:00 - 23:59, flag set */
1927   2              rtcClock_statusDateTime |= rtcClock_STATUS_AM_PM;
1928   2          }
1929   1      
1930   1          /* Alarm calculation */
1931   1      
1932   1          /* Alarm SEC */
1933   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_alarmCfgMask, rtcClock_ALARM_SEC_MASK))
1934   1          {
1935   2              if(rtcClock_alarmCfgTimeDate.Sec == rtcClock_currentTimeDate.Sec)
1936   2              {
1937   3                  /* Set second alarm */
1938   3                  rtcClock_alarmCurStatus |= rtcClock_ALARM_SEC_MASK;
1939   3              }
1940   2              else
1941   2              {
1942   3                  /* Clear second alarm */
1943   3                  rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_SEC_MASK);
1944   3              }
1945   2          }
1946   1      
1947   1          /* Alarm MIN */
1948   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_alarmCfgMask, rtcClock_ALARM_MIN_MASK))
1949   1          {
1950   2              if(rtcClock_alarmCfgTimeDate.Min == rtcClock_currentTimeDate.Min)
1951   2              {
1952   3                  /* Set minute alarm */
1953   3                  rtcClock_alarmCurStatus |= rtcClock_ALARM_MIN_MASK;
1954   3              }
1955   2              else
1956   2              {
1957   3                  /* Clear minute alarm */
1958   3                  rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_MIN_MASK);
1959   3              }
1960   2          }
1961   1      
1962   1          /* Alarm HOUR */
1963   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_alarmCfgMask, rtcClock_ALARM_HOUR_MASK))
1964   1          {
1965   2              if(rtcClock_alarmCfgTimeDate.Hour == rtcClock_currentTimeDate.Hour)
1966   2              {
1967   3                  /* Set hour alarm */
1968   3                  rtcClock_alarmCurStatus |= rtcClock_ALARM_HOUR_MASK;
1969   3              }
1970   2              else
1971   2              {
1972   3                  /* Clear hour alarm */
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 33  

1973   3                  rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_HOUR_MASK);
1974   3              }
1975   2          }
1976   1      
1977   1          /* Alarm DAYOFWEEK */
1978   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_alarmCfgMask, rtcClock_ALARM_DAYOFWEEK_MASK))
1979   1          {
1980   2              if(rtcClock_alarmCfgTimeDate.DayOfWeek == rtcClock_currentTimeDate.DayOfWeek)
1981   2              {
1982   3                  /* Set day of week alarm */
1983   3                  rtcClock_alarmCurStatus |= rtcClock_ALARM_DAYOFWEEK_MASK;
1984   3              }
1985   2              else
1986   2              {
1987   3                  /* Clear day of week alarm */
1988   3                  rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_DAYOFWEEK_MASK);
1989   3              }
1990   2          }
1991   1      
1992   1          /* Alarm DAYOFYEAR */
1993   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_alarmCfgMask, rtcClock_ALARM_DAYOFYEAR_MASK))
1994   1          {
1995   2              if(rtcClock_alarmCfgTimeDate.DayOfYear == rtcClock_currentTimeDate.DayOfYear)
1996   2              {
1997   3                  /* Set day of year alarm */
1998   3                  rtcClock_alarmCurStatus |= rtcClock_ALARM_DAYOFYEAR_MASK;
1999   3              }
2000   2              else
2001   2              {
2002   3                  /* Clear day of year alarm */
2003   3                  rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_DAYOFYEAR_MASK);
2004   3              }
2005   2          }
2006   1      
2007   1          /* Alarm DAYOFMONTH */
2008   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_alarmCfgMask, rtcClock_ALARM_DAYOFMONTH_MASK))
2009   1          {
2010   2              if(rtcClock_alarmCfgTimeDate.DayOfMonth == rtcClock_currentTimeDate.DayOfMonth)
2011   2              {
2012   3                  /* Set day of month alarm */
2013   3                  rtcClock_alarmCurStatus |= rtcClock_ALARM_DAYOFMONTH_MASK;
2014   3              }
2015   2                 else
2016   2              {
2017   3                  /* Clear day of month alarm */
2018   3                  rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_DAYOFMONTH_MASK);
2019   3              }
2020   2          }
2021   1      
2022   1          /* Alarm MONTH */
2023   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_alarmCfgMask, rtcClock_ALARM_MONTH_MASK))
2024   1          {
2025   2              if(rtcClock_alarmCfgTimeDate.Month == rtcClock_currentTimeDate.Month)
2026   2              {
2027   3                  /* Set month alarm */
2028   3                  rtcClock_alarmCurStatus |= rtcClock_ALARM_MONTH_MASK;
2029   3              }
2030   2              else
2031   2              {
2032   3                  /* Clear month alarm */
2033   3                  rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_MONTH_MASK);
2034   3              }
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 34  

2035   2          }
2036   1      
2037   1          /* Alarm YEAR */
2038   1          if(0u != rtcClock_IS_BIT_SET(rtcClock_alarmCfgMask, rtcClock_ALARM_YEAR_MASK))
2039   1          {
2040   2              if(rtcClock_alarmCfgTimeDate.Year == rtcClock_currentTimeDate.Year)
2041   2              {
2042   3                  /* Set year alarm */
2043   3                  rtcClock_alarmCurStatus |= rtcClock_ALARM_YEAR_MASK;
2044   3              }
2045   2              else
2046   2              {
2047   3                  /* Clear year alarm */
2048   3                  rtcClock_alarmCurStatus &= (uint8)(~rtcClock_ALARM_YEAR_MASK);
2049   3              }
2050   2          }
2051   1      
2052   1          rtcClock_alarmCfgMaskTemp = rtcClock_alarmCfgMask;
2053   1          /* Set Alarm flag event */
2054   1          rtcClock_SET_ALARM(rtcClock_alarmCfgMaskTemp,
2056   1                                     rtcClock_alarmCurStatus,
2056   1                                     rtcClock_statusDateTime);
2057   1      }
2058          
2059          
2060          #if (1u == rtcClock_DST_FUNC_ENABLE)
2061              /*******************************************************************************
2062              * Function Name:   rtcClock_WriteDSTMode
2063              ********************************************************************************
2064              *
2065              * Summary:
2066              *  Writes the DST mode software register. That enables or disables DST changes
2067              *  and sets the date mode to fixed date or relative date. Only generated if DST
2068              *  enabled.
2069              *
2070              * Parameters:
2071              *  mode: DST Mode software register value.
2072              *
2073              * Return:
2074              *  None.
2075              *
2076              * Global variables:
2077              *  rtcClock_dstModeType: global variable is modified with the new
2078              *  DST mode type: relative or fixed.
2079              *
2080              *  rtcClock_dstTimeDateStart.Month,
2081              *  rtcClock_dstTimeDateStart.DayOfWeek,
2082              *  rtcClock_dstTimeDateStart.Week:
2083              *  rtcClock_dstTimeDateStop.Month,
2084              *  rtcClock_dstTimeDateStop.DayOfWeek,
2085              *  rtcClock_dstTimeDateStop.Week,
2086              *  rtcClock_currentTimeDate.Year: for the day of week correction,
2087              *   they are used by rtcClock_DSTDateConversion() function if DST
2088              *   mode is configured to be relative.
2089              *
2090              *  rtcClock_dstTimeDateStart.DayOfMonth,
2091              *  rtcClock_dstTimeDateStop.DayOfMonth: updated after convertion by
2092              *  the rtcClock_DSTDateConversion() function if DST mode is
2093              *  configured to be relative.
2094              *
2095              * Reentrant:
2096              *  No.
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 35  

2097              *
2098              *******************************************************************************/
2099              void rtcClock_WriteDSTMode(uint8 mode) 
2100              {
2101   1              /* Set DST mode */
2102   1              rtcClock_dstModeType = mode;
2103   1      
2104   1              if(0u != rtcClock_IS_BIT_SET(mode, rtcClock_DST_RELDATE))
2105   1              {
2106   2                  /* Convert DST date */
2107   2                  rtcClock_DSTDateConversion();
2108   2              }
2109   1          }
2110          
2111          
2112              /*******************************************************************************
2113              * Function Name:   rtcClock_WriteDSTStartHour
2114              ********************************************************************************
2115              *
2116              * Summary:
2117              *  Writes the DST Start Hour software register. Used for absolute date entry.
2118              *  Only generated if DST is enabled.
2119              *
2120              * Parameters:
2121              *  hour: DST Start Hour software register value.
2122              *
2123              * Return:
2124              *  None.
2125              *
2126              * Global variables:
2127              *  rtcClock_dstTimeDateStart.Hour: global variable is modified with
2128              *  the new value.
2129              *
2130              * Reentrant:
2131              *  No.
2132              *
2133              *******************************************************************************/
2134              void rtcClock_WriteDSTStartHour(uint8 hour) 
2135              {
2136   1              /* Set DST Start Hour */
2137   1              rtcClock_dstTimeDateStart.Hour = hour;
2138   1          }
2139          
2140          
2141              /*******************************************************************************
2142              * Function Name:   rtcClock_WriteDSTStartOfMonth
2143              ********************************************************************************
2144              *
2145              * Summary:
2146              *  Writes the DST Start DayOfMonth software register. Used for absolute date
2147              *  entry. Only generated if DST is enabled.
2148              *
2149              * Parameters:
2150              *  dayOfMonth: DST Start DayOfMonth software register value.
2151              *
2152              * Return:
2153              *  None.
2154              *
2155              * Global variables:
2156              *  rtcClock_dstTimeDateStart.DayOfMonth: global variable is modified
2157              *  with the new value.
2158              *
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 36  

2159              * Reentrant:
2160              *  No.
2161              *
2162              *******************************************************************************/
2163              void rtcClock_WriteDSTStartDayOfMonth(uint8 dayOfMonth)
2164                   
2165              {
2166   1              /* Set DST Start day of month */
2167   1              rtcClock_dstTimeDateStart.DayOfMonth = dayOfMonth;
2168   1          }
2169          
2170          
2171              /*******************************************************************************
2172              * Function Name:   rtcClock_WriteDSTStartMonth
2173              ********************************************************************************
2174              *
2175              * Summary:
2176              *  Writes the DST Start Month software register. Used for absolute date entry.
2177              *  Only generated if DST is enabled.
2178              *
2179              * Parameters:
2180              *  month: DST Start month software register value.
2181              *
2182              * Return:
2183              *  None.
2184              *
2185              * Global variables:
2186              *  rtcClock_dstTimeDateStart.Month: global variable is modified
2187              *  with the new value.
2188              *
2189              * Reentrant:
2190              *  No.
2191              *
2192              *******************************************************************************/
2193              void rtcClock_WriteDSTStartMonth(uint8 month) 
2194              {
2195   1              /* Set DST Start month */
2196   1              rtcClock_dstTimeDateStart.Month = month;
2197   1          }
2198          
2199          
2200              /*******************************************************************************
2201              * Function Name:   rtcClock_WriteDSTStartDayOfWeek
2202              ********************************************************************************
2203              *
2204              * Summary:
2205              *  Writes the DST Start DayOfWeek software register. Used for absolute date
2206              *  entry. Only generated if DST is enabled.
2207              *
2208              * Parameters:
2209              *  dayOfWeek: DST start day of week software register value.
2210              *
2211              * Return:
2212              *  None.
2213              *
2214              * Global variables:
2215              *  rtcClock_dstModeType: global variable, where DST mode type:
2216              *  relative or fixed is stored.
2217              *
2218              *  rtcClock_dstTimeDateStart.Month,
2219              *  rtcClock_dstTimeDateStart.DayOfWeek,
2220              *  rtcClock_dstTimeDateStart.Week,
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 37  

2221              *  rtcClock_dstTimeDateStop.Month,
2222              *  rtcClock_dstTimeDateStop.DayOfWeek,
2223              *  rtcClock_dstTimeDateStop.Week: for the day of week correction,
2224              *   they are used by rtcClock_DSTDateConversion() function if DST
2225              *   mode is configured to be relative.
2226              *
2227              *  rtcClock_currentTimeDate.Year: for the day of week calculation,
2228              *   it is used by rtcClock_DSTDateConversion() function if DST
2229              *   mode is configured to be relative.
2230              *
2231              *  rtcClock_dstTimeDateStart.DayOfWeek: global variable is modified
2232              *  with the new day of week value.
2233              *
2234              *  rtcClock_dstTimeDateStart.DayOfMonth and
2235              *  rtcClock_dstTimeDateStop.DayOfMonth are modified by
2236              *  the rtcClock_DSTDateConversion() function if DST mode is
2237              *  configured to be relative.
2238              *
2239              * Reentrant:
2240              *  No.
2241              *
2242              *******************************************************************************/
2243              void rtcClock_WriteDSTStartDayOfWeek(uint8 dayOfWeek)
2244                   
2245              {
2246   1              /* Set DST Start day of week */
2247   1              rtcClock_dstTimeDateStart.DayOfWeek = dayOfWeek;
2248   1      
2249   1              if(0u != rtcClock_IS_BIT_SET(rtcClock_dstModeType, rtcClock_DST_RELDATE))
2250   1              {
2251   2                  /* Convert DST date */
2252   2                  rtcClock_DSTDateConversion();
2253   2              }
2254   1          }
2255          
2256          
2257              /*******************************************************************************
2258              * Function Name:   rtcClock_WriteDSTStartWeek
2259              ********************************************************************************
2260              *
2261              * Summary:
2262              *  Writes the DST Start Week software register. Used for absolute date entry.
2263              *  Only generated if DST is enabled.
2264              *
2265              * Parameters:
2266              *  week: DST start week software register value.
2267              *
2268              * Return:
2269              *  None.
2270              *
2271              * Global variables:
2272              *  rtcClock_dstTimeDateStart.Week: global variable is modified with
2273              *   the new week's value of the DST start time/date.
2274              *
2275              *  rtcClock_dstTimeDateStart.DayOfMonth,
2276              *  rtcClock_dstTimeDateStop.DayOfMonth: is modified after convertion
2277              *  by the rtcClock_DSTDateConversion() function if DST mode is
2278              *  configured to be relative.
2279              *
2280              *  rtcClock_dstModeType: global variable is used for theDST mode
2281              *   type: relative or fixed store.
2282              *
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 38  

2283              *  rtcClock_dstTimeDateStart.Month,
2284              *  rtcClock_dstTimeDateStart.DayOfWeek,
2285              *  rtcClock_dstTimeDateStart.Week: for the day of week correction,
2286              *   they are used by rtcClock_DSTDateConversion() function if DST
2287              *   mode is configured to be relative.
2288              *
2289              *  rtcClock_dstTimeDateStop.Month,
2290              *  rtcClock_dstTimeDateStop.DayOfWeek,
2291              *  rtcClock_dstTimeDateStop.Week: for the day of week correction,
2292              *   they are used by rtcClock_DSTDateConversion() function if DST
2293              *   mode is configured to be relative.
2294              *
2295              *  rtcClock_currentTimeDate.Year: for the day of week calculation,
2296              *   it is used by rtcClock_DSTDateConversion() function if DST
2297              *   mode is configured to be relative.
2298              *
2299              * Reentrant:
2300              *  No.
2301              *
2302              *******************************************************************************/
2303              void rtcClock_WriteDSTStartWeek(uint8 week) 
2304              {
2305   1              /* Set DST Start week */
2306   1              rtcClock_dstTimeDateStart.Week = week;
2307   1      
2308   1              if(0u != rtcClock_IS_BIT_SET(rtcClock_dstModeType, rtcClock_DST_RELDATE))
2309   1              {
2310   2                  /* Convert DST date */
2311   2                  rtcClock_DSTDateConversion();
2312   2              }
2313   1          }
2314          
2315          
2316              /*******************************************************************************
2317              * Function Name:   rtcClock_WriteDSTStopHour
2318              ********************************************************************************
2319              *
2320              * Summary:
2321              *  Writes the DST Stop Hour software register. Used for absolute date entry.
2322              *  Only generated if DST is enabled.
2323              *
2324              * Parameters:
2325              *  hour: DST stop hour software register value.
2326              *
2327              * Return:
2328              *  None.
2329              *
2330              * Global variables:
2331              *  RTC_dstTimeDateStart.Hour: global variable is modified with the new hour
2332              *   of the DST start time/date.
2333              *
2334              * Reentrant:
2335              *  No.
2336              *
2337              *******************************************************************************/
2338              void rtcClock_WriteDSTStopHour(uint8 hour) 
2339              {
2340   1              /* Set DST Stop hour */
2341   1              rtcClock_dstTimeDateStop.Hour = hour;
2342   1          }
2343          
2344          
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 39  

2345              /*******************************************************************************
2346              * Function Name:   rtcClock_WriteDSTStopDayOfMonth
2347              ********************************************************************************
2348              *
2349              * Summary:
2350              *  Writes the DST Stop DayOfMonth software register. Used for absolute date
2351              *  entry. Only generated if DST is enabled.
2352              *
2353              * Parameters:
2354              *  dayOfMonth: DST stop day of month software register value.
2355              *
2356              * Return:
2357              *  None.
2358              *
2359              * Global variables:
2360              *  rtcClock_dstTimeDateStop.DayOfMonth: global variable is modified
2361              *  where new day of month's value of the DST stop time/date.
2362              *
2363              * Reentrant:
2364              *  No.
2365              *
2366              *******************************************************************************/
2367              void rtcClock_WriteDSTStopDayOfMonth(uint8 dayOfMonth)
2368                   
2369              {
2370   1              /* Set DST Start day of month */
2371   1              rtcClock_dstTimeDateStop.DayOfMonth = dayOfMonth;
2372   1          }
2373          
2374          
2375              /*******************************************************************************
2376              * Function Name:   rtcClock_WriteDSTStopMonth
2377              ********************************************************************************
2378              *
2379              * Summary:
2380              *  Writes the DST Stop Month software  register. Used for absolute date entry.
2381              *  Only generated if DST is enabled.
2382              *
2383              * Parameters:
2384              *  month: DST Stop Month software register value.
2385              *
2386              * Return:
2387              *  None.
2388              *
2389              * Global variables:
2390              *  rtcClock_dstTimeDateStop.Month: global variable is modified with
2391              *   the new month of the DST stop time/date.
2392              *
2393              * Reentrant:
2394              *  No.
2395              *
2396              *******************************************************************************/
2397              void rtcClock_WriteDSTStopMonth(uint8 month) 
2398              {
2399   1              /* Set DST Stop month */
2400   1              rtcClock_dstTimeDateStop.Month = month;
2401   1          }
2402          
2403          
2404              /*******************************************************************************
2405              * Function Name:   rtcClock_WriteDSTStopDayOfWeek
2406              ********************************************************************************
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 40  

2407              *
2408              * Summary:
2409              *  Writes the DST Stop DayOfWeek software register. Used for relative date
2410              *  entry. Only generated if DST is enabled.
2411              *
2412              * Parameters:
2413              *  dayOfWeek: DST stop day of week software register value.
2414              *
2415              * Return:
2416              *  None.
2417              *
2418              * Global variables:
2419              *  rtcClock_dstTimeDateStop.DayOfWeek: global variable is modified
2420              *   with the day of week of the DST stop time/date.
2421              *
2422              *  rtcClock_dstModeType: global variable is used to store DST mode
2423              *   type: relative or fixed.
2424              *
2425              *  rtcClock_dstTimeDateStart.Month,
2426              *  rtcClock_dstTimeDateStart.DayOfWeek,
2427              *  rtcClock_dstTimeDateStart.Week,
2428              *  rtcClock_dstTimeDateStop.Month,
2429              *  rtcClock_dstTimeDateStop.DayOfWeek,
2430              *  rtcClock_dstTimeDateStop.Weekfor the day of week correction,
2431              *   they are used by rtcClock_DSTDateConversion() function if DST
2432              *   mode is configured to be relative.
2433              *
2434              *  rtcClock_currentTimeDate.Year: for the day of week calculation,
2435              *   it is used by rtcClock_DSTDateConversion() function if DST
2436              *   mode is configured to be relative.
2437              *
2438              *  rtcClock_dstTimeDateStop.DayOfWeek: global variable is modified
2439              *  with the new day of week's value.
2440              *
2441              *  rtcClock_dstTimeDateStart.DayOfMonth and
2442              *  rtcClock_dstTimeDateStop.DayOfMonth are modified by
2443              *  the rtcClock_DSTDateConversion() function if DST mode is
2444              *  configured to be relative.
2445              *
2446              * Reentrant:
2447              *  No.
2448              *
2449              *******************************************************************************/
2450              void rtcClock_WriteDSTStopDayOfWeek(uint8 dayOfWeek)
2451                   
2452              {
2453   1              /* Set DST Stop day of week */
2454   1              rtcClock_dstTimeDateStop.DayOfWeek = dayOfWeek;
2455   1      
2456   1              if(0u != rtcClock_IS_BIT_SET(rtcClock_dstModeType, rtcClock_DST_RELDATE))
2457   1              {
2458   2                  /* Convert DST date */
2459   2                  rtcClock_DSTDateConversion();
2460   2              }
2461   1          }
2462          
2463          
2464              /*******************************************************************************
2465              * Function Name:   rtcClock_WriteDSTStopWeek
2466              ********************************************************************************
2467              *
2468              * Summary:
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 41  

2469              *  Writes the DST Stop Week software register. Used for relative date entry.
2470              *  Only generated if DST is enabled.
2471              *
2472              * Parameters:
2473              *  week: DST stop week software register value.
2474              *
2475              * Return:
2476              *  None.
2477              *
2478              * Global variables:
2479              *  rtcClock_dstTimeDateStop.Week: global variable used to store the
2480              *  DST stop time/date is stored.
2481              *
2482              *  rtcClock_dstModeType: global variable is used to store DST mode
2483              *   type: relative or fixed.
2484              *
2485              *  rtcClock_dstTimeDateStart.Month,
2486              *  rtcClock_dstTimeDateStart.DayOfWeek,
2487              *  rtcClock_dstTimeDateStart.Week,
2488              *  rtcClock_dstTimeDateStop.Month,
2489              *  rtcClock_dstTimeDateStop.DayOfWeek,
2490              *  rtcClock_dstTimeDateStop.Week: used for the day of week correction,
2491              *   they are used by rtcClock_DSTDateConversion() function if DST
2492              *   mode is configured to be relative.
2493              *
2494              *  rtcClock_currentTimeDate.Year: for the day of week calculation,
2495              *   it is used by rtcClock_DSTDateConversion() function if DST
2496              *   mode is configured to be relative.
2497              *
2498              *  rtcClock_dstTimeDateStop.Week: global variable is modified with
2499              *  the new value.
2500              *
2501              *  rtcClock_dstTimeDateStart.DayOfMonth and
2502              *  rtcClock_dstTimeDateStop.DayOfMonth are modified by
2503              *  the rtcClock_DSTDateConversion() function if DST mode is
2504              *  configured to be relative.
2505              *
2506              * Reentrant:
2507              *  No.
2508              *
2509              *******************************************************************************/
2510              void rtcClock_WriteDSTStopWeek(uint8 week) 
2511              {
2512   1              /* Set DST Stop week */
2513   1              rtcClock_dstTimeDateStop.Week = week;
2514   1      
2515   1              if(0u != rtcClock_IS_BIT_SET(rtcClock_dstModeType, rtcClock_DST_RELDATE))
2516   1              {
2517   2                  /* Convert DST date */
2518   2                  rtcClock_DSTDateConversion();
2519   2              }
2520   1          }
2521          
2522          
2523              /*******************************************************************************
2524              * Function Name:   rtcClock_WriteDSTOffset
2525              ********************************************************************************
2526              *
2527              * Summary:
2528              *  Writes the DST Offset register. Allows a configurable increment or decrement
2529              *  of time between 0 and 255 minutes. Increment occurs on DST Start and
2530              *  decrement on DST Stop. Only generated if DST is enabled.
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 42  

2531              *
2532              * Parameters:
2533              *  offset: The DST offset to be saved.
2534              *
2535              * Return:
2536              *  None.
2537              *
2538              * Global variables:
2539              *  rtcClock_dstOffsetMin: global variable is modified with the new
2540              *  DST offset value (in minutes).
2541              *
2542              * Reentrant:
2543              *  No.
2544              *
2545              *******************************************************************************/
2546              void rtcClock_WriteDSTOffset(uint8 offset) 
2547              {
2548   1              /* Set DST offset */
2549   1              rtcClock_dstOffsetMin = offset;
2550   1          }
2551          
2552          #endif /* 1u == rtcClock_DST_FUNC_ENABLE */
2553          
2554          
2555          /* [] END OF FILE */
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 43  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION rtcClock_Start (BEGIN)
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
0000 900000      R     MOV     DPTR,#rtcClock_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0008 120000      R     LCALL   rtcClock_Init
                                           ; SOURCE LINE # 135
000B 900000      R     MOV     DPTR,#rtcClock_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0011         ?C0001:
                                           ; SOURCE LINE # 139
0011 120000      R     LCALL   rtcClock_Enable
                                           ; SOURCE LINE # 140
0014 22                RET     
             ; FUNCTION rtcClock_Start (END)

             ; FUNCTION rtcClock_Stop (BEGIN)
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 168
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
000E 904382            MOV     DPTR,#04382H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 54CF              ANL     A,#0CFH
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0019 900000      R     MOV     DPTR,#interruptState
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 178
0021 22                RET     
             ; FUNCTION rtcClock_Stop (END)

             ; FUNCTION rtcClock_EnableInt (BEGIN)
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 198
0000 9044C0            MOV     DPTR,#044C0H
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 44  

0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0006 22                RET     
             ; FUNCTION rtcClock_EnableInt (END)

             ; FUNCTION rtcClock_DisableInt (BEGIN)
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 219
0000 9044C8            MOV     DPTR,#044C8H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0006 22                RET     
             ; FUNCTION rtcClock_DisableInt (END)

             ; FUNCTION rtcClock_DSTDateConversion (BEGIN)
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0000 900000      R     MOV     DPTR,#week
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0006 900000      R     MOV     DPTR,#day
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
000C 900000      R     MOV     DPTR,#day
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+04H
0014 E0                MOVX    A,@DPTR
0015 FD                MOV     R5,A
0016 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
0019 E0                MOVX    A,@DPTR
001A FA                MOV     R2,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FB                MOV     R3,A
001E 120000      R     LCALL   _rtcClock_DayOfWeek
0021 EF                MOV     A,R7
0022 04                INC     A
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#dayOfWeek
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
0029         ?C0006:
                                           ; SOURCE LINE # 290
0029 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+01H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 900000      R     MOV     DPTR,#dayOfWeek
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 EE                MOV     A,R6
0034 6F                XRL     A,R7
0035 6025              JZ      ?C0009
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
0037 900000      R     MOV     DPTR,#day
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 45  

003A E0                MOVX    A,@DPTR
003B 04                INC     A
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
003D 900000      R     MOV     DPTR,#dayOfWeek
0040 E0                MOVX    A,@DPTR
0041 04                INC     A
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0043 900000      R     MOV     DPTR,#dayOfWeek
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
0049 D3                SETB    C
004A 9407              SUBB    A,#07H
004C 40DB              JC      ?C0006
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
004E 900000      R     MOV     DPTR,#dayOfWeek
0051 7401              MOV     A,#01H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
0054 900000      R     MOV     DPTR,#week
0057 E0                MOVX    A,@DPTR
0058 04                INC     A
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
005A 80CD              SJMP    ?C0006
005C         ?C0009:
                                           ; SOURCE LINE # 301
005C 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+02H
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 900000      R     MOV     DPTR,#week
0064 E0                MOVX    A,@DPTR
0065 FE                MOV     R6,A
0066 EE                MOV     A,R6
0067 6F                XRL     A,R7
0068 600F              JZ      ?C0010
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
006A 900000      R     MOV     DPTR,#day
006D E0                MOVX    A,@DPTR
006E 2407              ADD     A,#07H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
0071 900000      R     MOV     DPTR,#week
0074 E0                MOVX    A,@DPTR
0075 04                INC     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
0077 80E3              SJMP    ?C0009
0079         ?C0010:
                                           ; SOURCE LINE # 306
0079 900000      R     MOV     DPTR,#day
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+03H
0081 EF                MOV     A,R7
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 46  

0083 900000      R     MOV     DPTR,#week
0086 7401              MOV     A,#01H
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
0089 900000      R     MOV     DPTR,#day
008C 7401              MOV     A,#01H
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
008F 900000      R     MOV     DPTR,#day
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+04H
0097 E0                MOVX    A,@DPTR
0098 FD                MOV     R5,A
0099 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
009C E0                MOVX    A,@DPTR
009D FA                MOV     R2,A
009E A3                INC     DPTR
009F E0                MOVX    A,@DPTR
00A0 FB                MOV     R3,A
00A1 120000      R     LCALL   _rtcClock_DayOfWeek
00A4 EF                MOV     A,R7
00A5 04                INC     A
00A6 FF                MOV     R7,A
00A7 900000      R     MOV     DPTR,#dayOfWeek
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
00AC         ?C0011:
                                           ; SOURCE LINE # 338
00AC 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+01H
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 900000      R     MOV     DPTR,#dayOfWeek
00B4 E0                MOVX    A,@DPTR
00B5 FE                MOV     R6,A
00B6 EE                MOV     A,R6
00B7 6F                XRL     A,R7
00B8 6025              JZ      ?C0014
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
00BA 900000      R     MOV     DPTR,#day
00BD E0                MOVX    A,@DPTR
00BE 04                INC     A
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
00C0 900000      R     MOV     DPTR,#dayOfWeek
00C3 E0                MOVX    A,@DPTR
00C4 04                INC     A
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
00C6 900000      R     MOV     DPTR,#dayOfWeek
00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
00CB EF                MOV     A,R7
00CC D3                SETB    C
00CD 9407              SUBB    A,#07H
00CF 40DB              JC      ?C0011
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
00D1 900000      R     MOV     DPTR,#dayOfWeek
00D4 7401              MOV     A,#01H
00D6 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 47  

                                           ; SOURCE LINE # 345
00D7 900000      R     MOV     DPTR,#week
00DA E0                MOVX    A,@DPTR
00DB 04                INC     A
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
00DD 80CD              SJMP    ?C0011
00DF         ?C0014:
                                           ; SOURCE LINE # 349
00DF 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+02H
00E2 E0                MOVX    A,@DPTR
00E3 FF                MOV     R7,A
00E4 900000      R     MOV     DPTR,#week
00E7 E0                MOVX    A,@DPTR
00E8 FE                MOV     R6,A
00E9 EE                MOV     A,R6
00EA 6F                XRL     A,R7
00EB 600F              JZ      ?C0015
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
00ED 900000      R     MOV     DPTR,#day
00F0 E0                MOVX    A,@DPTR
00F1 2407              ADD     A,#07H
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
00F4 900000      R     MOV     DPTR,#week
00F7 E0                MOVX    A,@DPTR
00F8 04                INC     A
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
00FA 80E3              SJMP    ?C0014
00FC         ?C0015:
                                           ; SOURCE LINE # 355
00FC 900000      R     MOV     DPTR,#day
00FF E0                MOVX    A,@DPTR
0100 FF                MOV     R7,A
0101 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+03H
0104 EF                MOV     A,R7
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
0106 22                RET     
             ; FUNCTION rtcClock_DSTDateConversion (END)

             ; FUNCTION rtcClock_Init (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 394
0000 120000      R     LCALL   rtcClock_SetInitValues
                                           ; SOURCE LINE # 397
0003 9044C8            MOV     DPTR,#044C8H
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0009 7C00        E     MOV     R4,#HIGH rtcClock_ISR
000B 7D00        E     MOV     R5,#LOW rtcClock_ISR
000D 7F00              MOV     R7,#00H
000F 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 403
0012 7D07              MOV     R5,#07H
0014 7F00              MOV     R7,#00H
0016 120000      E     LCALL   _CyIntSetPriority
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 48  

                                           ; SOURCE LINE # 404
0019 22                RET     
             ; FUNCTION rtcClock_Init (END)

             ; FUNCTION rtcClock_Enable (BEGIN)
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 432
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 435
0008 904382            MOV     DPTR,#04382H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4430              ORL     A,#030H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
0013 900000      R     MOV     DPTR,#interruptState
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 441
001B 9044C0            MOV     DPTR,#044C0H
001E 7401              MOV     A,#01H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0021 22                RET     
             ; FUNCTION rtcClock_Enable (END)

             ; FUNCTION rtcClock_ReadTime (BEGIN)
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 472
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH rtcClock_currentTimeDate
0004 7900        R     MOV     R1,#LOW rtcClock_currentTimeDate
                                           ; SOURCE LINE # 473
0006         ?C0019:
0006 22                RET     
             ; FUNCTION rtcClock_ReadTime (END)

             ; FUNCTION _rtcClock_WriteTime (BEGIN)
                                           ; SOURCE LINE # 500
0000 900000      R     MOV     DPTR,#timeDate
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 504
0006 120000      R     LCALL   rtcClock_DisableInt
                                           ; SOURCE LINE # 507
0009 900000      R     MOV     DPTR,#timeDate
000C 120000      E     LCALL   ?C?PLDXDATA
000F 120000      E     LCALL   ?C?CLDPTR
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#rtcClock_currentTimeDate
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 49  

0018 900000      R     MOV     DPTR,#timeDate
001B 120000      E     LCALL   ?C?PLDXDATA
001E E9                MOV     A,R1
001F 2401              ADD     A,#01H
0021 F9                MOV     R1,A
0022 EA                MOV     A,R2
0023 3400              ADDC    A,#00H
0025 FA                MOV     R2,A
0026 120000      E     LCALL   ?C?CLDPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
002F 900000      R     MOV     DPTR,#timeDate
0032 120000      E     LCALL   ?C?PLDXDATA
0035 E9                MOV     A,R1
0036 2402              ADD     A,#02H
0038 F9                MOV     R1,A
0039 EA                MOV     A,R2
003A 3400              ADDC    A,#00H
003C FA                MOV     R2,A
003D 120000      E     LCALL   ?C?CLDPTR
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
0046 900000      R     MOV     DPTR,#timeDate
0049 120000      E     LCALL   ?C?PLDXDATA
004C E9                MOV     A,R1
004D 2404              ADD     A,#04H
004F F9                MOV     R1,A
0050 EA                MOV     A,R2
0051 3400              ADDC    A,#00H
0053 FA                MOV     R2,A
0054 120000      E     LCALL   ?C?CLDPTR
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
005D 900000      R     MOV     DPTR,#timeDate
0060 120000      E     LCALL   ?C?PLDXDATA
0063 E9                MOV     A,R1
0064 2407              ADD     A,#07H
0066 F9                MOV     R1,A
0067 EA                MOV     A,R2
0068 3400              ADDC    A,#00H
006A FA                MOV     R2,A
006B 120000      E     LCALL   ?C?CLDPTR
006E FF                MOV     R7,A
006F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
0074 900000      R     MOV     DPTR,#timeDate
0077 120000      E     LCALL   ?C?PLDXDATA
007A E9                MOV     A,R1
007B 2408              ADD     A,#08H
007D F9                MOV     R1,A
007E EA                MOV     A,R2
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 50  

007F 3400              ADDC    A,#00H
0081 FA                MOV     R2,A
0082 120000      E     LCALL   ?C?ILDPTR
0085 FF                MOV     R7,A
0086 AEF0              MOV     R6,B
0088 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
008B EE                MOV     A,R6
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0090 120000      R     LCALL   rtcClock_EnableInt
                                           ; SOURCE LINE # 516
0093 22                RET     
             ; FUNCTION _rtcClock_WriteTime (END)

             ; FUNCTION _rtcClock_WriteSecond (BEGIN)
                                           ; SOURCE LINE # 540
0000 900000      R     MOV     DPTR,#second
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 543
0005 900000      R     MOV     DPTR,#second
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_currentTimeDate
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 544
000F 22                RET     
             ; FUNCTION _rtcClock_WriteSecond (END)

             ; FUNCTION _rtcClock_WriteMinute (BEGIN)
                                           ; SOURCE LINE # 568
0000 900000      R     MOV     DPTR,#minute
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 571
0005 900000      R     MOV     DPTR,#minute
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
000F 22                RET     
             ; FUNCTION _rtcClock_WriteMinute (END)

             ; FUNCTION _rtcClock_WriteHour (BEGIN)
                                           ; SOURCE LINE # 596
0000 900000      R     MOV     DPTR,#hour
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 599
0005 900000      R     MOV     DPTR,#hour
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 51  

000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
000F 22                RET     
             ; FUNCTION _rtcClock_WriteHour (END)

             ; FUNCTION _rtcClock_WriteDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 624
0000 900000      R     MOV     DPTR,#dayOfMonth
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 627
0005 900000      R     MOV     DPTR,#dayOfMonth
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 628
000F 22                RET     
             ; FUNCTION _rtcClock_WriteDayOfMonth (END)

             ; FUNCTION _rtcClock_WriteMonth (BEGIN)
                                           ; SOURCE LINE # 652
0000 900000      R     MOV     DPTR,#month
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 655
0005 900000      R     MOV     DPTR,#month
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 656
000F 22                RET     
             ; FUNCTION _rtcClock_WriteMonth (END)

             ; FUNCTION _rtcClock_WriteYear (BEGIN)
                                           ; SOURCE LINE # 680
0000 900000      R     MOV     DPTR,#year
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 683
0008 900000      R     MOV     DPTR,#year
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
0013 EE                MOV     A,R6
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 52  

                                           ; SOURCE LINE # 684
0018 22                RET     
             ; FUNCTION _rtcClock_WriteYear (END)

             ; FUNCTION _rtcClock_WriteAlarmSecond (BEGIN)
                                           ; SOURCE LINE # 714
0000 900000      R     MOV     DPTR,#second
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 716
0005 900000      R     MOV     DPTR,#second
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 719
000F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0027
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 722
001D 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4401              ORL     A,#01H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 723
002B 22                RET     
002C         ?C0027:
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 727
002C 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FE              ANL     A,#0FEH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 729
003A         ?C0029:
003A 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmSecond (END)

             ; FUNCTION _rtcClock_WriteAlarmMinute (BEGIN)
                                           ; SOURCE LINE # 759
0000 900000      R     MOV     DPTR,#minute
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 53  

                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 761
0005 900000      R     MOV     DPTR,#minute
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+01H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
000F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+01H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0030
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 767
001D 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4402              ORL     A,#02H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
002B 22                RET     
002C         ?C0030:
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 772
002C 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FD              ANL     A,#0FDH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 774
003A         ?C0032:
003A 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmMinute (END)

             ; FUNCTION _rtcClock_WriteAlarmHour (BEGIN)
                                           ; SOURCE LINE # 804
0000 900000      R     MOV     DPTR,#hour
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
0005 900000      R     MOV     DPTR,#hour
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+02H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 809
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 54  

000F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+02H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0033
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 812
001D 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4404              ORL     A,#04H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 813
002B 22                RET     
002C         ?C0033:
                                           ; SOURCE LINE # 815
                                           ; SOURCE LINE # 817
002C 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FB              ANL     A,#0FBH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
003A         ?C0035:
003A 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmHour (END)

             ; FUNCTION _rtcClock_WriteAlarmDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 849
0000 900000      R     MOV     DPTR,#dayOfMonth
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
0005 900000      R     MOV     DPTR,#dayOfMonth
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+04H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
000F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+04H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0036
                                           ; SOURCE LINE # 855
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 55  

                                           ; SOURCE LINE # 857
001D 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4410              ORL     A,#010H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
002B 22                RET     
002C         ?C0036:
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 862
002C 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54EF              ANL     A,#0EFH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 864
003A         ?C0038:
003A 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmDayOfMonth (END)

             ; FUNCTION _rtcClock_WriteAlarmMonth (BEGIN)
                                           ; SOURCE LINE # 894
0000 900000      R     MOV     DPTR,#month
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 896
0005 900000      R     MOV     DPTR,#month
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+07H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 899
000F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+07H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0039
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 902
001D 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4440              ORL     A,#040H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0029 EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 56  

002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 903
002B 22                RET     
002C         ?C0039:
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 907
002C 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54BF              ANL     A,#0BFH
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 909
003A         ?C0041:
003A 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmMonth (END)

             ; FUNCTION _rtcClock_WriteAlarmYear (BEGIN)
                                           ; SOURCE LINE # 939
0000 900000      R     MOV     DPTR,#year
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 941
0008 900000      R     MOV     DPTR,#year
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+08H
0013 EE                MOV     A,R6
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 944
0018 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+08H
0023 E0                MOVX    A,@DPTR
0024 FC                MOV     R4,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FD                MOV     R5,A
0028 ED                MOV     A,R5
0029 B50713            CJNE    A,AR7,?C0042
002C EC                MOV     A,R4
002D B5060F            CJNE    A,AR6,?C0042
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 947
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 57  

0030 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 4480              ORL     A,#080H
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 948
003E 22                RET     
003F         ?C0042:
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 952
003F 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 547F              ANL     A,#07FH
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 954
004D         ?C0044:
004D 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmYear (END)

             ; FUNCTION _rtcClock_WriteAlarmDayOfWeek (BEGIN)
                                           ; SOURCE LINE # 985
0000 900000      R     MOV     DPTR,#dayOfWeek
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 986
                                           ; SOURCE LINE # 987
0005 900000      R     MOV     DPTR,#dayOfWeek
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+03H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 990
000F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+03H
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 EE                MOV     A,R6
001A B5070F            CJNE    A,AR7,?C0045
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 993
001D 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 4408              ORL     A,#08H
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 58  

                                           ; SOURCE LINE # 994
002B 22                RET     
002C         ?C0045:
                                           ; SOURCE LINE # 996
                                           ; SOURCE LINE # 998
002C 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54F7              ANL     A,#0F7H
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
003A         ?C0047:
003A 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmDayOfWeek (END)

             ; FUNCTION _rtcClock_WriteAlarmDayOfYear (BEGIN)
                                           ; SOURCE LINE # 1030
0000 900000      R     MOV     DPTR,#dayOfYear
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1032
0008 900000      R     MOV     DPTR,#dayOfYear
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+05H
0013 EE                MOV     A,R6
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
0018 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+05H
0023 E0                MOVX    A,@DPTR
0024 FC                MOV     R4,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FD                MOV     R5,A
0028 ED                MOV     A,R5
0029 B50713            CJNE    A,AR7,?C0048
002C EC                MOV     A,R4
002D B5060F            CJNE    A,AR6,?C0048
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1038
0030 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 59  

0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 4420              ORL     A,#020H
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1039
003E 22                RET     
003F         ?C0048:
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1043
003F 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 54DF              ANL     A,#0DFH
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1044
                                           ; SOURCE LINE # 1045
004D         ?C0050:
004D 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmDayOfYear (END)

             ; FUNCTION rtcClock_ReadSecond (BEGIN)
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1068
0000 900000      R     MOV     DPTR,#rtcClock_currentTimeDate
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1069
0005         ?C0051:
0005 22                RET     
             ; FUNCTION rtcClock_ReadSecond (END)

             ; FUNCTION rtcClock_ReadMinute (BEGIN)
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1092
0000 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1093
0005         ?C0052:
0005 22                RET     
             ; FUNCTION rtcClock_ReadMinute (END)

             ; FUNCTION rtcClock_ReadHour (BEGIN)
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1116
0000 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1117
0005         ?C0053:
0005 22                RET     
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 60  

             ; FUNCTION rtcClock_ReadHour (END)

             ; FUNCTION rtcClock_ReadDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 1139
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1142
0000 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1143
0005         ?C0054:
0005 22                RET     
             ; FUNCTION rtcClock_ReadDayOfMonth (END)

             ; FUNCTION rtcClock_ReadMonth (BEGIN)
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
                                           ; SOURCE LINE # 1166
0000 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1167
0005         ?C0055:
0005 22                RET     
             ; FUNCTION rtcClock_ReadMonth (END)

             ; FUNCTION rtcClock_ReadYear (BEGIN)
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1190
0000 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 1191
0008         ?C0056:
0008 22                RET     
             ; FUNCTION rtcClock_ReadYear (END)

             ; FUNCTION rtcClock_ReadAlarmSecond (BEGIN)
                                           ; SOURCE LINE # 1212
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1215
0000 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1216
0005         ?C0057:
0005 22                RET     
             ; FUNCTION rtcClock_ReadAlarmSecond (END)

             ; FUNCTION rtcClock_ReadAlarmMinute (BEGIN)
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1237
                                           ; SOURCE LINE # 1239
0000 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1240
0005         ?C0058:
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 61  

0005 22                RET     
             ; FUNCTION rtcClock_ReadAlarmMinute (END)

             ; FUNCTION rtcClock_ReadAlarmHour (BEGIN)
                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1261
                                           ; SOURCE LINE # 1263
0000 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+02H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1264
0005         ?C0059:
0005 22                RET     
             ; FUNCTION rtcClock_ReadAlarmHour (END)

             ; FUNCTION rtcClock_ReadAlarmDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1288
0000 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+04H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1289
0005         ?C0060:
0005 22                RET     
             ; FUNCTION rtcClock_ReadAlarmDayOfMonth (END)

             ; FUNCTION rtcClock_ReadAlarmMonth (BEGIN)
                                           ; SOURCE LINE # 1310
                                           ; SOURCE LINE # 1311
                                           ; SOURCE LINE # 1313
0000 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+07H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1314
0005         ?C0061:
0005 22                RET     
             ; FUNCTION rtcClock_ReadAlarmMonth (END)

             ; FUNCTION rtcClock_ReadAlarmYear (BEGIN)
                                           ; SOURCE LINE # 1334
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1337
0000 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+08H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 1338
0008         ?C0062:
0008 22                RET     
             ; FUNCTION rtcClock_ReadAlarmYear (END)

             ; FUNCTION rtcClock_ReadAlarmDayOfWeek (BEGIN)
                                           ; SOURCE LINE # 1359
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1362
0000 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+03H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1363
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 62  

0005         ?C0063:
0005 22                RET     
             ; FUNCTION rtcClock_ReadAlarmDayOfWeek (END)

             ; FUNCTION rtcClock_ReadAlarmDayOfYear (BEGIN)
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1387
0000 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+05H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 1388
0008         ?C0064:
0008 22                RET     
             ; FUNCTION rtcClock_ReadAlarmDayOfYear (END)

             ; FUNCTION _rtcClock_WriteAlarmMask (BEGIN)
                                           ; SOURCE LINE # 1413
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1414
                                           ; SOURCE LINE # 1415
0005 900000      R     MOV     DPTR,#mask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1416
000F 22                RET     
             ; FUNCTION _rtcClock_WriteAlarmMask (END)

             ; FUNCTION _rtcClock_WriteIntervalMask (BEGIN)
                                           ; SOURCE LINE # 1441
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1442
                                           ; SOURCE LINE # 1443
0005 900000      R     MOV     DPTR,#mask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_intervalCfgMask
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1444
000F 22                RET     
             ; FUNCTION _rtcClock_WriteIntervalMask (END)

             ; FUNCTION rtcClock_ReadStatus (BEGIN)
                                           ; SOURCE LINE # 1472
                                           ; SOURCE LINE # 1473
                                           ; SOURCE LINE # 1477
0000 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#status
0008 EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 63  

0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1480
000A 900000      R     MOV     DPTR,#rtcClock_statusDateTime
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 54F7              ANL     A,#0F7H
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1482
0018 900000      R     MOV     DPTR,#status
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 1483
001D         ?C0067:
001D 22                RET     
             ; FUNCTION rtcClock_ReadStatus (END)

             ; FUNCTION _rtcClock_DayOfWeek (BEGIN)
                                           ; SOURCE LINE # 1502
0000 900000      R     MOV     DPTR,#dayOfMonth
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#month
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#year
000D EA                MOV     A,R2
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EB                MOV     A,R3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1504
                                           ; SOURCE LINE # 1512
0012 900000      R     MOV     DPTR,#month
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 C3                CLR     C
0019 9403              SUBB    A,#03H
001B 500B              JNC     ?C0068
                                           ; SOURCE LINE # 1513
                                           ; SOURCE LINE # 1514
001D 900000      R     MOV     DPTR,#year
0020 74FF              MOV     A,#0FFH
0022 75F0FF            MOV     B,#0FFH
0025 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1515
0028         ?C0068:
                                           ; SOURCE LINE # 1519
0028 900000      R     MOV     DPTR,#year
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 7C00              MOV     R4,#00H
0032 7D64              MOV     R5,#064H
0034 120000      E     LCALL   ?C?UIDIV
0037 AC06              MOV     R4,AR6
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 64  

0039 AD07              MOV     R5,AR7
003B 900000      R     MOV     DPTR,#year
003E E0                MOVX    A,@DPTR
003F FE                MOV     R6,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 EF                MOV     A,R7
0044 7802              MOV     R0,#02H
0046         ?C0229:
0046 CE                XCH     A,R6
0047 C3                CLR     C
0048 13                RRC     A
0049 CE                XCH     A,R6
004A 13                RRC     A
004B D8F9              DJNZ    R0,?C0229
004D FF                MOV     R7,A
004E C3                CLR     C
004F EF                MOV     A,R7
0050 9D                SUBB    A,R5
0051 FB                MOV     R3,A
0052 EE                MOV     A,R6
0053 9C                SUBB    A,R4
0054 FA                MOV     R2,A
0055 900000      R     MOV     DPTR,#year
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7C01              MOV     R4,#01H
005F 7D90              MOV     R5,#090H
0061 120000      E     LCALL   ?C?UIDIV
0064 EF                MOV     A,R7
0065 2B                ADD     A,R3
0066 FF                MOV     R7,A
0067 EE                MOV     A,R6
0068 3A                ADDC    A,R2
0069 FE                MOV     R6,A
006A 900000      R     MOV     DPTR,#year
006D E0                MOVX    A,@DPTR
006E FC                MOV     R4,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 EF                MOV     A,R7
0073 2D                ADD     A,R5
0074 FF                MOV     R7,A
0075 EE                MOV     A,R6
0076 3C                ADDC    A,R4
0077 FE                MOV     R6,A
0078 900000      R     MOV     DPTR,#month
007B E0                MOVX    A,@DPTR
007C FD                MOV     R5,A
007D ED                MOV     A,R5
007E 900000      R     MOV     DPTR,#rtcClock_monthTemplate-01H
0081 93                MOVC    A,@A+DPTR
0082 FD                MOV     R5,A
0083 7C00              MOV     R4,#00H
0085 900000      R     MOV     DPTR,#dayOfMonth
0088 E0                MOVX    A,@DPTR
0089 FB                MOV     R3,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 65  

008A 7A00              MOV     R2,#00H
008C ED                MOV     A,R5
008D 2B                ADD     A,R3
008E FD                MOV     R5,A
008F EC                MOV     A,R4
0090 3A                ADDC    A,R2
0091 FC                MOV     R4,A
0092 EF                MOV     A,R7
0093 2D                ADD     A,R5
0094 FF                MOV     R7,A
0095 EE                MOV     A,R6
0096 3C                ADDC    A,R4
0097 FE                MOV     R6,A
0098 7C00              MOV     R4,#00H
009A 7D07              MOV     R5,#07H
009C 120000      E     LCALL   ?C?UIDIV
009F AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 1520
00A1         ?C0069:
00A1 22                RET     
             ; FUNCTION _rtcClock_DayOfWeek (END)

             ; FUNCTION rtcClock_SetInitValues (BEGIN)
                                           ; SOURCE LINE # 1560
                                           ; SOURCE LINE # 1561
                                           ; SOURCE LINE # 1566
0000 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1569
0008 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 7E00              MOV     R6,#00H
000F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
0012 EE                MOV     A,R6
0013 8FF0              MOV     B,R7
0015 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1572
0018 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 7C01              MOV     R4,#01H
0022 7D90              MOV     R5,#090H
0024 120000      E     LCALL   ?C?UIDIV
0027 ED                MOV     A,R5
0028 4C                ORL     A,R4
0029 6025              JZ      ?C0073
002B 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
002E E0                MOVX    A,@DPTR
002F FE                MOV     R6,A
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 7E00              MOV     R6,#00H
0035 EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 66  

0036 5403              ANL     A,#03H
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 4E                ORL     A,R6
003B 7017              JNZ     ?C0071
003D 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 7C00              MOV     R4,#00H
0047 7D64              MOV     R5,#064H
0049 120000      E     LCALL   ?C?UIDIV
004C ED                MOV     A,R5
004D 4C                ORL     A,R4
004E 6004              JZ      ?C0071
0050         ?C0073:
0050 7F01              MOV     R7,#01H
0052 8002              SJMP    ?C0072
0054         ?C0071:
0054 7F00              MOV     R7,#00H
0056         ?C0072:
0056 EF                MOV     A,R7
0057 B40110            CJNE    A,#01H,?C0070
                                           ; SOURCE LINE # 1573
                                           ; SOURCE LINE # 1575
005A 900000      R     MOV     DPTR,#rtcClock_statusDateTime
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 4402              ORL     A,#02H
0062 FF                MOV     R7,A
0063 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1576
0068 800E              SJMP    ?C0074
006A         ?C0070:
                                           ; SOURCE LINE # 1578
                                           ; SOURCE LINE # 1580
006A 900000      R     MOV     DPTR,#rtcClock_statusDateTime
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 54FD              ANL     A,#0FDH
0072 FF                MOV     R7,A
0073 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1581
0078         ?C0074:
                                           ; SOURCE LINE # 1584
0078 900000      R     MOV     DPTR,#i
007B E4                CLR     A
007C F0                MOVX    @DPTR,A
007D         ?C0075:
007D 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 7E00              MOV     R6,#00H
0084 EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 67  

0085 24FF              ADD     A,#0FFH
0087 FF                MOV     R7,A
0088 EE                MOV     A,R6
0089 34FF              ADDC    A,#0FFH
008B FE                MOV     R6,A
008C 900000      R     MOV     DPTR,#i
008F E0                MOVX    A,@DPTR
0090 FD                MOV     R5,A
0091 7C00              MOV     R4,#00H
0093 C3                CLR     C
0094 ED                MOV     A,R5
0095 9F                SUBB    A,R7
0096 EC                MOV     A,R4
0097 9E                SUBB    A,R6
0098 501E              JNC     ?C0076
                                           ; SOURCE LINE # 1585
                                           ; SOURCE LINE # 1587
009A 900000      R     MOV     DPTR,#i
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F EF                MOV     A,R7
00A0 900000      R     MOV     DPTR,#rtcClock_daysInMonths
00A3 93                MOVC    A,@A+DPTR
00A4 FF                MOV     R7,A
00A5 7E00              MOV     R6,#00H
00A7 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
00AA EE                MOV     A,R6
00AB 8FF0              MOV     B,R7
00AD 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1588
00B0 900000      R     MOV     DPTR,#i
00B3 E0                MOVX    A,@DPTR
00B4 04                INC     A
00B5 F0                MOVX    @DPTR,A
00B6 80C5              SJMP    ?C0075
00B8         ?C0076:
                                           ; SOURCE LINE # 1591
00B8 900000      R     MOV     DPTR,#rtcClock_statusDateTime
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
00BD EF                MOV     A,R7
00BE 5402              ANL     A,#02H
00C0 FF                MOV     R7,A
00C1 7E00              MOV     R6,#00H
00C3 EF                MOV     A,R7
00C4 6402              XRL     A,#02H
00C6 4E                ORL     A,R6
00C7 7004              JNZ     ?C0079
00C9 7F01              MOV     R7,#01H
00CB 8002              SJMP    ?C0080
00CD         ?C0079:
00CD 7F00              MOV     R7,#00H
00CF         ?C0080:
00CF EF                MOV     A,R7
00D0 6015              JZ      ?C0078
                                           ; SOURCE LINE # 1592
                                           ; SOURCE LINE # 1594
00D2 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 D3                SETB    C
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 68  

00D9 9402              SUBB    A,#02H
00DB 400A              JC      ?C0078
                                           ; SOURCE LINE # 1595
                                           ; SOURCE LINE # 1597
00DD 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
00E0 E4                CLR     A
00E1 75F001            MOV     B,#01H
00E4 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1598
                                           ; SOURCE LINE # 1599
00E7         ?C0078:
                                           ; SOURCE LINE # 1602
00E7 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
00EA E0                MOVX    A,@DPTR
00EB FF                MOV     R7,A
00EC 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
00EF E0                MOVX    A,@DPTR
00F0 FD                MOV     R5,A
00F1 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
00F4 E0                MOVX    A,@DPTR
00F5 FA                MOV     R2,A
00F6 A3                INC     DPTR
00F7 E0                MOVX    A,@DPTR
00F8 FB                MOV     R3,A
00F9 120000      R     LCALL   _rtcClock_DayOfWeek
00FC EF                MOV     A,R7
00FD 04                INC     A
00FE FF                MOV     R7,A
00FF 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
0102 EF                MOV     A,R7
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1607
0104 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 EF                MOV     A,R7
010A D3                SETB    C
010B 9400              SUBB    A,#00H
010D 4009              JC      ?C0082
                                           ; SOURCE LINE # 1608
                                           ; SOURCE LINE # 1609
010F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
0112 E0                MOVX    A,@DPTR
0113 2400              ADD     A,#00H
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1610
0116 8013              SJMP    ?C0083
0118         ?C0082:
                                           ; SOURCE LINE # 1612
                                           ; SOURCE LINE # 1613
0118 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
011B E0                MOVX    A,@DPTR
011C FF                MOV     R7,A
011D EF                MOV     A,R7
011E F4                CPL     A
011F 04                INC     A
0120 FF                MOV     R7,A
0121 C3                CLR     C
0122 7407              MOV     A,#07H
0124 9F                SUBB    A,R7
0125 FF                MOV     R7,A
0126 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 69  

0129 EF                MOV     A,R7
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1615
012B         ?C0083:
                                           ; SOURCE LINE # 1620
012B 900000      R     MOV     DPTR,#rtcClock_dstModeType
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 EF                MOV     A,R7
0131 5402              ANL     A,#02H
0133 FF                MOV     R7,A
0134 7E00              MOV     R6,#00H
0136 EF                MOV     A,R7
0137 6402              XRL     A,#02H
0139 4E                ORL     A,R6
013A 7004              JNZ     ?C0085
013C 7F01              MOV     R7,#01H
013E 8002              SJMP    ?C0086
0140         ?C0085:
0140 7F00              MOV     R7,#00H
0142         ?C0086:
0142 EF                MOV     A,R7
0143 6003              JZ      ?C0084
                                           ; SOURCE LINE # 1621
                                           ; SOURCE LINE # 1622
0145 120000      R     LCALL   rtcClock_DSTDateConversion
                                           ; SOURCE LINE # 1623
0148         ?C0084:
                                           ; SOURCE LINE # 1626
0148 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+04H
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0150 E0                MOVX    A,@DPTR
0151 FE                MOV     R6,A
0152 EE                MOV     A,R6
0153 D3                SETB    C
0154 9F                SUBB    A,R7
0155 4010              JC      ?C0087
                                           ; SOURCE LINE # 1627
                                           ; SOURCE LINE # 1628
0157 900000      R     MOV     DPTR,#rtcClock_statusDateTime
015A E0                MOVX    A,@DPTR
015B FF                MOV     R7,A
015C EF                MOV     A,R7
015D 4401              ORL     A,#01H
015F FF                MOV     R7,A
0160 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0163 EF                MOV     A,R7
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1629
0165 8058              SJMP    ?C0088
0167         ?C0087:
                                           ; SOURCE LINE # 1630
0167 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+04H
016A E0                MOVX    A,@DPTR
016B FF                MOV     R7,A
016C 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
016F E0                MOVX    A,@DPTR
0170 FE                MOV     R6,A
0171 EE                MOV     A,R6
0172 6F                XRL     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 70  

0173 704A              JNZ     ?C0088
                                           ; SOURCE LINE # 1631
                                           ; SOURCE LINE # 1632
0175 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+03H
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
017D E0                MOVX    A,@DPTR
017E FE                MOV     R6,A
017F EE                MOV     A,R6
0180 D3                SETB    C
0181 9F                SUBB    A,R7
0182 4010              JC      ?C0090
                                           ; SOURCE LINE # 1633
                                           ; SOURCE LINE # 1634
0184 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0187 E0                MOVX    A,@DPTR
0188 FF                MOV     R7,A
0189 EF                MOV     A,R7
018A 4401              ORL     A,#01H
018C FF                MOV     R7,A
018D 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0190 EF                MOV     A,R7
0191 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1635
0192 802B              SJMP    ?C0088
0194         ?C0090:
                                           ; SOURCE LINE # 1636
0194 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+03H
0197 E0                MOVX    A,@DPTR
0198 FF                MOV     R7,A
0199 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
019C E0                MOVX    A,@DPTR
019D FE                MOV     R6,A
019E EE                MOV     A,R6
019F B5071D            CJNE    A,AR7,?C0088
                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1638
01A2 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart
01A5 E0                MOVX    A,@DPTR
01A6 FF                MOV     R7,A
01A7 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
01AA E0                MOVX    A,@DPTR
01AB FE                MOV     R6,A
01AC EE                MOV     A,R6
01AD D3                SETB    C
01AE 9F                SUBB    A,R7
01AF 400E              JC      ?C0088
                                           ; SOURCE LINE # 1639
                                           ; SOURCE LINE # 1640
01B1 900000      R     MOV     DPTR,#rtcClock_statusDateTime
01B4 E0                MOVX    A,@DPTR
01B5 FF                MOV     R7,A
01B6 EF                MOV     A,R7
01B7 4401              ORL     A,#01H
01B9 FF                MOV     R7,A
01BA 900000      R     MOV     DPTR,#rtcClock_statusDateTime
01BD EF                MOV     A,R7
01BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1641
                                           ; SOURCE LINE # 1642
                                           ; SOURCE LINE # 1644
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 71  

                                           ; SOURCE LINE # 1646
                                           ; SOURCE LINE # 1647
                                           ; SOURCE LINE # 1649
                                           ; SOURCE LINE # 1651
01BF         ?C0088:
                                           ; SOURCE LINE # 1654
01BF 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+04H
01C2 E0                MOVX    A,@DPTR
01C3 FF                MOV     R7,A
01C4 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
01C7 E0                MOVX    A,@DPTR
01C8 FE                MOV     R6,A
01C9 EE                MOV     A,R6
01CA D3                SETB    C
01CB 9F                SUBB    A,R7
01CC 4010              JC      ?C0096
                                           ; SOURCE LINE # 1655
                                           ; SOURCE LINE # 1656
01CE 900000      R     MOV     DPTR,#rtcClock_statusDateTime
01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 EF                MOV     A,R7
01D4 54FE              ANL     A,#0FEH
01D6 FF                MOV     R7,A
01D7 900000      R     MOV     DPTR,#rtcClock_statusDateTime
01DA EF                MOV     A,R7
01DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1657
01DC 8058              SJMP    ?C0097
01DE         ?C0096:
                                           ; SOURCE LINE # 1658
01DE 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+04H
01E1 E0                MOVX    A,@DPTR
01E2 FF                MOV     R7,A
01E3 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
01E6 E0                MOVX    A,@DPTR
01E7 FE                MOV     R6,A
01E8 EE                MOV     A,R6
01E9 6F                XRL     A,R7
01EA 704A              JNZ     ?C0097
                                           ; SOURCE LINE # 1659
                                           ; SOURCE LINE # 1660
01EC 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+03H
01EF E0                MOVX    A,@DPTR
01F0 FF                MOV     R7,A
01F1 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
01F4 E0                MOVX    A,@DPTR
01F5 FE                MOV     R6,A
01F6 EE                MOV     A,R6
01F7 D3                SETB    C
01F8 9F                SUBB    A,R7
01F9 4010              JC      ?C0099
                                           ; SOURCE LINE # 1661
                                           ; SOURCE LINE # 1662
01FB 900000      R     MOV     DPTR,#rtcClock_statusDateTime
01FE E0                MOVX    A,@DPTR
01FF FF                MOV     R7,A
0200 EF                MOV     A,R7
0201 54FE              ANL     A,#0FEH
0203 FF                MOV     R7,A
0204 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0207 EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 72  

0208 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1663
0209 802B              SJMP    ?C0097
020B         ?C0099:
                                           ; SOURCE LINE # 1664
020B 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+03H
020E E0                MOVX    A,@DPTR
020F FF                MOV     R7,A
0210 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
0213 E0                MOVX    A,@DPTR
0214 FE                MOV     R6,A
0215 EE                MOV     A,R6
0216 B5071D            CJNE    A,AR7,?C0097
                                           ; SOURCE LINE # 1665
                                           ; SOURCE LINE # 1666
0219 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop
021C E0                MOVX    A,@DPTR
021D FF                MOV     R7,A
021E 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
0221 E0                MOVX    A,@DPTR
0222 FE                MOV     R6,A
0223 EE                MOV     A,R6
0224 D3                SETB    C
0225 9F                SUBB    A,R7
0226 400E              JC      ?C0097
                                           ; SOURCE LINE # 1667
                                           ; SOURCE LINE # 1668
0228 900000      R     MOV     DPTR,#rtcClock_statusDateTime
022B E0                MOVX    A,@DPTR
022C FF                MOV     R7,A
022D EF                MOV     A,R7
022E 54FE              ANL     A,#0FEH
0230 FF                MOV     R7,A
0231 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0234 EF                MOV     A,R7
0235 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1669
                                           ; SOURCE LINE # 1670
                                           ; SOURCE LINE # 1672
                                           ; SOURCE LINE # 1674
                                           ; SOURCE LINE # 1675
                                           ; SOURCE LINE # 1677
                                           ; SOURCE LINE # 1679
0236         ?C0097:
                                           ; SOURCE LINE # 1682
0236 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
0239 E4                CLR     A
023A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1683
023B 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
023E E4                CLR     A
023F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1688
0240 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0243 E0                MOVX    A,@DPTR
0244 FF                MOV     R7,A
0245 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+04H
0248 E0                MOVX    A,@DPTR
0249 FE                MOV     R6,A
024A EE                MOV     A,R6
024B B50710            CJNE    A,AR7,?C0105
                                           ; SOURCE LINE # 1689
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 73  

                                           ; SOURCE LINE # 1690
024E 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
0251 E0                MOVX    A,@DPTR
0252 FF                MOV     R7,A
0253 EF                MOV     A,R7
0254 4404              ORL     A,#04H
0256 FF                MOV     R7,A
0257 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
025A EF                MOV     A,R7
025B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1691
025C 800E              SJMP    ?C0106
025E         ?C0105:
                                           ; SOURCE LINE # 1693
                                           ; SOURCE LINE # 1694
025E 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
0261 E0                MOVX    A,@DPTR
0262 FF                MOV     R7,A
0263 EF                MOV     A,R7
0264 54FB              ANL     A,#0FBH
0266 FF                MOV     R7,A
0267 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
026A EF                MOV     A,R7
026B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1695
026C         ?C0106:
                                           ; SOURCE LINE # 1700
026C 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
026F E0                MOVX    A,@DPTR
0270 FF                MOV     R7,A
0271 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+04H
0274 E0                MOVX    A,@DPTR
0275 FE                MOV     R6,A
0276 EE                MOV     A,R6
0277 B50710            CJNE    A,AR7,?C0107
                                           ; SOURCE LINE # 1701
                                           ; SOURCE LINE # 1702
027A 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
027D E0                MOVX    A,@DPTR
027E FF                MOV     R7,A
027F EF                MOV     A,R7
0280 4404              ORL     A,#04H
0282 FF                MOV     R7,A
0283 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
0286 EF                MOV     A,R7
0287 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1703
0288 800E              SJMP    ?C0108
028A         ?C0107:
                                           ; SOURCE LINE # 1705
                                           ; SOURCE LINE # 1706
028A 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
028D E0                MOVX    A,@DPTR
028E FF                MOV     R7,A
028F EF                MOV     A,R7
0290 54FB              ANL     A,#0FBH
0292 FF                MOV     R7,A
0293 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
0296 EF                MOV     A,R7
0297 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1707
0298         ?C0108:
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 74  

                                           ; SOURCE LINE # 1712
0298 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
029B E0                MOVX    A,@DPTR
029C FF                MOV     R7,A
029D 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+03H
02A0 E0                MOVX    A,@DPTR
02A1 FE                MOV     R6,A
02A2 EE                MOV     A,R6
02A3 B50710            CJNE    A,AR7,?C0109
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1714
02A6 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
02A9 E0                MOVX    A,@DPTR
02AA FF                MOV     R7,A
02AB EF                MOV     A,R7
02AC 4402              ORL     A,#02H
02AE FF                MOV     R7,A
02AF 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
02B2 EF                MOV     A,R7
02B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1715
02B4 800E              SJMP    ?C0110
02B6         ?C0109:
                                           ; SOURCE LINE # 1717
                                           ; SOURCE LINE # 1718
02B6 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
02B9 E0                MOVX    A,@DPTR
02BA FF                MOV     R7,A
02BB EF                MOV     A,R7
02BC 54FD              ANL     A,#0FDH
02BE FF                MOV     R7,A
02BF 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
02C2 EF                MOV     A,R7
02C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1719
02C4         ?C0110:
                                           ; SOURCE LINE # 1724
02C4 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
02C7 E0                MOVX    A,@DPTR
02C8 FF                MOV     R7,A
02C9 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+03H
02CC E0                MOVX    A,@DPTR
02CD FE                MOV     R6,A
02CE EE                MOV     A,R6
02CF B50710            CJNE    A,AR7,?C0111
                                           ; SOURCE LINE # 1725
                                           ; SOURCE LINE # 1726
02D2 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
02D5 E0                MOVX    A,@DPTR
02D6 FF                MOV     R7,A
02D7 EF                MOV     A,R7
02D8 4402              ORL     A,#02H
02DA FF                MOV     R7,A
02DB 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
02DE EF                MOV     A,R7
02DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1727
02E0 800E              SJMP    ?C0112
02E2         ?C0111:
                                           ; SOURCE LINE # 1729
                                           ; SOURCE LINE # 1730
02E2 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 75  

02E5 E0                MOVX    A,@DPTR
02E6 FF                MOV     R7,A
02E7 EF                MOV     A,R7
02E8 54FD              ANL     A,#0FDH
02EA FF                MOV     R7,A
02EB 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
02EE EF                MOV     A,R7
02EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1731
02F0         ?C0112:
                                           ; SOURCE LINE # 1736
02F0 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
02F3 E0                MOVX    A,@DPTR
02F4 FF                MOV     R7,A
02F5 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop
02F8 E0                MOVX    A,@DPTR
02F9 FE                MOV     R6,A
02FA EE                MOV     A,R6
02FB B50710            CJNE    A,AR7,?C0113
                                           ; SOURCE LINE # 1737
                                           ; SOURCE LINE # 1738
02FE 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
0301 E0                MOVX    A,@DPTR
0302 FF                MOV     R7,A
0303 EF                MOV     A,R7
0304 4401              ORL     A,#01H
0306 FF                MOV     R7,A
0307 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
030A EF                MOV     A,R7
030B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1739
030C 800E              SJMP    ?C0114
030E         ?C0113:
                                           ; SOURCE LINE # 1741
                                           ; SOURCE LINE # 1742
030E 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
0311 E0                MOVX    A,@DPTR
0312 FF                MOV     R7,A
0313 EF                MOV     A,R7
0314 54FE              ANL     A,#0FEH
0316 FF                MOV     R7,A
0317 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
031A EF                MOV     A,R7
031B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1743
031C         ?C0114:
                                           ; SOURCE LINE # 1748
031C 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
031F E0                MOVX    A,@DPTR
0320 FF                MOV     R7,A
0321 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart
0324 E0                MOVX    A,@DPTR
0325 FE                MOV     R6,A
0326 EE                MOV     A,R6
0327 B50710            CJNE    A,AR7,?C0115
                                           ; SOURCE LINE # 1749
                                           ; SOURCE LINE # 1750
032A 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
032D E0                MOVX    A,@DPTR
032E FF                MOV     R7,A
032F EF                MOV     A,R7
0330 4401              ORL     A,#01H
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 76  

0332 FF                MOV     R7,A
0333 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
0336 EF                MOV     A,R7
0337 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1751
0338 800E              SJMP    ?C0116
033A         ?C0115:
                                           ; SOURCE LINE # 1753
                                           ; SOURCE LINE # 1754
033A 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
033D E0                MOVX    A,@DPTR
033E FF                MOV     R7,A
033F EF                MOV     A,R7
0340 54FE              ANL     A,#0FEH
0342 FF                MOV     R7,A
0343 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
0346 EF                MOV     A,R7
0347 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1755
0348         ?C0116:
                                           ; SOURCE LINE # 1758
0348 900000      R     MOV     DPTR,#rtcClock_dstModeType
034B E0                MOVX    A,@DPTR
034C FF                MOV     R7,A
034D EF                MOV     A,R7
034E 5401              ANL     A,#01H
0350 FF                MOV     R7,A
0351 7E00              MOV     R6,#00H
0353 EF                MOV     A,R7
0354 6401              XRL     A,#01H
0356 4E                ORL     A,R6
0357 7004              JNZ     ?C0118
0359 7F01              MOV     R7,#01H
035B 8002              SJMP    ?C0119
035D         ?C0118:
035D 7F00              MOV     R7,#00H
035F         ?C0119:
035F EF                MOV     A,R7
0360 7003              JNZ     $ + 5H
0362 020000      R     LJMP    ?C0117
                                           ; SOURCE LINE # 1759
                                           ; SOURCE LINE # 1760
0365 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0368 E0                MOVX    A,@DPTR
0369 FF                MOV     R7,A
036A EF                MOV     A,R7
036B 5401              ANL     A,#01H
036D FF                MOV     R7,A
036E 7E00              MOV     R6,#00H
0370 EF                MOV     A,R7
0371 6401              XRL     A,#01H
0373 4E                ORL     A,R6
0374 7004              JNZ     ?C0121
0376 7F01              MOV     R7,#01H
0378 8002              SJMP    ?C0122
037A         ?C0121:
037A 7F00              MOV     R7,#00H
037C         ?C0122:
037C EF                MOV     A,R7
037D 7003              JNZ     $ + 5H
037F 020000      R     LJMP    ?C0120
                                           ; SOURCE LINE # 1761
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 77  

                                           ; SOURCE LINE # 1762
0382 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
0385 E0                MOVX    A,@DPTR
0386 FF                MOV     R7,A
0387 EF                MOV     A,R7
0388 5407              ANL     A,#07H
038A FF                MOV     R7,A
038B 7E00              MOV     R6,#00H
038D EF                MOV     A,R7
038E 6407              XRL     A,#07H
0390 4E                ORL     A,R6
0391 7004              JNZ     ?C0124
0393 7F01              MOV     R7,#01H
0395 8002              SJMP    ?C0125
0397         ?C0124:
0397 7F00              MOV     R7,#00H
0399         ?C0125:
0399 EF                MOV     A,R7
039A 7003              JNZ     $ + 5H
039C 020000      R     LJMP    ?C0117
                                           ; SOURCE LINE # 1764
                                           ; SOURCE LINE # 1768
039F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
03A2 E0                MOVX    A,@DPTR
03A3 FB                MOV     R3,A
03A4 900000      R     MOV     DPTR,#rtcClock_dstOffsetMin
03A7 E0                MOVX    A,@DPTR
03A8 FF                MOV     R7,A
03A9 7E00              MOV     R6,#00H
03AB 7C00              MOV     R4,#00H
03AD 7D3C              MOV     R5,#03CH
03AF 120000      E     LCALL   ?C?UIDIV
03B2 AF05              MOV     R7,AR5
03B4 C3                CLR     C
03B5 EB                MOV     A,R3
03B6 9F                SUBB    A,R7
03B7 FF                MOV     R7,A
03B8 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
03BB EF                MOV     A,R7
03BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1774
03BD 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
03C0 E0                MOVX    A,@DPTR
03C1 FF                MOV     R7,A
03C2 EF                MOV     A,R7
03C3 D3                SETB    C
03C4 943B              SUBB    A,#03BH
03C6 4018              JC      ?C0126
                                           ; SOURCE LINE # 1775
                                           ; SOURCE LINE # 1778
03C8 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
03CB E0                MOVX    A,@DPTR
03CC FF                MOV     R7,A
03CD EF                MOV     A,R7
03CE F4                CPL     A
03CF FF                MOV     R7,A
03D0 C3                CLR     C
03D1 743B              MOV     A,#03BH
03D3 9F                SUBB    A,R7
03D4 FF                MOV     R7,A
03D5 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
03D8 EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 78  

03D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1781
03DA 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
03DD E0                MOVX    A,@DPTR
03DE 14                DEC     A
03DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1782
03E0         ?C0126:
                                           ; SOURCE LINE # 1787
03E0 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
03E3 E0                MOVX    A,@DPTR
03E4 FB                MOV     R3,A
03E5 900000      R     MOV     DPTR,#rtcClock_dstOffsetMin
03E8 E0                MOVX    A,@DPTR
03E9 FF                MOV     R7,A
03EA 7E00              MOV     R6,#00H
03EC 7C00              MOV     R4,#00H
03EE 7D3C              MOV     R5,#03CH
03F0 120000      E     LCALL   ?C?UIDIV
03F3 C3                CLR     C
03F4 EB                MOV     A,R3
03F5 9F                SUBB    A,R7
03F6 FF                MOV     R7,A
03F7 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
03FA EF                MOV     A,R7
03FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1791
03FC 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
03FF E0                MOVX    A,@DPTR
0400 FF                MOV     R7,A
0401 EF                MOV     A,R7
0402 D3                SETB    C
0403 9417              SUBB    A,#017H
0405 5003              JNC     $ + 5H
0407 020000      R     LJMP    ?C0127
                                           ; SOURCE LINE # 1792
                                           ; SOURCE LINE # 1795
040A 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
040D E0                MOVX    A,@DPTR
040E FF                MOV     R7,A
040F EF                MOV     A,R7
0410 F4                CPL     A
0411 FF                MOV     R7,A
0412 C3                CLR     C
0413 7417              MOV     A,#017H
0415 9F                SUBB    A,R7
0416 FF                MOV     R7,A
0417 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
041A EF                MOV     A,R7
041B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1798
041C 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
041F E0                MOVX    A,@DPTR
0420 14                DEC     A
0421 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1799
0422 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
0425 74FF              MOV     A,#0FFH
0427 75F0FF            MOV     B,#0FFH
042A 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1800
042D 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 79  

0430 E0                MOVX    A,@DPTR
0431 14                DEC     A
0432 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1802
0433 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
0436 E0                MOVX    A,@DPTR
0437 FF                MOV     R7,A
0438 EF                MOV     A,R7
0439 7006              JNZ     ?C0128
                                           ; SOURCE LINE # 1803
                                           ; SOURCE LINE # 1804
043B 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
043E 7407              MOV     A,#07H
0440 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1805
0441         ?C0128:
                                           ; SOURCE LINE # 1807
0441 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
0444 E0                MOVX    A,@DPTR
0445 FF                MOV     R7,A
0446 EF                MOV     A,R7
0447 6003              JZ      $ + 5H
0449 020000      R     LJMP    ?C0127
                                           ; SOURCE LINE # 1808
                                           ; SOURCE LINE # 1810
044C 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
044F E0                MOVX    A,@DPTR
0450 14                DEC     A
0451 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1813
0452 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0455 E0                MOVX    A,@DPTR
0456 FF                MOV     R7,A
0457 EF                MOV     A,R7
0458 6003              JZ      $ + 5H
045A 020000      R     LJMP    ?C0130
                                           ; SOURCE LINE # 1814
                                           ; SOURCE LINE # 1816
045D 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0460 740C              MOV     A,#0CH
0462 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1817
0463 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0466 E0                MOVX    A,@DPTR
0467 FF                MOV     R7,A
0468 EF                MOV     A,R7
0469 900000      R     MOV     DPTR,#rtcClock_daysInMonths-01H
046C 93                MOVC    A,@A+DPTR
046D FF                MOV     R7,A
046E 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
0471 EF                MOV     A,R7
0472 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1821
0473 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
0476 74FF              MOV     A,#0FFH
0478 75F0FF            MOV     B,#0FFH
047B 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1822
047E 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
0481 E0                MOVX    A,@DPTR
0482 FE                MOV     R6,A
0483 A3                INC     DPTR
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 80  

0484 E0                MOVX    A,@DPTR
0485 FF                MOV     R7,A
0486 7C01              MOV     R4,#01H
0488 7D90              MOV     R5,#090H
048A 120000      E     LCALL   ?C?UIDIV
048D ED                MOV     A,R5
048E 4C                ORL     A,R4
048F 6025              JZ      ?C0134
0491 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
0494 E0                MOVX    A,@DPTR
0495 FE                MOV     R6,A
0496 A3                INC     DPTR
0497 E0                MOVX    A,@DPTR
0498 FF                MOV     R7,A
0499 7E00              MOV     R6,#00H
049B EF                MOV     A,R7
049C 5403              ANL     A,#03H
049E FF                MOV     R7,A
049F EF                MOV     A,R7
04A0 4E                ORL     A,R6
04A1 7017              JNZ     ?C0132
04A3 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
04A6 E0                MOVX    A,@DPTR
04A7 FE                MOV     R6,A
04A8 A3                INC     DPTR
04A9 E0                MOVX    A,@DPTR
04AA FF                MOV     R7,A
04AB 7C00              MOV     R4,#00H
04AD 7D64              MOV     R5,#064H
04AF 120000      E     LCALL   ?C?UIDIV
04B2 ED                MOV     A,R5
04B3 4C                ORL     A,R4
04B4 6004              JZ      ?C0132
04B6         ?C0134:
04B6 7F01              MOV     R7,#01H
04B8 8002              SJMP    ?C0133
04BA         ?C0132:
04BA 7F00              MOV     R7,#00H
04BC         ?C0133:
04BC EF                MOV     A,R7
04BD B4011A            CJNE    A,#01H,?C0131
                                           ; SOURCE LINE # 1823
                                           ; SOURCE LINE # 1825
04C0 900000      R     MOV     DPTR,#rtcClock_statusDateTime
04C3 E0                MOVX    A,@DPTR
04C4 FF                MOV     R7,A
04C5 EF                MOV     A,R7
04C6 4402              ORL     A,#02H
04C8 FF                MOV     R7,A
04C9 900000      R     MOV     DPTR,#rtcClock_statusDateTime
04CC EF                MOV     A,R7
04CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1826
04CE 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
04D1 7401              MOV     A,#01H
04D3 F0                MOVX    @DPTR,A
04D4 A3                INC     DPTR
04D5 746E              MOV     A,#06EH
04D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1827
04D8 802A              SJMP    ?C0127
04DA         ?C0131:
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 81  

                                           ; SOURCE LINE # 1829
                                           ; SOURCE LINE # 1831
04DA 900000      R     MOV     DPTR,#rtcClock_statusDateTime
04DD E0                MOVX    A,@DPTR
04DE FF                MOV     R7,A
04DF EF                MOV     A,R7
04E0 54FD              ANL     A,#0FDH
04E2 FF                MOV     R7,A
04E3 900000      R     MOV     DPTR,#rtcClock_statusDateTime
04E6 EF                MOV     A,R7
04E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1832
04E8 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
04EB 7401              MOV     A,#01H
04ED F0                MOVX    @DPTR,A
04EE A3                INC     DPTR
04EF 746D              MOV     A,#06DH
04F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1833
                                           ; SOURCE LINE # 1834
04F2 8010              SJMP    ?C0127
04F4         ?C0130:
                                           ; SOURCE LINE # 1836
                                           ; SOURCE LINE # 1837
04F4 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
04F7 E0                MOVX    A,@DPTR
04F8 FF                MOV     R7,A
04F9 EF                MOV     A,R7
04FA 900000      R     MOV     DPTR,#rtcClock_daysInMonths-01H
04FD 93                MOVC    A,@A+DPTR
04FE FF                MOV     R7,A
04FF 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
0502 EF                MOV     A,R7
0503 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1839
                                           ; SOURCE LINE # 1840
                                           ; SOURCE LINE # 1841
0504         ?C0127:
                                           ; SOURCE LINE # 1844
0504 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0507 E0                MOVX    A,@DPTR
0508 FF                MOV     R7,A
0509 EF                MOV     A,R7
050A 54FE              ANL     A,#0FEH
050C FF                MOV     R7,A
050D 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0510 EF                MOV     A,R7
0511 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1846
0512 900000      R     MOV     DPTR,#rtcClock_dstStopStatus
0515 E4                CLR     A
0516 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1847
                                           ; SOURCE LINE # 1848
0517 020000      R     LJMP    ?C0117
051A         ?C0120:
                                           ; SOURCE LINE # 1850
                                           ; SOURCE LINE # 1851
051A 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
051D E0                MOVX    A,@DPTR
051E FF                MOV     R7,A
051F EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 82  

0520 5407              ANL     A,#07H
0522 FF                MOV     R7,A
0523 7E00              MOV     R6,#00H
0525 EF                MOV     A,R7
0526 6407              XRL     A,#07H
0528 4E                ORL     A,R6
0529 7004              JNZ     ?C0139
052B 7F01              MOV     R7,#01H
052D 8002              SJMP    ?C0140
052F         ?C0139:
052F 7F00              MOV     R7,#00H
0531         ?C0140:
0531 EF                MOV     A,R7
0532 7003              JNZ     $ + 5H
0534 020000      R     LJMP    ?C0117
                                           ; SOURCE LINE # 1853
                                           ; SOURCE LINE # 1855
0537 900000      R     MOV     DPTR,#rtcClock_dstOffsetMin
053A E0                MOVX    A,@DPTR
053B FF                MOV     R7,A
053C 7E00              MOV     R6,#00H
053E 7C00              MOV     R4,#00H
0540 7D3C              MOV     R5,#03CH
0542 120000      E     LCALL   ?C?UIDIV
0545 AF05              MOV     R7,AR5
0547 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
054A E0                MOVX    A,@DPTR
054B 2F                ADD     A,R7
054C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1858
054D 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
0550 E0                MOVX    A,@DPTR
0551 FF                MOV     R7,A
0552 EF                MOV     A,R7
0553 D3                SETB    C
0554 943B              SUBB    A,#03BH
0556 400D              JC      ?C0141
                                           ; SOURCE LINE # 1859
                                           ; SOURCE LINE # 1861
0558 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
055B E0                MOVX    A,@DPTR
055C 24C4              ADD     A,#0C4H
055E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1862
055F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
0562 E0                MOVX    A,@DPTR
0563 04                INC     A
0564 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1863
0565         ?C0141:
                                           ; SOURCE LINE # 1865
0565 900000      R     MOV     DPTR,#rtcClock_dstOffsetMin
0568 E0                MOVX    A,@DPTR
0569 FF                MOV     R7,A
056A 7E00              MOV     R6,#00H
056C 7C00              MOV     R4,#00H
056E 7D3C              MOV     R5,#03CH
0570 120000      E     LCALL   ?C?UIDIV
0573 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
0576 E0                MOVX    A,@DPTR
0577 2F                ADD     A,R7
0578 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 83  

                                           ; SOURCE LINE # 1867
0579 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
057C E0                MOVX    A,@DPTR
057D FF                MOV     R7,A
057E EF                MOV     A,R7
057F D3                SETB    C
0580 9417              SUBB    A,#017H
0582 5003              JNC     $ + 5H
0584 020000      R     LJMP    ?C0142
                                           ; SOURCE LINE # 1868
                                           ; SOURCE LINE # 1870
0587 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
058A E0                MOVX    A,@DPTR
058B 24E8              ADD     A,#0E8H
058D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1871
058E 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
0591 E0                MOVX    A,@DPTR
0592 04                INC     A
0593 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1872
0594 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
0597 E4                CLR     A
0598 75F001            MOV     B,#01H
059B 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1873
059E 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
05A1 E0                MOVX    A,@DPTR
05A2 04                INC     A
05A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1875
05A4 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
05A7 E0                MOVX    A,@DPTR
05A8 FF                MOV     R7,A
05A9 EF                MOV     A,R7
05AA D3                SETB    C
05AB 9407              SUBB    A,#07H
05AD 4006              JC      ?C0143
                                           ; SOURCE LINE # 1876
                                           ; SOURCE LINE # 1877
05AF 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
05B2 7401              MOV     A,#01H
05B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1878
05B5         ?C0143:
                                           ; SOURCE LINE # 1880
05B5 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
05B8 E0                MOVX    A,@DPTR
05B9 FF                MOV     R7,A
05BA EF                MOV     A,R7
05BB 900000      R     MOV     DPTR,#rtcClock_daysInMonths-01H
05BE 93                MOVC    A,@A+DPTR
05BF FF                MOV     R7,A
05C0 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
05C3 E0                MOVX    A,@DPTR
05C4 FE                MOV     R6,A
05C5 EE                MOV     A,R6
05C6 D3                SETB    C
05C7 9F                SUBB    A,R7
05C8 5003              JNC     $ + 5H
05CA 020000      R     LJMP    ?C0142
                                           ; SOURCE LINE # 1882
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 84  

                                           ; SOURCE LINE # 1883
05CD 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
05D0 E0                MOVX    A,@DPTR
05D1 04                INC     A
05D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1884
05D3 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
05D6 7401              MOV     A,#01H
05D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1887
05D9 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
05DC E0                MOVX    A,@DPTR
05DD FF                MOV     R7,A
05DE EF                MOV     A,R7
05DF D3                SETB    C
05E0 940C              SUBB    A,#0CH
05E2 4079              JC      ?C0142
                                           ; SOURCE LINE # 1888
                                           ; SOURCE LINE # 1890
05E4 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
05E7 7401              MOV     A,#01H
05E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1893
05EA 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
05ED E4                CLR     A
05EE 75F001            MOV     B,#01H
05F1 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1896
05F4 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
05F7 E0                MOVX    A,@DPTR
05F8 FE                MOV     R6,A
05F9 A3                INC     DPTR
05FA E0                MOVX    A,@DPTR
05FB FF                MOV     R7,A
05FC 7C01              MOV     R4,#01H
05FE 7D90              MOV     R5,#090H
0600 120000      E     LCALL   ?C?UIDIV
0603 ED                MOV     A,R5
0604 4C                ORL     A,R4
0605 6025              JZ      ?C0149
0607 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
060A E0                MOVX    A,@DPTR
060B FE                MOV     R6,A
060C A3                INC     DPTR
060D E0                MOVX    A,@DPTR
060E FF                MOV     R7,A
060F 7E00              MOV     R6,#00H
0611 EF                MOV     A,R7
0612 5403              ANL     A,#03H
0614 FF                MOV     R7,A
0615 EF                MOV     A,R7
0616 4E                ORL     A,R6
0617 7017              JNZ     ?C0147
0619 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
061C E0                MOVX    A,@DPTR
061D FE                MOV     R6,A
061E A3                INC     DPTR
061F E0                MOVX    A,@DPTR
0620 FF                MOV     R7,A
0621 7C00              MOV     R4,#00H
0623 7D64              MOV     R5,#064H
0625 120000      E     LCALL   ?C?UIDIV
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 85  

0628 ED                MOV     A,R5
0629 4C                ORL     A,R4
062A 6004              JZ      ?C0147
062C         ?C0149:
062C 7F01              MOV     R7,#01H
062E 8002              SJMP    ?C0148
0630         ?C0147:
0630 7F00              MOV     R7,#00H
0632         ?C0148:
0632 EF                MOV     A,R7
0633 B40110            CJNE    A,#01H,?C0146
                                           ; SOURCE LINE # 1897
                                           ; SOURCE LINE # 1899
0636 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0639 E0                MOVX    A,@DPTR
063A FF                MOV     R7,A
063B EF                MOV     A,R7
063C 4402              ORL     A,#02H
063E FF                MOV     R7,A
063F 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0642 EF                MOV     A,R7
0643 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1900
0644 800E              SJMP    ?C0150
0646         ?C0146:
                                           ; SOURCE LINE # 1902
                                           ; SOURCE LINE # 1903
0646 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0649 E0                MOVX    A,@DPTR
064A FF                MOV     R7,A
064B EF                MOV     A,R7
064C 54FD              ANL     A,#0FDH
064E FF                MOV     R7,A
064F 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0652 EF                MOV     A,R7
0653 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1904
0654         ?C0150:
                                           ; SOURCE LINE # 1907
0654 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
0657 E4                CLR     A
0658 F0                MOVX    @DPTR,A
0659 A3                INC     DPTR
065A 7401              MOV     A,#01H
065C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1908
                                           ; SOURCE LINE # 1909
                                           ; SOURCE LINE # 1910
065D         ?C0142:
                                           ; SOURCE LINE # 1911
065D 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0660 E0                MOVX    A,@DPTR
0661 FF                MOV     R7,A
0662 EF                MOV     A,R7
0663 4401              ORL     A,#01H
0665 FF                MOV     R7,A
0666 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0669 EF                MOV     A,R7
066A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1912
066B 900000      R     MOV     DPTR,#rtcClock_dstStartStatus
066E E4                CLR     A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 86  

066F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1913
                                           ; SOURCE LINE # 1914
                                           ; SOURCE LINE # 1915
0670         ?C0117:
                                           ; SOURCE LINE # 1919
0670 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
0673 E0                MOVX    A,@DPTR
0674 FF                MOV     R7,A
0675 EF                MOV     A,R7
0676 C3                CLR     C
0677 940C              SUBB    A,#0CH
0679 5010              JNC     ?C0151
                                           ; SOURCE LINE # 1920
                                           ; SOURCE LINE # 1922
067B 900000      R     MOV     DPTR,#rtcClock_statusDateTime
067E E0                MOVX    A,@DPTR
067F FF                MOV     R7,A
0680 EF                MOV     A,R7
0681 54FB              ANL     A,#0FBH
0683 FF                MOV     R7,A
0684 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0687 EF                MOV     A,R7
0688 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1923
0689 800E              SJMP    ?C0152
068B         ?C0151:
                                           ; SOURCE LINE # 1925
                                           ; SOURCE LINE # 1927
068B 900000      R     MOV     DPTR,#rtcClock_statusDateTime
068E E0                MOVX    A,@DPTR
068F FF                MOV     R7,A
0690 EF                MOV     A,R7
0691 4404              ORL     A,#04H
0693 FF                MOV     R7,A
0694 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0697 EF                MOV     A,R7
0698 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1928
0699         ?C0152:
                                           ; SOURCE LINE # 1933
0699 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
069C E0                MOVX    A,@DPTR
069D FF                MOV     R7,A
069E EF                MOV     A,R7
069F 5401              ANL     A,#01H
06A1 FF                MOV     R7,A
06A2 7E00              MOV     R6,#00H
06A4 EF                MOV     A,R7
06A5 6401              XRL     A,#01H
06A7 4E                ORL     A,R6
06A8 7004              JNZ     ?C0154
06AA 7F01              MOV     R7,#01H
06AC 8002              SJMP    ?C0155
06AE         ?C0154:
06AE 7F00              MOV     R7,#00H
06B0         ?C0155:
06B0 EF                MOV     A,R7
06B1 602C              JZ      ?C0153
                                           ; SOURCE LINE # 1934
                                           ; SOURCE LINE # 1935
06B3 900000      R     MOV     DPTR,#rtcClock_currentTimeDate
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 87  

06B6 E0                MOVX    A,@DPTR
06B7 FF                MOV     R7,A
06B8 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate
06BB E0                MOVX    A,@DPTR
06BC FE                MOV     R6,A
06BD EE                MOV     A,R6
06BE B50710            CJNE    A,AR7,?C0156
                                           ; SOURCE LINE # 1936
                                           ; SOURCE LINE # 1938
06C1 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
06C4 E0                MOVX    A,@DPTR
06C5 FF                MOV     R7,A
06C6 EF                MOV     A,R7
06C7 4401              ORL     A,#01H
06C9 FF                MOV     R7,A
06CA 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
06CD EF                MOV     A,R7
06CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1939
06CF 800E              SJMP    ?C0153
06D1         ?C0156:
                                           ; SOURCE LINE # 1941
                                           ; SOURCE LINE # 1943
06D1 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
06D4 E0                MOVX    A,@DPTR
06D5 FF                MOV     R7,A
06D6 EF                MOV     A,R7
06D7 54FE              ANL     A,#0FEH
06D9 FF                MOV     R7,A
06DA 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
06DD EF                MOV     A,R7
06DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1944
                                           ; SOURCE LINE # 1945
06DF         ?C0153:
                                           ; SOURCE LINE # 1948
06DF 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
06E2 E0                MOVX    A,@DPTR
06E3 FF                MOV     R7,A
06E4 EF                MOV     A,R7
06E5 5402              ANL     A,#02H
06E7 FF                MOV     R7,A
06E8 7E00              MOV     R6,#00H
06EA EF                MOV     A,R7
06EB 6402              XRL     A,#02H
06ED 4E                ORL     A,R6
06EE 7004              JNZ     ?C0159
06F0 7F01              MOV     R7,#01H
06F2 8002              SJMP    ?C0160
06F4         ?C0159:
06F4 7F00              MOV     R7,#00H
06F6         ?C0160:
06F6 EF                MOV     A,R7
06F7 602C              JZ      ?C0158
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
06F9 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+01H
06FC E0                MOVX    A,@DPTR
06FD FF                MOV     R7,A
06FE 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+01H
0701 E0                MOVX    A,@DPTR
0702 FE                MOV     R6,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 88  

0703 EE                MOV     A,R6
0704 B50710            CJNE    A,AR7,?C0161
                                           ; SOURCE LINE # 1951
                                           ; SOURCE LINE # 1953
0707 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
070A E0                MOVX    A,@DPTR
070B FF                MOV     R7,A
070C EF                MOV     A,R7
070D 4402              ORL     A,#02H
070F FF                MOV     R7,A
0710 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0713 EF                MOV     A,R7
0714 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1954
0715 800E              SJMP    ?C0158
0717         ?C0161:
                                           ; SOURCE LINE # 1956
                                           ; SOURCE LINE # 1958
0717 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
071A E0                MOVX    A,@DPTR
071B FF                MOV     R7,A
071C EF                MOV     A,R7
071D 54FD              ANL     A,#0FDH
071F FF                MOV     R7,A
0720 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0723 EF                MOV     A,R7
0724 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1959
                                           ; SOURCE LINE # 1960
0725         ?C0158:
                                           ; SOURCE LINE # 1963
0725 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
0728 E0                MOVX    A,@DPTR
0729 FF                MOV     R7,A
072A EF                MOV     A,R7
072B 5404              ANL     A,#04H
072D FF                MOV     R7,A
072E 7E00              MOV     R6,#00H
0730 EF                MOV     A,R7
0731 6404              XRL     A,#04H
0733 4E                ORL     A,R6
0734 7004              JNZ     ?C0164
0736 7F01              MOV     R7,#01H
0738 8002              SJMP    ?C0165
073A         ?C0164:
073A 7F00              MOV     R7,#00H
073C         ?C0165:
073C EF                MOV     A,R7
073D 602C              JZ      ?C0163
                                           ; SOURCE LINE # 1964
                                           ; SOURCE LINE # 1965
073F 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+02H
0742 E0                MOVX    A,@DPTR
0743 FF                MOV     R7,A
0744 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+02H
0747 E0                MOVX    A,@DPTR
0748 FE                MOV     R6,A
0749 EE                MOV     A,R6
074A B50710            CJNE    A,AR7,?C0166
                                           ; SOURCE LINE # 1966
                                           ; SOURCE LINE # 1968
074D 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 89  

0750 E0                MOVX    A,@DPTR
0751 FF                MOV     R7,A
0752 EF                MOV     A,R7
0753 4404              ORL     A,#04H
0755 FF                MOV     R7,A
0756 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0759 EF                MOV     A,R7
075A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1969
075B 800E              SJMP    ?C0163
075D         ?C0166:
                                           ; SOURCE LINE # 1971
                                           ; SOURCE LINE # 1973
075D 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0760 E0                MOVX    A,@DPTR
0761 FF                MOV     R7,A
0762 EF                MOV     A,R7
0763 54FB              ANL     A,#0FBH
0765 FF                MOV     R7,A
0766 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0769 EF                MOV     A,R7
076A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1974
                                           ; SOURCE LINE # 1975
076B         ?C0163:
                                           ; SOURCE LINE # 1978
076B 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
076E E0                MOVX    A,@DPTR
076F FF                MOV     R7,A
0770 EF                MOV     A,R7
0771 5408              ANL     A,#08H
0773 FF                MOV     R7,A
0774 7E00              MOV     R6,#00H
0776 EF                MOV     A,R7
0777 6408              XRL     A,#08H
0779 4E                ORL     A,R6
077A 7004              JNZ     ?C0169
077C 7F01              MOV     R7,#01H
077E 8002              SJMP    ?C0170
0780         ?C0169:
0780 7F00              MOV     R7,#00H
0782         ?C0170:
0782 EF                MOV     A,R7
0783 602C              JZ      ?C0168
                                           ; SOURCE LINE # 1979
                                           ; SOURCE LINE # 1980
0785 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+03H
0788 E0                MOVX    A,@DPTR
0789 FF                MOV     R7,A
078A 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+03H
078D E0                MOVX    A,@DPTR
078E FE                MOV     R6,A
078F EE                MOV     A,R6
0790 B50710            CJNE    A,AR7,?C0171
                                           ; SOURCE LINE # 1981
                                           ; SOURCE LINE # 1983
0793 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0796 E0                MOVX    A,@DPTR
0797 FF                MOV     R7,A
0798 EF                MOV     A,R7
0799 4408              ORL     A,#08H
079B FF                MOV     R7,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 90  

079C 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
079F EF                MOV     A,R7
07A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1984
07A1 800E              SJMP    ?C0168
07A3         ?C0171:
                                           ; SOURCE LINE # 1986
                                           ; SOURCE LINE # 1988
07A3 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
07A6 E0                MOVX    A,@DPTR
07A7 FF                MOV     R7,A
07A8 EF                MOV     A,R7
07A9 54F7              ANL     A,#0F7H
07AB FF                MOV     R7,A
07AC 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
07AF EF                MOV     A,R7
07B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1989
                                           ; SOURCE LINE # 1990
07B1         ?C0168:
                                           ; SOURCE LINE # 1993
07B1 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
07B4 E0                MOVX    A,@DPTR
07B5 FF                MOV     R7,A
07B6 EF                MOV     A,R7
07B7 5420              ANL     A,#020H
07B9 FF                MOV     R7,A
07BA 7E00              MOV     R6,#00H
07BC EF                MOV     A,R7
07BD 6420              XRL     A,#020H
07BF 4E                ORL     A,R6
07C0 7004              JNZ     ?C0174
07C2 7F01              MOV     R7,#01H
07C4 8002              SJMP    ?C0175
07C6         ?C0174:
07C6 7F00              MOV     R7,#00H
07C8         ?C0175:
07C8 EF                MOV     A,R7
07C9 6036              JZ      ?C0173
                                           ; SOURCE LINE # 1994
                                           ; SOURCE LINE # 1995
07CB 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+05H
07CE E0                MOVX    A,@DPTR
07CF FE                MOV     R6,A
07D0 A3                INC     DPTR
07D1 E0                MOVX    A,@DPTR
07D2 FF                MOV     R7,A
07D3 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+05H
07D6 E0                MOVX    A,@DPTR
07D7 FC                MOV     R4,A
07D8 A3                INC     DPTR
07D9 E0                MOVX    A,@DPTR
07DA FD                MOV     R5,A
07DB ED                MOV     A,R5
07DC B50714            CJNE    A,AR7,?C0176
07DF EC                MOV     A,R4
07E0 B50610            CJNE    A,AR6,?C0176
                                           ; SOURCE LINE # 1996
                                           ; SOURCE LINE # 1998
07E3 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
07E6 E0                MOVX    A,@DPTR
07E7 FF                MOV     R7,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 91  

07E8 EF                MOV     A,R7
07E9 4420              ORL     A,#020H
07EB FF                MOV     R7,A
07EC 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
07EF EF                MOV     A,R7
07F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1999
07F1 800E              SJMP    ?C0173
07F3         ?C0176:
                                           ; SOURCE LINE # 2001
                                           ; SOURCE LINE # 2003
07F3 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
07F6 E0                MOVX    A,@DPTR
07F7 FF                MOV     R7,A
07F8 EF                MOV     A,R7
07F9 54DF              ANL     A,#0DFH
07FB FF                MOV     R7,A
07FC 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
07FF EF                MOV     A,R7
0800 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2004
                                           ; SOURCE LINE # 2005
0801         ?C0173:
                                           ; SOURCE LINE # 2008
0801 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
0804 E0                MOVX    A,@DPTR
0805 FF                MOV     R7,A
0806 EF                MOV     A,R7
0807 5410              ANL     A,#010H
0809 FF                MOV     R7,A
080A 7E00              MOV     R6,#00H
080C EF                MOV     A,R7
080D 6410              XRL     A,#010H
080F 4E                ORL     A,R6
0810 7004              JNZ     ?C0179
0812 7F01              MOV     R7,#01H
0814 8002              SJMP    ?C0180
0816         ?C0179:
0816 7F00              MOV     R7,#00H
0818         ?C0180:
0818 EF                MOV     A,R7
0819 602C              JZ      ?C0178
                                           ; SOURCE LINE # 2009
                                           ; SOURCE LINE # 2010
081B 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+04H
081E E0                MOVX    A,@DPTR
081F FF                MOV     R7,A
0820 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+04H
0823 E0                MOVX    A,@DPTR
0824 FE                MOV     R6,A
0825 EE                MOV     A,R6
0826 B50710            CJNE    A,AR7,?C0181
                                           ; SOURCE LINE # 2011
                                           ; SOURCE LINE # 2013
0829 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
082C E0                MOVX    A,@DPTR
082D FF                MOV     R7,A
082E EF                MOV     A,R7
082F 4410              ORL     A,#010H
0831 FF                MOV     R7,A
0832 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0835 EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 92  

0836 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2014
0837 800E              SJMP    ?C0178
0839         ?C0181:
                                           ; SOURCE LINE # 2016
                                           ; SOURCE LINE # 2018
0839 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
083C E0                MOVX    A,@DPTR
083D FF                MOV     R7,A
083E EF                MOV     A,R7
083F 54EF              ANL     A,#0EFH
0841 FF                MOV     R7,A
0842 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0845 EF                MOV     A,R7
0846 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2019
                                           ; SOURCE LINE # 2020
0847         ?C0178:
                                           ; SOURCE LINE # 2023
0847 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
084A E0                MOVX    A,@DPTR
084B FF                MOV     R7,A
084C EF                MOV     A,R7
084D 5440              ANL     A,#040H
084F FF                MOV     R7,A
0850 7E00              MOV     R6,#00H
0852 EF                MOV     A,R7
0853 6440              XRL     A,#040H
0855 4E                ORL     A,R6
0856 7004              JNZ     ?C0184
0858 7F01              MOV     R7,#01H
085A 8002              SJMP    ?C0185
085C         ?C0184:
085C 7F00              MOV     R7,#00H
085E         ?C0185:
085E EF                MOV     A,R7
085F 602C              JZ      ?C0183
                                           ; SOURCE LINE # 2024
                                           ; SOURCE LINE # 2025
0861 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+07H
0864 E0                MOVX    A,@DPTR
0865 FF                MOV     R7,A
0866 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+07H
0869 E0                MOVX    A,@DPTR
086A FE                MOV     R6,A
086B EE                MOV     A,R6
086C B50710            CJNE    A,AR7,?C0186
                                           ; SOURCE LINE # 2026
                                           ; SOURCE LINE # 2028
086F 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0872 E0                MOVX    A,@DPTR
0873 FF                MOV     R7,A
0874 EF                MOV     A,R7
0875 4440              ORL     A,#040H
0877 FF                MOV     R7,A
0878 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
087B EF                MOV     A,R7
087C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2029
087D 800E              SJMP    ?C0183
087F         ?C0186:
                                           ; SOURCE LINE # 2031
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 93  

                                           ; SOURCE LINE # 2033
087F 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
0882 E0                MOVX    A,@DPTR
0883 FF                MOV     R7,A
0884 EF                MOV     A,R7
0885 54BF              ANL     A,#0BFH
0887 FF                MOV     R7,A
0888 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
088B EF                MOV     A,R7
088C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2034
                                           ; SOURCE LINE # 2035
088D         ?C0183:
                                           ; SOURCE LINE # 2038
088D 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
0890 E0                MOVX    A,@DPTR
0891 FF                MOV     R7,A
0892 EF                MOV     A,R7
0893 5480              ANL     A,#080H
0895 FF                MOV     R7,A
0896 7E00              MOV     R6,#00H
0898 EF                MOV     A,R7
0899 6480              XRL     A,#080H
089B 4E                ORL     A,R6
089C 7004              JNZ     ?C0189
089E 7F01              MOV     R7,#01H
08A0 8002              SJMP    ?C0190
08A2         ?C0189:
08A2 7F00              MOV     R7,#00H
08A4         ?C0190:
08A4 EF                MOV     A,R7
08A5 6036              JZ      ?C0188
                                           ; SOURCE LINE # 2039
                                           ; SOURCE LINE # 2040
08A7 900000      R     MOV     DPTR,#rtcClock_currentTimeDate+08H
08AA E0                MOVX    A,@DPTR
08AB FE                MOV     R6,A
08AC A3                INC     DPTR
08AD E0                MOVX    A,@DPTR
08AE FF                MOV     R7,A
08AF 900000      R     MOV     DPTR,#rtcClock_alarmCfgTimeDate+08H
08B2 E0                MOVX    A,@DPTR
08B3 FC                MOV     R4,A
08B4 A3                INC     DPTR
08B5 E0                MOVX    A,@DPTR
08B6 FD                MOV     R5,A
08B7 ED                MOV     A,R5
08B8 B50714            CJNE    A,AR7,?C0191
08BB EC                MOV     A,R4
08BC B50610            CJNE    A,AR6,?C0191
                                           ; SOURCE LINE # 2041
                                           ; SOURCE LINE # 2043
08BF 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
08C2 E0                MOVX    A,@DPTR
08C3 FF                MOV     R7,A
08C4 EF                MOV     A,R7
08C5 4480              ORL     A,#080H
08C7 FF                MOV     R7,A
08C8 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
08CB EF                MOV     A,R7
08CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2044
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 94  

08CD 800E              SJMP    ?C0188
08CF         ?C0191:
                                           ; SOURCE LINE # 2046
                                           ; SOURCE LINE # 2048
08CF 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
08D2 E0                MOVX    A,@DPTR
08D3 FF                MOV     R7,A
08D4 EF                MOV     A,R7
08D5 547F              ANL     A,#07FH
08D7 FF                MOV     R7,A
08D8 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
08DB EF                MOV     A,R7
08DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2049
                                           ; SOURCE LINE # 2050
08DD         ?C0188:
                                           ; SOURCE LINE # 2052
08DD 900000      R     MOV     DPTR,#rtcClock_alarmCfgMask
08E0 E0                MOVX    A,@DPTR
08E1 FF                MOV     R7,A
08E2 900000      R     MOV     DPTR,#rtcClock_alarmCfgMaskTemp
08E5 EF                MOV     A,R7
08E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2056
08E7 900000      R     MOV     DPTR,#rtcClock_alarmCfgMaskTemp
08EA E0                MOVX    A,@DPTR
08EB FF                MOV     R7,A
08EC EF                MOV     A,R7
08ED 6032              JZ      ?C0199
08EF 900000      R     MOV     DPTR,#rtcClock_alarmCfgMaskTemp
08F2 E0                MOVX    A,@DPTR
08F3 FF                MOV     R7,A
08F4 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
08F7 E0                MOVX    A,@DPTR
08F8 FE                MOV     R6,A
08F9 EE                MOV     A,R6
08FA 5F                ANL     A,R7
08FB FF                MOV     R7,A
08FC 900000      R     MOV     DPTR,#rtcClock_alarmCfgMaskTemp
08FF E0                MOVX    A,@DPTR
0900 FE                MOV     R6,A
0901 EF                MOV     A,R7
0902 B50604            CJNE    A,AR6,?C0197
0905 7F01              MOV     R7,#01H
0907 8002              SJMP    ?C0198
0909         ?C0197:
0909 7F00              MOV     R7,#00H
090B         ?C0198:
090B EF                MOV     A,R7
090C 6013              JZ      ?C0199
090E 900000      R     MOV     DPTR,#rtcClock_statusDateTime
0911 E0                MOVX    A,@DPTR
0912 FF                MOV     R7,A
0913 EF                MOV     A,R7
0914 4408              ORL     A,#08H
0916 FF                MOV     R7,A
0917 900000      R     MOV     DPTR,#rtcClock_statusDateTime
091A EF                MOV     A,R7
091B F0                MOVX    @DPTR,A
091C 900000      R     MOV     DPTR,#rtcClock_alarmCurStatus
091F E4                CLR     A
0920 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 95  

                                           ; SOURCE LINE # 2057
0921         ?C0199:
0921 22                RET     
             ; FUNCTION rtcClock_SetInitValues (END)

             ; FUNCTION _rtcClock_WriteDSTMode (BEGIN)
                                           ; SOURCE LINE # 2099
0000 900000      R     MOV     DPTR,#mode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2100
                                           ; SOURCE LINE # 2102
0005 900000      R     MOV     DPTR,#mode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstModeType
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2104
000F 900000      R     MOV     DPTR,#mode
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5402              ANL     A,#02H
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 6402              XRL     A,#02H
001D 4E                ORL     A,R6
001E 7004              JNZ     ?C0201
0020 7F01              MOV     R7,#01H
0022 8002              SJMP    ?C0202
0024         ?C0201:
0024 7F00              MOV     R7,#00H
0026         ?C0202:
0026 EF                MOV     A,R7
0027 6003              JZ      ?C0203
                                           ; SOURCE LINE # 2105
                                           ; SOURCE LINE # 2107
0029 120000      R     LCALL   rtcClock_DSTDateConversion
                                           ; SOURCE LINE # 2108
                                           ; SOURCE LINE # 2109
002C         ?C0203:
002C 22                RET     
             ; FUNCTION _rtcClock_WriteDSTMode (END)

             ; FUNCTION _rtcClock_WriteDSTStartHour (BEGIN)
                                           ; SOURCE LINE # 2134
0000 900000      R     MOV     DPTR,#hour
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2135
                                           ; SOURCE LINE # 2137
0005 900000      R     MOV     DPTR,#hour
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2138
000F 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStartHour (END)
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 96  


             ; FUNCTION _rtcClock_WriteDSTStartDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 2163
0000 900000      R     MOV     DPTR,#dayOfMonth
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2165
                                           ; SOURCE LINE # 2167
0005 900000      R     MOV     DPTR,#dayOfMonth
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+03H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2168
000F 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStartDayOfMonth (END)

             ; FUNCTION _rtcClock_WriteDSTStartMonth (BEGIN)
                                           ; SOURCE LINE # 2193
0000 900000      R     MOV     DPTR,#month
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2194
                                           ; SOURCE LINE # 2196
0005 900000      R     MOV     DPTR,#month
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+04H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2197
000F 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStartMonth (END)

             ; FUNCTION _rtcClock_WriteDSTStartDayOfWeek (BEGIN)
                                           ; SOURCE LINE # 2243
0000 900000      R     MOV     DPTR,#dayOfWeek
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2245
                                           ; SOURCE LINE # 2247
0005 900000      R     MOV     DPTR,#dayOfWeek
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+01H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2249
000F 900000      R     MOV     DPTR,#rtcClock_dstModeType
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5402              ANL     A,#02H
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 6402              XRL     A,#02H
001D 4E                ORL     A,R6
001E 7004              JNZ     ?C0208
0020 7F01              MOV     R7,#01H
0022 8002              SJMP    ?C0209
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 97  

0024         ?C0208:
0024 7F00              MOV     R7,#00H
0026         ?C0209:
0026 EF                MOV     A,R7
0027 6003              JZ      ?C0210
                                           ; SOURCE LINE # 2250
                                           ; SOURCE LINE # 2252
0029 120000      R     LCALL   rtcClock_DSTDateConversion
                                           ; SOURCE LINE # 2253
                                           ; SOURCE LINE # 2254
002C         ?C0210:
002C 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStartDayOfWeek (END)

             ; FUNCTION _rtcClock_WriteDSTStartWeek (BEGIN)
                                           ; SOURCE LINE # 2303
0000 900000      R     MOV     DPTR,#week
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2304
                                           ; SOURCE LINE # 2306
0005 900000      R     MOV     DPTR,#week
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStart+02H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2308
000F 900000      R     MOV     DPTR,#rtcClock_dstModeType
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5402              ANL     A,#02H
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 6402              XRL     A,#02H
001D 4E                ORL     A,R6
001E 7004              JNZ     ?C0212
0020 7F01              MOV     R7,#01H
0022 8002              SJMP    ?C0213
0024         ?C0212:
0024 7F00              MOV     R7,#00H
0026         ?C0213:
0026 EF                MOV     A,R7
0027 6003              JZ      ?C0214
                                           ; SOURCE LINE # 2309
                                           ; SOURCE LINE # 2311
0029 120000      R     LCALL   rtcClock_DSTDateConversion
                                           ; SOURCE LINE # 2312
                                           ; SOURCE LINE # 2313
002C         ?C0214:
002C 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStartWeek (END)

             ; FUNCTION _rtcClock_WriteDSTStopHour (BEGIN)
                                           ; SOURCE LINE # 2338
0000 900000      R     MOV     DPTR,#hour
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2339
                                           ; SOURCE LINE # 2341
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 98  

0005 900000      R     MOV     DPTR,#hour
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2342
000F 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStopHour (END)

             ; FUNCTION _rtcClock_WriteDSTStopDayOfMonth (BEGIN)
                                           ; SOURCE LINE # 2367
0000 900000      R     MOV     DPTR,#dayOfMonth
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2369
                                           ; SOURCE LINE # 2371
0005 900000      R     MOV     DPTR,#dayOfMonth
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+03H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2372
000F 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStopDayOfMonth (END)

             ; FUNCTION _rtcClock_WriteDSTStopMonth (BEGIN)
                                           ; SOURCE LINE # 2397
0000 900000      R     MOV     DPTR,#month
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2398
                                           ; SOURCE LINE # 2400
0005 900000      R     MOV     DPTR,#month
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+04H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2401
000F 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStopMonth (END)

             ; FUNCTION _rtcClock_WriteDSTStopDayOfWeek (BEGIN)
                                           ; SOURCE LINE # 2450
0000 900000      R     MOV     DPTR,#dayOfWeek
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2452
                                           ; SOURCE LINE # 2454
0005 900000      R     MOV     DPTR,#dayOfWeek
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+01H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2456
000F 900000      R     MOV     DPTR,#rtcClock_dstModeType
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 99  

0015 5402              ANL     A,#02H
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 6402              XRL     A,#02H
001D 4E                ORL     A,R6
001E 7004              JNZ     ?C0219
0020 7F01              MOV     R7,#01H
0022 8002              SJMP    ?C0220
0024         ?C0219:
0024 7F00              MOV     R7,#00H
0026         ?C0220:
0026 EF                MOV     A,R7
0027 6003              JZ      ?C0221
                                           ; SOURCE LINE # 2457
                                           ; SOURCE LINE # 2459
0029 120000      R     LCALL   rtcClock_DSTDateConversion
                                           ; SOURCE LINE # 2460
                                           ; SOURCE LINE # 2461
002C         ?C0221:
002C 22                RET     
             ; FUNCTION _rtcClock_WriteDSTStopDayOfWeek (END)

             ; FUNCTION _rtcClock_WriteDSTStopWeek (BEGIN)
                                           ; SOURCE LINE # 2510
0000 900000      R     MOV     DPTR,#week
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2511
                                           ; SOURCE LINE # 2513
0005 900000      R     MOV     DPTR,#week
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstTimeDateStop+02H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2515
000F 900000      R     MOV     DPTR,#rtcClock_dstModeType
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 5402              ANL     A,#02H
0017 FF                MOV     R7,A
0018 7E00              MOV     R6,#00H
001A EF                MOV     A,R7
001B 6402              XRL     A,#02H
001D 4E                ORL     A,R6
001E 7004              JNZ     ?C0223
0020 7F01              MOV     R7,#01H
0022 8002              SJMP    ?C0224
0024         ?C0223:
0024 7F00              MOV     R7,#00H
0026         ?C0224:
0026 EF                MOV     A,R7
0027 6003              JZ      ?C0225
                                           ; SOURCE LINE # 2516
                                           ; SOURCE LINE # 2518
0029 120000      R     LCALL   rtcClock_DSTDateConversion
                                           ; SOURCE LINE # 2519
                                           ; SOURCE LINE # 2520
002C         ?C0225:
002C 22                RET     
C51 COMPILER V9.51   RTCCLOCK                                                              05/30/2018 14:56:13 PAGE 100 

             ; FUNCTION _rtcClock_WriteDSTStopWeek (END)

             ; FUNCTION _rtcClock_WriteDSTOffset (BEGIN)
                                           ; SOURCE LINE # 2546
0000 900000      R     MOV     DPTR,#offset
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2547
                                           ; SOURCE LINE # 2549
0005 900000      R     MOV     DPTR,#offset
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#rtcClock_dstOffsetMin
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2550
000F 22                RET     
             ; FUNCTION _rtcClock_WriteDSTOffset (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4154    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =     39      46
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
